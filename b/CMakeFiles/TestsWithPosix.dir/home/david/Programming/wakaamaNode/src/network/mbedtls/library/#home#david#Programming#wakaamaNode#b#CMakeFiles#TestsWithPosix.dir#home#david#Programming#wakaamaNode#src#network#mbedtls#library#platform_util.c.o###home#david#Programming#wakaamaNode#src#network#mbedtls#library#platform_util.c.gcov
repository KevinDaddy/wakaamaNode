        -:    0:Source:/home/david/Programming/wakaamaNode/src/network/mbedtls/library/platform_util.c
        -:    0:Graph:/home/david/Programming/wakaamaNode/b/CMakeFiles/TestsWithPosix.dir/home/david/Programming/wakaamaNode/src/network/mbedtls/library/platform_util.c.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2: * Common and shared functions used by multiple modules in the Mbed TLS
        -:    3: * library.
        -:    4: *
        -:    5: *  Copyright (C) 2018, Arm Limited, All Rights Reserved
        -:    6: *  SPDX-License-Identifier: Apache-2.0
        -:    7: *
        -:    8: *  Licensed under the Apache License, Version 2.0 (the "License"); you may
        -:    9: *  not use this file except in compliance with the License.
        -:   10: *  You may obtain a copy of the License at
        -:   11: *
        -:   12: *  http://www.apache.org/licenses/LICENSE-2.0
        -:   13: *
        -:   14: *  Unless required by applicable law or agreed to in writing, software
        -:   15: *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
        -:   16: *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   17: *  See the License for the specific language governing permissions and
        -:   18: *  limitations under the License.
        -:   19: *
        -:   20: *  This file is part of Mbed TLS (https://tls.mbed.org)
        -:   21: */
        -:   22:
        -:   23:#if !defined(MBEDTLS_CONFIG_FILE)
        -:   24:#include "mbedtls/config.h"
        -:   25:#else
        -:   26:#include MBEDTLS_CONFIG_FILE
        -:   27:#endif
        -:   28:
        -:   29:#include "mbedtls/platform_util.h"
        -:   30:
        -:   31:#include <stddef.h>
        -:   32:#include <string.h>
        -:   33:
        -:   34:#if !defined(MBEDTLS_PLATFORM_ZEROIZE_ALT)
        -:   35:/*
        -:   36: * This implementation should never be optimized out by the compiler
        -:   37: *
        -:   38: * This implementation for mbedtls_platform_zeroize() was inspired from Colin
        -:   39: * Percival's blog article at:
        -:   40: *
        -:   41: * http://www.daemonology.net/blog/2014-09-04-how-to-zero-a-buffer.html
        -:   42: *
        -:   43: * It uses a volatile function pointer to the standard memset(). Because the
        -:   44: * pointer is volatile the compiler expects it to change at
        -:   45: * any time and will not optimize out the call that could potentially perform
        -:   46: * other operations on the input buffer instead of just setting it to 0.
        -:   47: * Nevertheless, as pointed out by davidtgoldblatt on Hacker News
        -:   48: * (refer to http://www.daemonology.net/blog/2014-09-05-erratum.html for
        -:   49: * details), optimizations of the following form are still possible:
        -:   50: *
        -:   51: * if( memset_func != memset )
        -:   52: *     memset_func( buf, 0, len );
        -:   53: *
        -:   54: * Note that it is extremely difficult to guarantee that
        -:   55: * mbedtls_platform_zeroize() will not be optimized out by aggressive compilers
        -:   56: * in a portable way. For this reason, Mbed TLS also provides the configuration
        -:   57: * option MBEDTLS_PLATFORM_ZEROIZE_ALT, which allows users to configure
        -:   58: * mbedtls_platform_zeroize() to use a suitable implementation for their
        -:   59: * platform and needs.
        -:   60: */
        -:   61:static void * (* const volatile memset_func)( void *, int, size_t ) = memset;
        -:   62:
    #####:   63:void mbedtls_platform_zeroize( void *buf, size_t len )
        -:   64:{
    #####:   65:    memset_func( buf, 0, len );
    #####:   66:}
        -:   67:#endif /* MBEDTLS_PLATFORM_ZEROIZE_ALT */
