        -:    0:Source:/home/david/Programming/wakaamaNode/src/network/mbedtls/library/ssl_tls.c
        -:    0:Graph:/home/david/Programming/wakaamaNode/b/CMakeFiles/TestsWithPosix.dir/home/david/Programming/wakaamaNode/src/network/mbedtls/library/ssl_tls.c.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2: *  SSLv3/TLSv1 shared functions
        -:    3: *
        -:    4: *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
        -:    5: *  SPDX-License-Identifier: Apache-2.0
        -:    6: *
        -:    7: *  Licensed under the Apache License, Version 2.0 (the "License"); you may
        -:    8: *  not use this file except in compliance with the License.
        -:    9: *  You may obtain a copy of the License at
        -:   10: *
        -:   11: *  http://www.apache.org/licenses/LICENSE-2.0
        -:   12: *
        -:   13: *  Unless required by applicable law or agreed to in writing, software
        -:   14: *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
        -:   15: *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   16: *  See the License for the specific language governing permissions and
        -:   17: *  limitations under the License.
        -:   18: *
        -:   19: *  This file is part of mbed TLS (https://tls.mbed.org)
        -:   20: */
        -:   21:/*
        -:   22: *  The SSL 3.0 specification was drafted by Netscape in 1996,
        -:   23: *  and became an IETF standard in 1999.
        -:   24: *
        -:   25: *  http://wp.netscape.com/eng/ssl3/
        -:   26: *  http://www.ietf.org/rfc/rfc2246.txt
        -:   27: *  http://www.ietf.org/rfc/rfc4346.txt
        -:   28: */
        -:   29:
        -:   30:#if !defined(MBEDTLS_CONFIG_FILE)
        -:   31:#include "mbedtls/config.h"
        -:   32:#else
        -:   33:#include MBEDTLS_CONFIG_FILE
        -:   34:#endif
        -:   35:
        -:   36:#if defined(MBEDTLS_SSL_TLS_C)
        -:   37:
        -:   38:#if defined(MBEDTLS_PLATFORM_C)
        -:   39:#include "mbedtls/platform.h"
        -:   40:#else
        -:   41:#include <stdlib.h>
        -:   42:#define mbedtls_calloc    calloc
        -:   43:#define mbedtls_free      free
        -:   44:#endif
        -:   45:
        -:   46:#include "mbedtls/debug.h"
        -:   47:#include "mbedtls/ssl.h"
        -:   48:#include "mbedtls/ssl_internal.h"
        -:   49:#include "mbedtls/platform_util.h"
        -:   50:
        -:   51:#include <string.h>
        -:   52:
        -:   53:#if defined(MBEDTLS_X509_CRT_PARSE_C)
        -:   54:#include "mbedtls/oid.h"
        -:   55:#endif
        -:   56:
        -:   57:/* Length of the "epoch" field in the record header */
    #####:   58:static inline size_t ssl_ep_len( const mbedtls_ssl_context *ssl )
        -:   59:{
        -:   60:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####:   61:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
    #####:   62:        return( 2 );
        -:   63:#else
        -:   64:    ((void) ssl);
        -:   65:#endif
    #####:   66:    return( 0 );
        -:   67:}
        -:   68:
        -:   69:/*
        -:   70: * Start a timer.
        -:   71: * Passing millisecs = 0 cancels a running timer.
        -:   72: */
    #####:   73:static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
        -:   74:{
    #####:   75:    if( ssl->f_set_timer == NULL )
    #####:   76:        return;
        -:   77:
    #####:   78:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
    #####:   79:    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
        -:   80:}
        -:   81:
        -:   82:/*
        -:   83: * Return -1 is timer is expired, 0 if it isn't.
        -:   84: */
    #####:   85:static int ssl_check_timer( mbedtls_ssl_context *ssl )
        -:   86:{
    #####:   87:    if( ssl->f_get_timer == NULL )
    #####:   88:        return( 0 );
        -:   89:
    #####:   90:    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
        -:   91:    {
    #####:   92:        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
    #####:   93:        return( -1 );
        -:   94:    }
        -:   95:
    #####:   96:    return( 0 );
        -:   97:}
        -:   98:
        -:   99:#if defined(MBEDTLS_SSL_PROTO_DTLS)
        -:  100:/*
        -:  101: * Double the retransmit timeout value, within the allowed range,
        -:  102: * returning -1 if the maximum value has already been reached.
        -:  103: */
    #####:  104:static int ssl_double_retransmit_timeout( mbedtls_ssl_context *ssl )
        -:  105:{
        -:  106:    uint32_t new_timeout;
        -:  107:
    #####:  108:    if( ssl->handshake->retransmit_timeout >= ssl->conf->hs_timeout_max )
    #####:  109:        return( -1 );
        -:  110:
    #####:  111:    new_timeout = 2 * ssl->handshake->retransmit_timeout;
        -:  112:
        -:  113:    /* Avoid arithmetic overflow and range overflow */
    #####:  114:    if( new_timeout < ssl->handshake->retransmit_timeout ||
    #####:  115:        new_timeout > ssl->conf->hs_timeout_max )
        -:  116:    {
    #####:  117:        new_timeout = ssl->conf->hs_timeout_max;
        -:  118:    }
        -:  119:
    #####:  120:    ssl->handshake->retransmit_timeout = new_timeout;
    #####:  121:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "update timeout value to %d millisecs",
        -:  122:                        ssl->handshake->retransmit_timeout ) );
        -:  123:
    #####:  124:    return( 0 );
        -:  125:}
        -:  126:
    #####:  127:static void ssl_reset_retransmit_timeout( mbedtls_ssl_context *ssl )
        -:  128:{
    #####:  129:    ssl->handshake->retransmit_timeout = ssl->conf->hs_timeout_min;
    #####:  130:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "update timeout value to %d millisecs",
        -:  131:                        ssl->handshake->retransmit_timeout ) );
    #####:  132:}
        -:  133:#endif /* MBEDTLS_SSL_PROTO_DTLS */
        -:  134:
        -:  135:#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
        -:  136:/*
        -:  137: * Convert max_fragment_length codes to length.
        -:  138: * RFC 6066 says:
        -:  139: *    enum{
        -:  140: *        2^9(1), 2^10(2), 2^11(3), 2^12(4), (255)
        -:  141: *    } MaxFragmentLength;
        -:  142: * and we add 0 -> extension unused
        -:  143: */
        -:  144:static unsigned int mfl_code_to_length[MBEDTLS_SSL_MAX_FRAG_LEN_INVALID] =
        -:  145:{
        -:  146:    MBEDTLS_SSL_MAX_CONTENT_LEN,    /* MBEDTLS_SSL_MAX_FRAG_LEN_NONE */
        -:  147:    512,                    /* MBEDTLS_SSL_MAX_FRAG_LEN_512  */
        -:  148:    1024,                   /* MBEDTLS_SSL_MAX_FRAG_LEN_1024 */
        -:  149:    2048,                   /* MBEDTLS_SSL_MAX_FRAG_LEN_2048 */
        -:  150:    4096,                   /* MBEDTLS_SSL_MAX_FRAG_LEN_4096 */
        -:  151:};
        -:  152:#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
        -:  153:
        -:  154:#if defined(MBEDTLS_SSL_CLI_C)
    #####:  155:static int ssl_session_copy( mbedtls_ssl_session *dst, const mbedtls_ssl_session *src )
        -:  156:{
    #####:  157:    mbedtls_ssl_session_free( dst );
    #####:  158:    memcpy( dst, src, sizeof( mbedtls_ssl_session ) );
        -:  159:
        -:  160:#if defined(MBEDTLS_X509_CRT_PARSE_C)
    #####:  161:    if( src->peer_cert != NULL )
        -:  162:    {
        -:  163:        int ret;
        -:  164:
    #####:  165:        dst->peer_cert = mbedtls_calloc( 1, sizeof(mbedtls_x509_crt) );
    #####:  166:        if( dst->peer_cert == NULL )
    #####:  167:            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
        -:  168:
    #####:  169:        mbedtls_x509_crt_init( dst->peer_cert );
        -:  170:
    #####:  171:        if( ( ret = mbedtls_x509_crt_parse_der( dst->peer_cert, src->peer_cert->raw.p,
    #####:  172:                                        src->peer_cert->raw.len ) ) != 0 )
        -:  173:        {
    #####:  174:            mbedtls_free( dst->peer_cert );
    #####:  175:            dst->peer_cert = NULL;
    #####:  176:            return( ret );
        -:  177:        }
        -:  178:    }
        -:  179:#endif /* MBEDTLS_X509_CRT_PARSE_C */
        -:  180:
        -:  181:#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
        -:  182:    if( src->ticket != NULL )
        -:  183:    {
        -:  184:        dst->ticket = mbedtls_calloc( 1, src->ticket_len );
        -:  185:        if( dst->ticket == NULL )
        -:  186:            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
        -:  187:
        -:  188:        memcpy( dst->ticket, src->ticket, src->ticket_len );
        -:  189:    }
        -:  190:#endif /* MBEDTLS_SSL_SESSION_TICKETS && MBEDTLS_SSL_CLI_C */
        -:  191:
    #####:  192:    return( 0 );
        -:  193:}
        -:  194:#endif /* MBEDTLS_SSL_CLI_C */
        -:  195:
        -:  196:#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
        -:  197:int (*mbedtls_ssl_hw_record_init)( mbedtls_ssl_context *ssl,
        -:  198:                     const unsigned char *key_enc, const unsigned char *key_dec,
        -:  199:                     size_t keylen,
        -:  200:                     const unsigned char *iv_enc,  const unsigned char *iv_dec,
        -:  201:                     size_t ivlen,
        -:  202:                     const unsigned char *mac_enc, const unsigned char *mac_dec,
        -:  203:                     size_t maclen ) = NULL;
        -:  204:int (*mbedtls_ssl_hw_record_activate)( mbedtls_ssl_context *ssl, int direction) = NULL;
        -:  205:int (*mbedtls_ssl_hw_record_reset)( mbedtls_ssl_context *ssl ) = NULL;
        -:  206:int (*mbedtls_ssl_hw_record_write)( mbedtls_ssl_context *ssl ) = NULL;
        -:  207:int (*mbedtls_ssl_hw_record_read)( mbedtls_ssl_context *ssl ) = NULL;
        -:  208:int (*mbedtls_ssl_hw_record_finish)( mbedtls_ssl_context *ssl ) = NULL;
        -:  209:#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
        -:  210:
        -:  211:/*
        -:  212: * Key material generation
        -:  213: */
        -:  214:#if defined(MBEDTLS_SSL_PROTO_SSL3)
        -:  215:static int ssl3_prf( const unsigned char *secret, size_t slen,
        -:  216:                     const char *label,
        -:  217:                     const unsigned char *random, size_t rlen,
        -:  218:                     unsigned char *dstbuf, size_t dlen )
        -:  219:{
        -:  220:    int ret = 0;
        -:  221:    size_t i;
        -:  222:    mbedtls_md5_context md5;
        -:  223:    mbedtls_sha1_context sha1;
        -:  224:    unsigned char padding[16];
        -:  225:    unsigned char sha1sum[20];
        -:  226:    ((void)label);
        -:  227:
        -:  228:    mbedtls_md5_init(  &md5  );
        -:  229:    mbedtls_sha1_init( &sha1 );
        -:  230:
        -:  231:    /*
        -:  232:     *  SSLv3:
        -:  233:     *    block =
        -:  234:     *      MD5( secret + SHA1( 'A'    + secret + random ) ) +
        -:  235:     *      MD5( secret + SHA1( 'BB'   + secret + random ) ) +
        -:  236:     *      MD5( secret + SHA1( 'CCC'  + secret + random ) ) +
        -:  237:     *      ...
        -:  238:     */
        -:  239:    for( i = 0; i < dlen / 16; i++ )
        -:  240:    {
        -:  241:        memset( padding, (unsigned char) ('A' + i), 1 + i );
        -:  242:
        -:  243:        if( ( ret = mbedtls_sha1_starts_ret( &sha1 ) ) != 0 )
        -:  244:            goto exit;
        -:  245:        if( ( ret = mbedtls_sha1_update_ret( &sha1, padding, 1 + i ) ) != 0 )
        -:  246:            goto exit;
        -:  247:        if( ( ret = mbedtls_sha1_update_ret( &sha1, secret, slen ) ) != 0 )
        -:  248:            goto exit;
        -:  249:        if( ( ret = mbedtls_sha1_update_ret( &sha1, random, rlen ) ) != 0 )
        -:  250:            goto exit;
        -:  251:        if( ( ret = mbedtls_sha1_finish_ret( &sha1, sha1sum ) ) != 0 )
        -:  252:            goto exit;
        -:  253:
        -:  254:        if( ( ret = mbedtls_md5_starts_ret( &md5 ) ) != 0 )
        -:  255:            goto exit;
        -:  256:        if( ( ret = mbedtls_md5_update_ret( &md5, secret, slen ) ) != 0 )
        -:  257:            goto exit;
        -:  258:        if( ( ret = mbedtls_md5_update_ret( &md5, sha1sum, 20 ) ) != 0 )
        -:  259:            goto exit;
        -:  260:        if( ( ret = mbedtls_md5_finish_ret( &md5, dstbuf + i * 16 ) ) != 0 )
        -:  261:            goto exit;
        -:  262:    }
        -:  263:
        -:  264:exit:
        -:  265:    mbedtls_md5_free(  &md5  );
        -:  266:    mbedtls_sha1_free( &sha1 );
        -:  267:
        -:  268:    mbedtls_platform_zeroize( padding, sizeof( padding ) );
        -:  269:    mbedtls_platform_zeroize( sha1sum, sizeof( sha1sum ) );
        -:  270:
        -:  271:    return( ret );
        -:  272:}
        -:  273:#endif /* MBEDTLS_SSL_PROTO_SSL3 */
        -:  274:
        -:  275:#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)
    #####:  276:static int tls1_prf( const unsigned char *secret, size_t slen,
        -:  277:                     const char *label,
        -:  278:                     const unsigned char *random, size_t rlen,
        -:  279:                     unsigned char *dstbuf, size_t dlen )
        -:  280:{
        -:  281:    size_t nb, hs;
        -:  282:    size_t i, j, k;
        -:  283:    const unsigned char *S1, *S2;
        -:  284:    unsigned char tmp[128];
        -:  285:    unsigned char h_i[20];
        -:  286:    const mbedtls_md_info_t *md_info;
        -:  287:    mbedtls_md_context_t md_ctx;
        -:  288:    int ret;
        -:  289:
    #####:  290:    mbedtls_md_init( &md_ctx );
        -:  291:
    #####:  292:    if( sizeof( tmp ) < 20 + strlen( label ) + rlen )
    #####:  293:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -:  294:
    #####:  295:    hs = ( slen + 1 ) / 2;
    #####:  296:    S1 = secret;
    #####:  297:    S2 = secret + slen - hs;
        -:  298:
    #####:  299:    nb = strlen( label );
    #####:  300:    memcpy( tmp + 20, label, nb );
    #####:  301:    memcpy( tmp + 20 + nb, random, rlen );
    #####:  302:    nb += rlen;
        -:  303:
        -:  304:    /*
        -:  305:     * First compute P_md5(secret,label+random)[0..dlen]
        -:  306:     */
    #####:  307:    if( ( md_info = mbedtls_md_info_from_type( MBEDTLS_MD_MD5 ) ) == NULL )
    #####:  308:        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -:  309:
    #####:  310:    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
    #####:  311:        return( ret );
        -:  312:
    #####:  313:    mbedtls_md_hmac_starts( &md_ctx, S1, hs );
    #####:  314:    mbedtls_md_hmac_update( &md_ctx, tmp + 20, nb );
    #####:  315:    mbedtls_md_hmac_finish( &md_ctx, 4 + tmp );
        -:  316:
    #####:  317:    for( i = 0; i < dlen; i += 16 )
        -:  318:    {
    #####:  319:        mbedtls_md_hmac_reset ( &md_ctx );
    #####:  320:        mbedtls_md_hmac_update( &md_ctx, 4 + tmp, 16 + nb );
    #####:  321:        mbedtls_md_hmac_finish( &md_ctx, h_i );
        -:  322:
    #####:  323:        mbedtls_md_hmac_reset ( &md_ctx );
    #####:  324:        mbedtls_md_hmac_update( &md_ctx, 4 + tmp, 16 );
    #####:  325:        mbedtls_md_hmac_finish( &md_ctx, 4 + tmp );
        -:  326:
    #####:  327:        k = ( i + 16 > dlen ) ? dlen % 16 : 16;
        -:  328:
    #####:  329:        for( j = 0; j < k; j++ )
    #####:  330:            dstbuf[i + j]  = h_i[j];
        -:  331:    }
        -:  332:
    #####:  333:    mbedtls_md_free( &md_ctx );
        -:  334:
        -:  335:    /*
        -:  336:     * XOR out with P_sha1(secret,label+random)[0..dlen]
        -:  337:     */
    #####:  338:    if( ( md_info = mbedtls_md_info_from_type( MBEDTLS_MD_SHA1 ) ) == NULL )
    #####:  339:        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -:  340:
    #####:  341:    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
    #####:  342:        return( ret );
        -:  343:
    #####:  344:    mbedtls_md_hmac_starts( &md_ctx, S2, hs );
    #####:  345:    mbedtls_md_hmac_update( &md_ctx, tmp + 20, nb );
    #####:  346:    mbedtls_md_hmac_finish( &md_ctx, tmp );
        -:  347:
    #####:  348:    for( i = 0; i < dlen; i += 20 )
        -:  349:    {
    #####:  350:        mbedtls_md_hmac_reset ( &md_ctx );
    #####:  351:        mbedtls_md_hmac_update( &md_ctx, tmp, 20 + nb );
    #####:  352:        mbedtls_md_hmac_finish( &md_ctx, h_i );
        -:  353:
    #####:  354:        mbedtls_md_hmac_reset ( &md_ctx );
    #####:  355:        mbedtls_md_hmac_update( &md_ctx, tmp, 20 );
    #####:  356:        mbedtls_md_hmac_finish( &md_ctx, tmp );
        -:  357:
    #####:  358:        k = ( i + 20 > dlen ) ? dlen % 20 : 20;
        -:  359:
    #####:  360:        for( j = 0; j < k; j++ )
    #####:  361:            dstbuf[i + j] = (unsigned char)( dstbuf[i + j] ^ h_i[j] );
        -:  362:    }
        -:  363:
    #####:  364:    mbedtls_md_free( &md_ctx );
        -:  365:
    #####:  366:    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
    #####:  367:    mbedtls_platform_zeroize( h_i, sizeof( h_i ) );
        -:  368:
    #####:  369:    return( 0 );
        -:  370:}
        -:  371:#endif /* MBEDTLS_SSL_PROTO_TLS1) || MBEDTLS_SSL_PROTO_TLS1_1 */
        -:  372:
        -:  373:#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    #####:  374:static int tls_prf_generic( mbedtls_md_type_t md_type,
        -:  375:                            const unsigned char *secret, size_t slen,
        -:  376:                            const char *label,
        -:  377:                            const unsigned char *random, size_t rlen,
        -:  378:                            unsigned char *dstbuf, size_t dlen )
        -:  379:{
        -:  380:    size_t nb;
        -:  381:    size_t i, j, k, md_len;
        -:  382:    unsigned char tmp[128];
        -:  383:    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
        -:  384:    const mbedtls_md_info_t *md_info;
        -:  385:    mbedtls_md_context_t md_ctx;
        -:  386:    int ret;
        -:  387:
    #####:  388:    mbedtls_md_init( &md_ctx );
        -:  389:
    #####:  390:    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
    #####:  391:        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -:  392:
    #####:  393:    md_len = mbedtls_md_get_size( md_info );
        -:  394:
    #####:  395:    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
    #####:  396:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -:  397:
    #####:  398:    nb = strlen( label );
    #####:  399:    memcpy( tmp + md_len, label, nb );
    #####:  400:    memcpy( tmp + md_len + nb, random, rlen );
    #####:  401:    nb += rlen;
        -:  402:
        -:  403:    /*
        -:  404:     * Compute P_<hash>(secret, label + random)[0..dlen]
        -:  405:     */
    #####:  406:    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
    #####:  407:        return( ret );
        -:  408:
    #####:  409:    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    #####:  410:    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    #####:  411:    mbedtls_md_hmac_finish( &md_ctx, tmp );
        -:  412:
    #####:  413:    for( i = 0; i < dlen; i += md_len )
        -:  414:    {
    #####:  415:        mbedtls_md_hmac_reset ( &md_ctx );
    #####:  416:        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
    #####:  417:        mbedtls_md_hmac_finish( &md_ctx, h_i );
        -:  418:
    #####:  419:        mbedtls_md_hmac_reset ( &md_ctx );
    #####:  420:        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
    #####:  421:        mbedtls_md_hmac_finish( &md_ctx, tmp );
        -:  422:
    #####:  423:        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
        -:  424:
    #####:  425:        for( j = 0; j < k; j++ )
    #####:  426:            dstbuf[i + j]  = h_i[j];
        -:  427:    }
        -:  428:
    #####:  429:    mbedtls_md_free( &md_ctx );
        -:  430:
    #####:  431:    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
    #####:  432:    mbedtls_platform_zeroize( h_i, sizeof( h_i ) );
        -:  433:
    #####:  434:    return( 0 );
        -:  435:}
        -:  436:
        -:  437:#if defined(MBEDTLS_SHA256_C)
    #####:  438:static int tls_prf_sha256( const unsigned char *secret, size_t slen,
        -:  439:                           const char *label,
        -:  440:                           const unsigned char *random, size_t rlen,
        -:  441:                           unsigned char *dstbuf, size_t dlen )
        -:  442:{
    #####:  443:    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
        -:  444:                             label, random, rlen, dstbuf, dlen ) );
        -:  445:}
        -:  446:#endif /* MBEDTLS_SHA256_C */
        -:  447:
        -:  448:#if defined(MBEDTLS_SHA512_C)
    #####:  449:static int tls_prf_sha384( const unsigned char *secret, size_t slen,
        -:  450:                           const char *label,
        -:  451:                           const unsigned char *random, size_t rlen,
        -:  452:                           unsigned char *dstbuf, size_t dlen )
        -:  453:{
    #####:  454:    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
        -:  455:                             label, random, rlen, dstbuf, dlen ) );
        -:  456:}
        -:  457:#endif /* MBEDTLS_SHA512_C */
        -:  458:#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
        -:  459:
        -:  460:static void ssl_update_checksum_start( mbedtls_ssl_context *, const unsigned char *, size_t );
        -:  461:
        -:  462:#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
        -:  463:    defined(MBEDTLS_SSL_PROTO_TLS1_1)
        -:  464:static void ssl_update_checksum_md5sha1( mbedtls_ssl_context *, const unsigned char *, size_t );
        -:  465:#endif
        -:  466:
        -:  467:#if defined(MBEDTLS_SSL_PROTO_SSL3)
        -:  468:static void ssl_calc_verify_ssl( mbedtls_ssl_context *, unsigned char * );
        -:  469:static void ssl_calc_finished_ssl( mbedtls_ssl_context *, unsigned char *, int );
        -:  470:#endif
        -:  471:
        -:  472:#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)
        -:  473:static void ssl_calc_verify_tls( mbedtls_ssl_context *, unsigned char * );
        -:  474:static void ssl_calc_finished_tls( mbedtls_ssl_context *, unsigned char *, int );
        -:  475:#endif
        -:  476:
        -:  477:#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        -:  478:#if defined(MBEDTLS_SHA256_C)
        -:  479:static void ssl_update_checksum_sha256( mbedtls_ssl_context *, const unsigned char *, size_t );
        -:  480:static void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *,unsigned char * );
        -:  481:static void ssl_calc_finished_tls_sha256( mbedtls_ssl_context *,unsigned char *, int );
        -:  482:#endif
        -:  483:
        -:  484:#if defined(MBEDTLS_SHA512_C)
        -:  485:static void ssl_update_checksum_sha384( mbedtls_ssl_context *, const unsigned char *, size_t );
        -:  486:static void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *, unsigned char * );
        -:  487:static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
        -:  488:#endif
        -:  489:#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
        -:  490:
    #####:  491:int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
        -:  492:{
    #####:  493:    int ret = 0;
        -:  494:    unsigned char tmp[64];
        -:  495:    unsigned char keyblk[256];
        -:  496:    unsigned char *key1;
        -:  497:    unsigned char *key2;
        -:  498:    unsigned char *mac_enc;
        -:  499:    unsigned char *mac_dec;
        -:  500:    size_t mac_key_len;
        -:  501:    size_t iv_copy_len;
        -:  502:    const mbedtls_cipher_info_t *cipher_info;
        -:  503:    const mbedtls_md_info_t *md_info;
        -:  504:
    #####:  505:    mbedtls_ssl_session *session = ssl->session_negotiate;
    #####:  506:    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    #####:  507:    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
        -:  508:
    #####:  509:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
        -:  510:
    #####:  511:    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
    #####:  512:    if( cipher_info == NULL )
        -:  513:    {
    #####:  514:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
        -:  515:                            transform->ciphersuite_info->cipher ) );
    #####:  516:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -:  517:    }
        -:  518:
    #####:  519:    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
    #####:  520:    if( md_info == NULL )
        -:  521:    {
    #####:  522:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
        -:  523:                            transform->ciphersuite_info->mac ) );
    #####:  524:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -:  525:    }
        -:  526:
        -:  527:    /*
        -:  528:     * Set appropriate PRF function and other SSL / TLS / TLS1.2 functions
        -:  529:     */
        -:  530:#if defined(MBEDTLS_SSL_PROTO_SSL3)
        -:  531:    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
        -:  532:    {
        -:  533:        handshake->tls_prf = ssl3_prf;
        -:  534:        handshake->calc_verify = ssl_calc_verify_ssl;
        -:  535:        handshake->calc_finished = ssl_calc_finished_ssl;
        -:  536:    }
        -:  537:    else
        -:  538:#endif
        -:  539:#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)
    #####:  540:    if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 )
        -:  541:    {
    #####:  542:        handshake->tls_prf = tls1_prf;
    #####:  543:        handshake->calc_verify = ssl_calc_verify_tls;
    #####:  544:        handshake->calc_finished = ssl_calc_finished_tls;
        -:  545:    }
        -:  546:    else
        -:  547:#endif
        -:  548:#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        -:  549:#if defined(MBEDTLS_SHA512_C)
    #####:  550:    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
    #####:  551:        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
        -:  552:    {
    #####:  553:        handshake->tls_prf = tls_prf_sha384;
    #####:  554:        handshake->calc_verify = ssl_calc_verify_tls_sha384;
    #####:  555:        handshake->calc_finished = ssl_calc_finished_tls_sha384;
        -:  556:    }
        -:  557:    else
        -:  558:#endif
        -:  559:#if defined(MBEDTLS_SHA256_C)
    #####:  560:    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
        -:  561:    {
    #####:  562:        handshake->tls_prf = tls_prf_sha256;
    #####:  563:        handshake->calc_verify = ssl_calc_verify_tls_sha256;
    #####:  564:        handshake->calc_finished = ssl_calc_finished_tls_sha256;
        -:  565:    }
        -:  566:    else
        -:  567:#endif
        -:  568:#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
        -:  569:    {
    #####:  570:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####:  571:        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -:  572:    }
        -:  573:
        -:  574:    /*
        -:  575:     * SSLv3:
        -:  576:     *   master =
        -:  577:     *     MD5( premaster + SHA1( 'A'   + premaster + randbytes ) ) +
        -:  578:     *     MD5( premaster + SHA1( 'BB'  + premaster + randbytes ) ) +
        -:  579:     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
        -:  580:     *
        -:  581:     * TLSv1+:
        -:  582:     *   master = PRF( premaster, "master secret", randbytes )[0..47]
        -:  583:     */
    #####:  584:    if( handshake->resume == 0 )
        -:  585:    {
    #####:  586:        MBEDTLS_SSL_DEBUG_BUF( 3, "premaster secret", handshake->premaster,
        -:  587:                       handshake->pmslen );
        -:  588:
        -:  589:#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)
        -:  590:        if( ssl->handshake->extended_ms == MBEDTLS_SSL_EXTENDED_MS_ENABLED )
        -:  591:        {
        -:  592:            unsigned char session_hash[48];
        -:  593:            size_t hash_len;
        -:  594:
        -:  595:            MBEDTLS_SSL_DEBUG_MSG( 3, ( "using extended master secret" ) );
        -:  596:
        -:  597:            ssl->handshake->calc_verify( ssl, session_hash );
        -:  598:
        -:  599:#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        -:  600:            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
        -:  601:            {
        -:  602:#if defined(MBEDTLS_SHA512_C)
        -:  603:                if( ssl->transform_negotiate->ciphersuite_info->mac ==
        -:  604:                    MBEDTLS_MD_SHA384 )
        -:  605:                {
        -:  606:                    hash_len = 48;
        -:  607:                }
        -:  608:                else
        -:  609:#endif
        -:  610:                    hash_len = 32;
        -:  611:            }
        -:  612:            else
        -:  613:#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
        -:  614:                hash_len = 36;
        -:  615:
        -:  616:            MBEDTLS_SSL_DEBUG_BUF( 3, "session hash", session_hash, hash_len );
        -:  617:
        -:  618:            ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
        -:  619:                                      "extended master secret",
        -:  620:                                      session_hash, hash_len,
        -:  621:                                      session->master, 48 );
        -:  622:            if( ret != 0 )
        -:  623:            {
        -:  624:                MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
        -:  625:                return( ret );
        -:  626:            }
        -:  627:
        -:  628:        }
        -:  629:        else
        -:  630:#endif
    #####:  631:        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
        -:  632:                                  "master secret",
    #####:  633:                                  handshake->randbytes, 64,
    #####:  634:                                  session->master, 48 );
    #####:  635:        if( ret != 0 )
        -:  636:        {
    #####:  637:            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
    #####:  638:            return( ret );
        -:  639:        }
        -:  640:
    #####:  641:        mbedtls_platform_zeroize( handshake->premaster,
        -:  642:                                  sizeof(handshake->premaster) );
        -:  643:    }
        -:  644:    else
    #####:  645:        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );
        -:  646:
        -:  647:    /*
        -:  648:     * Swap the client and server random values.
        -:  649:     */
    #####:  650:    memcpy( tmp, handshake->randbytes, 64 );
    #####:  651:    memcpy( handshake->randbytes, tmp + 32, 32 );
    #####:  652:    memcpy( handshake->randbytes + 32, tmp, 32 );
    #####:  653:    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
        -:  654:
        -:  655:    /*
        -:  656:     *  SSLv3:
        -:  657:     *    key block =
        -:  658:     *      MD5( master + SHA1( 'A'    + master + randbytes ) ) +
        -:  659:     *      MD5( master + SHA1( 'BB'   + master + randbytes ) ) +
        -:  660:     *      MD5( master + SHA1( 'CCC'  + master + randbytes ) ) +
        -:  661:     *      MD5( master + SHA1( 'DDDD' + master + randbytes ) ) +
        -:  662:     *      ...
        -:  663:     *
        -:  664:     *  TLSv1:
        -:  665:     *    key block = PRF( master, "key expansion", randbytes )
        -:  666:     */
    #####:  667:    ret = handshake->tls_prf( session->master, 48, "key expansion",
    #####:  668:                              handshake->randbytes, 64, keyblk, 256 );
    #####:  669:    if( ret != 0 )
        -:  670:    {
    #####:  671:        MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
    #####:  672:        return( ret );
        -:  673:    }
        -:  674:
    #####:  675:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite = %s",
        -:  676:                   mbedtls_ssl_get_ciphersuite_name( session->ciphersuite ) ) );
    #####:  677:    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
    #####:  678:    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
    #####:  679:    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );
        -:  680:
    #####:  681:    mbedtls_platform_zeroize( handshake->randbytes,
        -:  682:                              sizeof( handshake->randbytes ) );
        -:  683:
        -:  684:    /*
        -:  685:     * Determine the appropriate key, IV and MAC length.
        -:  686:     */
        -:  687:
    #####:  688:    transform->keylen = cipher_info->key_bitlen / 8;
        -:  689:
    #####:  690:    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
    #####:  691:        cipher_info->mode == MBEDTLS_MODE_CCM )
        -:  692:    {
    #####:  693:        transform->maclen = 0;
    #####:  694:        mac_key_len = 0;
        -:  695:
    #####:  696:        transform->ivlen = 12;
    #####:  697:        transform->fixed_ivlen = 4;
        -:  698:
        -:  699:        /* Minimum length is expicit IV + tag */
    #####:  700:        transform->minlen = transform->ivlen - transform->fixed_ivlen
    #####:  701:                            + ( transform->ciphersuite_info->flags &
    #####:  702:                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
        -:  703:    }
        -:  704:    else
        -:  705:    {
        -:  706:        /* Initialize HMAC contexts */
    #####:  707:        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
    #####:  708:            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
        -:  709:        {
    #####:  710:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
    #####:  711:            return( ret );
        -:  712:        }
        -:  713:
        -:  714:        /* Get MAC length */
    #####:  715:        mac_key_len = mbedtls_md_get_size( md_info );
    #####:  716:        transform->maclen = mac_key_len;
        -:  717:
        -:  718:#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)
        -:  719:        /*
        -:  720:         * If HMAC is to be truncated, we shall keep the leftmost bytes,
        -:  721:         * (rfc 6066 page 13 or rfc 2104 section 4),
        -:  722:         * so we only need to adjust the length here.
        -:  723:         */
        -:  724:        if( session->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )
        -:  725:        {
        -:  726:            transform->maclen = MBEDTLS_SSL_TRUNCATED_HMAC_LEN;
        -:  727:
        -:  728:#if defined(MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT)
        -:  729:            /* Fall back to old, non-compliant version of the truncated
        -:  730:             * HMAC implementation which also truncates the key
        -:  731:             * (Mbed TLS versions from 1.3 to 2.6.0) */
        -:  732:            mac_key_len = transform->maclen;
        -:  733:#endif
        -:  734:        }
        -:  735:#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */
        -:  736:
        -:  737:        /* IV length */
    #####:  738:        transform->ivlen = cipher_info->iv_size;
        -:  739:
        -:  740:        /* Minimum length */
    #####:  741:        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
    #####:  742:            transform->minlen = transform->maclen;
        -:  743:        else
        -:  744:        {
        -:  745:            /*
        -:  746:             * GenericBlockCipher:
        -:  747:             * 1. if EtM is in use: one block plus MAC
        -:  748:             *    otherwise: * first multiple of blocklen greater than maclen
        -:  749:             * 2. IV except for SSL3 and TLS 1.0
        -:  750:             */
        -:  751:#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
        -:  752:            if( session->encrypt_then_mac == MBEDTLS_SSL_ETM_ENABLED )
        -:  753:            {
        -:  754:                transform->minlen = transform->maclen
        -:  755:                                  + cipher_info->block_size;
        -:  756:            }
        -:  757:            else
        -:  758:#endif
        -:  759:            {
    #####:  760:                transform->minlen = transform->maclen
    #####:  761:                                  + cipher_info->block_size
    #####:  762:                                  - transform->maclen % cipher_info->block_size;
        -:  763:            }
        -:  764:
        -:  765:#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1)
        -:  766:            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ||
        -:  767:                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
        -:  768:                ; /* No need to adjust minlen */
        -:  769:            else
        -:  770:#endif
        -:  771:#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
    #####:  772:            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
    #####:  773:                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
        -:  774:            {
    #####:  775:                transform->minlen += transform->ivlen;
        -:  776:            }
        -:  777:            else
        -:  778:#endif
        -:  779:            {
    #####:  780:                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####:  781:                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -:  782:            }
        -:  783:        }
        -:  784:    }
        -:  785:
    #####:  786:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "keylen: %d, minlen: %d, ivlen: %d, maclen: %d",
        -:  787:                   transform->keylen, transform->minlen, transform->ivlen,
        -:  788:                   transform->maclen ) );
        -:  789:
        -:  790:    /*
        -:  791:     * Finally setup the cipher contexts, IVs and MAC secrets.
        -:  792:     */
        -:  793:#if defined(MBEDTLS_SSL_CLI_C)
    #####:  794:    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
        -:  795:    {
    #####:  796:        key1 = keyblk + mac_key_len * 2;
    #####:  797:        key2 = keyblk + mac_key_len * 2 + transform->keylen;
        -:  798:
    #####:  799:        mac_enc = keyblk;
    #####:  800:        mac_dec = keyblk + mac_key_len;
        -:  801:
        -:  802:        /*
        -:  803:         * This is not used in TLS v1.1.
        -:  804:         */
    #####:  805:        iv_copy_len = ( transform->fixed_ivlen ) ?
    #####:  806:                            transform->fixed_ivlen : transform->ivlen;
    #####:  807:        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
    #####:  808:        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
        -:  809:                iv_copy_len );
        -:  810:    }
        -:  811:    else
        -:  812:#endif /* MBEDTLS_SSL_CLI_C */
        -:  813:#if defined(MBEDTLS_SSL_SRV_C)
    #####:  814:    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        -:  815:    {
    #####:  816:        key1 = keyblk + mac_key_len * 2 + transform->keylen;
    #####:  817:        key2 = keyblk + mac_key_len * 2;
        -:  818:
    #####:  819:        mac_enc = keyblk + mac_key_len;
    #####:  820:        mac_dec = keyblk;
        -:  821:
        -:  822:        /*
        -:  823:         * This is not used in TLS v1.1.
        -:  824:         */
    #####:  825:        iv_copy_len = ( transform->fixed_ivlen ) ?
    #####:  826:                            transform->fixed_ivlen : transform->ivlen;
    #####:  827:        memcpy( transform->iv_dec, key1 + transform->keylen,  iv_copy_len );
    #####:  828:        memcpy( transform->iv_enc, key1 + transform->keylen + iv_copy_len,
        -:  829:                iv_copy_len );
        -:  830:    }
        -:  831:    else
        -:  832:#endif /* MBEDTLS_SSL_SRV_C */
        -:  833:    {
    #####:  834:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####:  835:        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -:  836:    }
        -:  837:
        -:  838:#if defined(MBEDTLS_SSL_PROTO_SSL3)
        -:  839:    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
        -:  840:    {
        -:  841:        if( mac_key_len > sizeof transform->mac_enc )
        -:  842:        {
        -:  843:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        -:  844:            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -:  845:        }
        -:  846:
        -:  847:        memcpy( transform->mac_enc, mac_enc, mac_key_len );
        -:  848:        memcpy( transform->mac_dec, mac_dec, mac_key_len );
        -:  849:    }
        -:  850:    else
        -:  851:#endif /* MBEDTLS_SSL_PROTO_SSL3 */
        -:  852:#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        -:  853:    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    #####:  854:    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
        -:  855:    {
        -:  856:        /* For HMAC-based ciphersuites, initialize the HMAC transforms.
        -:  857:           For AEAD-based ciphersuites, there is nothing to do here. */
    #####:  858:        if( mac_key_len != 0 )
        -:  859:        {
    #####:  860:            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
    #####:  861:            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
        -:  862:        }
        -:  863:    }
        -:  864:    else
        -:  865:#endif
        -:  866:    {
    #####:  867:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####:  868:        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -:  869:    }
        -:  870:
        -:  871:#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
        -:  872:    if( mbedtls_ssl_hw_record_init != NULL )
        -:  873:    {
        -:  874:        int ret = 0;
        -:  875:
        -:  876:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "going for mbedtls_ssl_hw_record_init()" ) );
        -:  877:
        -:  878:        if( ( ret = mbedtls_ssl_hw_record_init( ssl, key1, key2, transform->keylen,
        -:  879:                                        transform->iv_enc, transform->iv_dec,
        -:  880:                                        iv_copy_len,
        -:  881:                                        mac_enc, mac_dec,
        -:  882:                                        mac_key_len ) ) != 0 )
        -:  883:        {
        -:  884:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_init", ret );
        -:  885:            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        -:  886:        }
        -:  887:    }
        -:  888:#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
        -:  889:
        -:  890:#if defined(MBEDTLS_SSL_EXPORT_KEYS)
        -:  891:    if( ssl->conf->f_export_keys != NULL )
        -:  892:    {
        -:  893:        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
        -:  894:                                  session->master, keyblk,
        -:  895:                                  mac_key_len, transform->keylen,
        -:  896:                                  iv_copy_len );
        -:  897:    }
        -:  898:#endif
        -:  899:
    #####:  900:    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
        -:  901:                                 cipher_info ) ) != 0 )
        -:  902:    {
    #####:  903:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
    #####:  904:        return( ret );
        -:  905:    }
        -:  906:
    #####:  907:    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
        -:  908:                                 cipher_info ) ) != 0 )
        -:  909:    {
    #####:  910:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
    #####:  911:        return( ret );
        -:  912:    }
        -:  913:
    #####:  914:    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
    #####:  915:                               cipher_info->key_bitlen,
        -:  916:                               MBEDTLS_ENCRYPT ) ) != 0 )
        -:  917:    {
    #####:  918:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
    #####:  919:        return( ret );
        -:  920:    }
        -:  921:
    #####:  922:    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
    #####:  923:                               cipher_info->key_bitlen,
        -:  924:                               MBEDTLS_DECRYPT ) ) != 0 )
        -:  925:    {
    #####:  926:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
    #####:  927:        return( ret );
        -:  928:    }
        -:  929:
        -:  930:#if defined(MBEDTLS_CIPHER_MODE_CBC)
    #####:  931:    if( cipher_info->mode == MBEDTLS_MODE_CBC )
        -:  932:    {
    #####:  933:        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
        -:  934:                                             MBEDTLS_PADDING_NONE ) ) != 0 )
        -:  935:        {
    #####:  936:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
    #####:  937:            return( ret );
        -:  938:        }
        -:  939:
    #####:  940:        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
        -:  941:                                             MBEDTLS_PADDING_NONE ) ) != 0 )
        -:  942:        {
    #####:  943:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
    #####:  944:            return( ret );
        -:  945:        }
        -:  946:    }
        -:  947:#endif /* MBEDTLS_CIPHER_MODE_CBC */
        -:  948:
    #####:  949:    mbedtls_platform_zeroize( keyblk, sizeof( keyblk ) );
        -:  950:
        -:  951:#if defined(MBEDTLS_ZLIB_SUPPORT)
        -:  952:    // Initialize compression
        -:  953:    //
        -:  954:    if( session->compression == MBEDTLS_SSL_COMPRESS_DEFLATE )
        -:  955:    {
        -:  956:        if( ssl->compress_buf == NULL )
        -:  957:        {
        -:  958:            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Allocating compression buffer" ) );
        -:  959:            ssl->compress_buf = mbedtls_calloc( 1, MBEDTLS_SSL_BUFFER_LEN );
        -:  960:            if( ssl->compress_buf == NULL )
        -:  961:            {
        -:  962:                MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
        -:  963:                                    MBEDTLS_SSL_BUFFER_LEN ) );
        -:  964:                return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
        -:  965:            }
        -:  966:        }
        -:  967:
        -:  968:        MBEDTLS_SSL_DEBUG_MSG( 3, ( "Initializing zlib states" ) );
        -:  969:
        -:  970:        memset( &transform->ctx_deflate, 0, sizeof( transform->ctx_deflate ) );
        -:  971:        memset( &transform->ctx_inflate, 0, sizeof( transform->ctx_inflate ) );
        -:  972:
        -:  973:        if( deflateInit( &transform->ctx_deflate,
        -:  974:                         Z_DEFAULT_COMPRESSION )   != Z_OK ||
        -:  975:            inflateInit( &transform->ctx_inflate ) != Z_OK )
        -:  976:        {
        -:  977:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "Failed to initialize compression" ) );
        -:  978:            return( MBEDTLS_ERR_SSL_COMPRESSION_FAILED );
        -:  979:        }
        -:  980:    }
        -:  981:#endif /* MBEDTLS_ZLIB_SUPPORT */
        -:  982:
    #####:  983:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );
        -:  984:
    #####:  985:    return( 0 );
        -:  986:}
        -:  987:
        -:  988:#if defined(MBEDTLS_SSL_PROTO_SSL3)
        -:  989:void ssl_calc_verify_ssl( mbedtls_ssl_context *ssl, unsigned char hash[36] )
        -:  990:{
        -:  991:    mbedtls_md5_context md5;
        -:  992:    mbedtls_sha1_context sha1;
        -:  993:    unsigned char pad_1[48];
        -:  994:    unsigned char pad_2[48];
        -:  995:
        -:  996:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify ssl" ) );
        -:  997:
        -:  998:    mbedtls_md5_init( &md5 );
        -:  999:    mbedtls_sha1_init( &sha1 );
        -: 1000:
        -: 1001:    mbedtls_md5_clone( &md5, &ssl->handshake->fin_md5 );
        -: 1002:    mbedtls_sha1_clone( &sha1, &ssl->handshake->fin_sha1 );
        -: 1003:
        -: 1004:    memset( pad_1, 0x36, 48 );
        -: 1005:    memset( pad_2, 0x5C, 48 );
        -: 1006:
        -: 1007:    mbedtls_md5_update_ret( &md5, ssl->session_negotiate->master, 48 );
        -: 1008:    mbedtls_md5_update_ret( &md5, pad_1, 48 );
        -: 1009:    mbedtls_md5_finish_ret( &md5, hash );
        -: 1010:
        -: 1011:    mbedtls_md5_starts_ret( &md5 );
        -: 1012:    mbedtls_md5_update_ret( &md5, ssl->session_negotiate->master, 48 );
        -: 1013:    mbedtls_md5_update_ret( &md5, pad_2, 48 );
        -: 1014:    mbedtls_md5_update_ret( &md5, hash,  16 );
        -: 1015:    mbedtls_md5_finish_ret( &md5, hash );
        -: 1016:
        -: 1017:    mbedtls_sha1_update_ret( &sha1, ssl->session_negotiate->master, 48 );
        -: 1018:    mbedtls_sha1_update_ret( &sha1, pad_1, 40 );
        -: 1019:    mbedtls_sha1_finish_ret( &sha1, hash + 16 );
        -: 1020:
        -: 1021:    mbedtls_sha1_starts_ret( &sha1 );
        -: 1022:    mbedtls_sha1_update_ret( &sha1, ssl->session_negotiate->master, 48 );
        -: 1023:    mbedtls_sha1_update_ret( &sha1, pad_2, 40 );
        -: 1024:    mbedtls_sha1_update_ret( &sha1, hash + 16, 20 );
        -: 1025:    mbedtls_sha1_finish_ret( &sha1, hash + 16 );
        -: 1026:
        -: 1027:    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 36 );
        -: 1028:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
        -: 1029:
        -: 1030:    mbedtls_md5_free(  &md5  );
        -: 1031:    mbedtls_sha1_free( &sha1 );
        -: 1032:
        -: 1033:    return;
        -: 1034:}
        -: 1035:#endif /* MBEDTLS_SSL_PROTO_SSL3 */
        -: 1036:
        -: 1037:#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)
    #####: 1038:void ssl_calc_verify_tls( mbedtls_ssl_context *ssl, unsigned char hash[36] )
        -: 1039:{
        -: 1040:    mbedtls_md5_context md5;
        -: 1041:    mbedtls_sha1_context sha1;
        -: 1042:
    #####: 1043:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify tls" ) );
        -: 1044:
    #####: 1045:    mbedtls_md5_init( &md5 );
    #####: 1046:    mbedtls_sha1_init( &sha1 );
        -: 1047:
    #####: 1048:    mbedtls_md5_clone( &md5, &ssl->handshake->fin_md5 );
    #####: 1049:    mbedtls_sha1_clone( &sha1, &ssl->handshake->fin_sha1 );
        -: 1050:
    #####: 1051:     mbedtls_md5_finish_ret( &md5,  hash );
    #####: 1052:    mbedtls_sha1_finish_ret( &sha1, hash + 16 );
        -: 1053:
    #####: 1054:    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 36 );
    #####: 1055:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
        -: 1056:
    #####: 1057:    mbedtls_md5_free(  &md5  );
    #####: 1058:    mbedtls_sha1_free( &sha1 );
        -: 1059:
    #####: 1060:    return;
        -: 1061:}
        -: 1062:#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */
        -: 1063:
        -: 1064:#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        -: 1065:#if defined(MBEDTLS_SHA256_C)
    #####: 1066:void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
        -: 1067:{
        -: 1068:    mbedtls_sha256_context sha256;
        -: 1069:
    #####: 1070:    mbedtls_sha256_init( &sha256 );
        -: 1071:
    #####: 1072:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
        -: 1073:
    #####: 1074:    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
    #####: 1075:    mbedtls_sha256_finish_ret( &sha256, hash );
        -: 1076:
    #####: 1077:    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
    #####: 1078:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
        -: 1079:
    #####: 1080:    mbedtls_sha256_free( &sha256 );
        -: 1081:
    #####: 1082:    return;
        -: 1083:}
        -: 1084:#endif /* MBEDTLS_SHA256_C */
        -: 1085:
        -: 1086:#if defined(MBEDTLS_SHA512_C)
    #####: 1087:void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
        -: 1088:{
        -: 1089:    mbedtls_sha512_context sha512;
        -: 1090:
    #####: 1091:    mbedtls_sha512_init( &sha512 );
        -: 1092:
    #####: 1093:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );
        -: 1094:
    #####: 1095:    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
    #####: 1096:    mbedtls_sha512_finish_ret( &sha512, hash );
        -: 1097:
    #####: 1098:    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
    #####: 1099:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
        -: 1100:
    #####: 1101:    mbedtls_sha512_free( &sha512 );
        -: 1102:
    #####: 1103:    return;
        -: 1104:}
        -: 1105:#endif /* MBEDTLS_SHA512_C */
        -: 1106:#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
        -: 1107:
        -: 1108:#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    #####: 1109:int mbedtls_ssl_psk_derive_premaster( mbedtls_ssl_context *ssl, mbedtls_key_exchange_type_t key_ex )
        -: 1110:{
    #####: 1111:    unsigned char *p = ssl->handshake->premaster;
    #####: 1112:    unsigned char *end = p + sizeof( ssl->handshake->premaster );
    #####: 1113:    const unsigned char *psk = ssl->conf->psk;
    #####: 1114:    size_t psk_len = ssl->conf->psk_len;
        -: 1115:
        -: 1116:    /* If the psk callback was called, use its result */
    #####: 1117:    if( ssl->handshake->psk != NULL )
        -: 1118:    {
    #####: 1119:        psk = ssl->handshake->psk;
    #####: 1120:        psk_len = ssl->handshake->psk_len;
        -: 1121:    }
        -: 1122:
        -: 1123:    /*
        -: 1124:     * PMS = struct {
        -: 1125:     *     opaque other_secret<0..2^16-1>;
        -: 1126:     *     opaque psk<0..2^16-1>;
        -: 1127:     * };
        -: 1128:     * with "other_secret" depending on the particular key exchange
        -: 1129:     */
        -: 1130:#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
    #####: 1131:    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
        -: 1132:    {
    #####: 1133:        if( end - p < 2 )
    #####: 1134:            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 1135:
    #####: 1136:        *(p++) = (unsigned char)( psk_len >> 8 );
    #####: 1137:        *(p++) = (unsigned char)( psk_len      );
        -: 1138:
    #####: 1139:        if( end < p || (size_t)( end - p ) < psk_len )
    #####: 1140:            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 1141:
    #####: 1142:        memset( p, 0, psk_len );
    #####: 1143:        p += psk_len;
        -: 1144:    }
        -: 1145:    else
        -: 1146:#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */
        -: 1147:#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
        -: 1148:    if( key_ex == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
        -: 1149:    {
        -: 1150:        /*
        -: 1151:         * other_secret already set by the ClientKeyExchange message,
        -: 1152:         * and is 48 bytes long
        -: 1153:         */
        -: 1154:        *p++ = 0;
        -: 1155:        *p++ = 48;
        -: 1156:        p += 48;
        -: 1157:    }
        -: 1158:    else
        -: 1159:#endif /* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */
        -: 1160:#if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)
        -: 1161:    if( key_ex == MBEDTLS_KEY_EXCHANGE_DHE_PSK )
        -: 1162:    {
        -: 1163:        int ret;
        -: 1164:        size_t len;
        -: 1165:
        -: 1166:        /* Write length only when we know the actual value */
        -: 1167:        if( ( ret = mbedtls_dhm_calc_secret( &ssl->handshake->dhm_ctx,
        -: 1168:                                      p + 2, end - ( p + 2 ), &len,
        -: 1169:                                      ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
        -: 1170:        {
        -: 1171:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_dhm_calc_secret", ret );
        -: 1172:            return( ret );
        -: 1173:        }
        -: 1174:        *(p++) = (unsigned char)( len >> 8 );
        -: 1175:        *(p++) = (unsigned char)( len );
        -: 1176:        p += len;
        -: 1177:
        -: 1178:        MBEDTLS_SSL_DEBUG_MPI( 3, "DHM: K ", &ssl->handshake->dhm_ctx.K  );
        -: 1179:    }
        -: 1180:    else
        -: 1181:#endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
        -: 1182:#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)
        -: 1183:    if( key_ex == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )
        -: 1184:    {
        -: 1185:        int ret;
        -: 1186:        size_t zlen;
        -: 1187:
        -: 1188:        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx, &zlen,
        -: 1189:                                       p + 2, end - ( p + 2 ),
        -: 1190:                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
        -: 1191:        {
        -: 1192:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_calc_secret", ret );
        -: 1193:            return( ret );
        -: 1194:        }
        -: 1195:
        -: 1196:        *(p++) = (unsigned char)( zlen >> 8 );
        -: 1197:        *(p++) = (unsigned char)( zlen      );
        -: 1198:        p += zlen;
        -: 1199:
        -: 1200:        MBEDTLS_SSL_DEBUG_MPI( 3, "ECDH: z", &ssl->handshake->ecdh_ctx.z );
        -: 1201:    }
        -: 1202:    else
        -: 1203:#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
        -: 1204:    {
    #####: 1205:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 1206:        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 1207:    }
        -: 1208:
        -: 1209:    /* opaque psk<0..2^16-1>; */
    #####: 1210:    if( end - p < 2 )
    #####: 1211:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 1212:
    #####: 1213:    *(p++) = (unsigned char)( psk_len >> 8 );
    #####: 1214:    *(p++) = (unsigned char)( psk_len      );
        -: 1215:
    #####: 1216:    if( end < p || (size_t)( end - p ) < psk_len )
    #####: 1217:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 1218:
    #####: 1219:    memcpy( p, psk, psk_len );
    #####: 1220:    p += psk_len;
        -: 1221:
    #####: 1222:    ssl->handshake->pmslen = p - ssl->handshake->premaster;
        -: 1223:
    #####: 1224:    return( 0 );
        -: 1225:}
        -: 1226:#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
        -: 1227:
        -: 1228:#if defined(MBEDTLS_SSL_PROTO_SSL3)
        -: 1229:/*
        -: 1230: * SSLv3.0 MAC functions
        -: 1231: */
        -: 1232:#define SSL_MAC_MAX_BYTES   20  /* MD-5 or SHA-1 */
        -: 1233:static void ssl_mac( mbedtls_md_context_t *md_ctx,
        -: 1234:                     const unsigned char *secret,
        -: 1235:                     const unsigned char *buf, size_t len,
        -: 1236:                     const unsigned char *ctr, int type,
        -: 1237:                     unsigned char out[SSL_MAC_MAX_BYTES] )
        -: 1238:{
        -: 1239:    unsigned char header[11];
        -: 1240:    unsigned char padding[48];
        -: 1241:    int padlen;
        -: 1242:    int md_size = mbedtls_md_get_size( md_ctx->md_info );
        -: 1243:    int md_type = mbedtls_md_get_type( md_ctx->md_info );
        -: 1244:
        -: 1245:    /* Only MD5 and SHA-1 supported */
        -: 1246:    if( md_type == MBEDTLS_MD_MD5 )
        -: 1247:        padlen = 48;
        -: 1248:    else
        -: 1249:        padlen = 40;
        -: 1250:
        -: 1251:    memcpy( header, ctr, 8 );
        -: 1252:    header[ 8] = (unsigned char)  type;
        -: 1253:    header[ 9] = (unsigned char)( len >> 8 );
        -: 1254:    header[10] = (unsigned char)( len      );
        -: 1255:
        -: 1256:    memset( padding, 0x36, padlen );
        -: 1257:    mbedtls_md_starts( md_ctx );
        -: 1258:    mbedtls_md_update( md_ctx, secret,  md_size );
        -: 1259:    mbedtls_md_update( md_ctx, padding, padlen  );
        -: 1260:    mbedtls_md_update( md_ctx, header,  11      );
        -: 1261:    mbedtls_md_update( md_ctx, buf,     len     );
        -: 1262:    mbedtls_md_finish( md_ctx, out              );
        -: 1263:
        -: 1264:    memset( padding, 0x5C, padlen );
        -: 1265:    mbedtls_md_starts( md_ctx );
        -: 1266:    mbedtls_md_update( md_ctx, secret,    md_size );
        -: 1267:    mbedtls_md_update( md_ctx, padding,   padlen  );
        -: 1268:    mbedtls_md_update( md_ctx, out,       md_size );
        -: 1269:    mbedtls_md_finish( md_ctx, out                );
        -: 1270:}
        -: 1271:#endif /* MBEDTLS_SSL_PROTO_SSL3 */
        -: 1272:
        -: 1273:#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER) ||     \
        -: 1274:    ( defined(MBEDTLS_CIPHER_MODE_CBC) &&                                  \
        -: 1275:      ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) || defined(MBEDTLS_ARIA_C)) )
        -: 1276:#define SSL_SOME_MODES_USE_MAC
        -: 1277:#endif
        -: 1278:
        -: 1279:/*
        -: 1280: * Encryption/decryption functions
        -: 1281: */
    #####: 1282:static int ssl_encrypt_buf( mbedtls_ssl_context *ssl )
        -: 1283:{
        -: 1284:    mbedtls_cipher_mode_t mode;
    #####: 1285:    int auth_done = 0;
        -: 1286:
    #####: 1287:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );
        -: 1288:
    #####: 1289:    if( ssl->session_out == NULL || ssl->transform_out == NULL )
        -: 1290:    {
    #####: 1291:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 1292:        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 1293:    }
        -: 1294:
    #####: 1295:    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );
        -: 1296:
    #####: 1297:    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
        -: 1298:                      ssl->out_msg, ssl->out_msglen );
        -: 1299:
    #####: 1300:    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
        -: 1301:    {
    #####: 1302:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
        -: 1303:                                    (unsigned) ssl->out_msglen,
        -: 1304:                                    MBEDTLS_SSL_MAX_CONTENT_LEN ) );
    #####: 1305:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 1306:    }
        -: 1307:
        -: 1308:    /*
        -: 1309:     * Add MAC before if needed
        -: 1310:     */
        -: 1311:#if defined(SSL_SOME_MODES_USE_MAC)
    #####: 1312:    if( mode == MBEDTLS_MODE_STREAM ||
        -: 1313:        ( mode == MBEDTLS_MODE_CBC
        -: 1314:#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
        -: 1315:          && ssl->session_out->encrypt_then_mac == MBEDTLS_SSL_ETM_DISABLED
        -: 1316:#endif
        -: 1317:        ) )
        -: 1318:    {
        -: 1319:#if defined(MBEDTLS_SSL_PROTO_SSL3)
        -: 1320:        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
        -: 1321:        {
        -: 1322:            unsigned char mac[SSL_MAC_MAX_BYTES];
        -: 1323:
        -: 1324:            ssl_mac( &ssl->transform_out->md_ctx_enc,
        -: 1325:                      ssl->transform_out->mac_enc,
        -: 1326:                      ssl->out_msg, ssl->out_msglen,
        -: 1327:                      ssl->out_ctr, ssl->out_msgtype,
        -: 1328:                      mac );
        -: 1329:
        -: 1330:            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
        -: 1331:        }
        -: 1332:        else
        -: 1333:#endif
        -: 1334:#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        -: 1335:        defined(MBEDTLS_SSL_PROTO_TLS1_2)
    #####: 1336:        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
        -: 1337:        {
        -: 1338:            unsigned char mac[MBEDTLS_SSL_MAC_ADD];
        -: 1339:
    #####: 1340:            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
    #####: 1341:            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
    #####: 1342:            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
    #####: 1343:            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
    #####: 1344:                             ssl->out_msg, ssl->out_msglen );
    #####: 1345:            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
    #####: 1346:            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
        -: 1347:
    #####: 1348:            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
        -: 1349:        }
        -: 1350:        else
        -: 1351:#endif
        -: 1352:        {
    #####: 1353:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 1354:            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 1355:        }
        -: 1356:
    #####: 1357:        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
        -: 1358:                       ssl->out_msg + ssl->out_msglen,
        -: 1359:                       ssl->transform_out->maclen );
        -: 1360:
    #####: 1361:        ssl->out_msglen += ssl->transform_out->maclen;
    #####: 1362:        auth_done++;
        -: 1363:    }
        -: 1364:#endif /* AEAD not the only option */
        -: 1365:
        -: 1366:    /*
        -: 1367:     * Encrypt
        -: 1368:     */
        -: 1369:#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER)
        -: 1370:    if( mode == MBEDTLS_MODE_STREAM )
        -: 1371:    {
        -: 1372:        int ret;
        -: 1373:        size_t olen = 0;
        -: 1374:
        -: 1375:        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
        -: 1376:                            "including %d bytes of padding",
        -: 1377:                       ssl->out_msglen, 0 ) );
        -: 1378:
        -: 1379:        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
        -: 1380:                                   ssl->transform_out->iv_enc,
        -: 1381:                                   ssl->transform_out->ivlen,
        -: 1382:                                   ssl->out_msg, ssl->out_msglen,
        -: 1383:                                   ssl->out_msg, &olen ) ) != 0 )
        -: 1384:        {
        -: 1385:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
        -: 1386:            return( ret );
        -: 1387:        }
        -: 1388:
        -: 1389:        if( ssl->out_msglen != olen )
        -: 1390:        {
        -: 1391:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        -: 1392:            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 1393:        }
        -: 1394:    }
        -: 1395:    else
        -: 1396:#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
        -: 1397:#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
        -: 1398:    if( mode == MBEDTLS_MODE_GCM ||
        -: 1399:        mode == MBEDTLS_MODE_CCM )
        -: 1400:    {
        -: 1401:        int ret;
        -: 1402:        size_t enc_msglen, olen;
        -: 1403:        unsigned char *enc_msg;
        -: 1404:        unsigned char add_data[13];
        -: 1405:        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
        -: 1406:                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        -: 1407:
        -: 1408:        memcpy( add_data, ssl->out_ctr, 8 );
        -: 1409:        add_data[8]  = ssl->out_msgtype;
        -: 1410:        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
        -: 1411:                           ssl->conf->transport, add_data + 9 );
        -: 1412:        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
        -: 1413:        add_data[12] = ssl->out_msglen & 0xFF;
        -: 1414:
        -: 1415:        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
        -: 1416:                       add_data, 13 );
        -: 1417:
        -: 1418:        /*
        -: 1419:         * Generate IV
        -: 1420:         */
        -: 1421:        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
        -: 1422:        {
        -: 1423:            /* Reminder if we ever add an AEAD mode with a different size */
        -: 1424:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        -: 1425:            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 1426:        }
        -: 1427:
        -: 1428:        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
        -: 1429:                             ssl->out_ctr, 8 );
        -: 1430:        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
        -: 1431:
        -: 1432:        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->out_iv,
        -: 1433:                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );
        -: 1434:
        -: 1435:        /*
        -: 1436:         * Fix pointer positions and message length with added IV
        -: 1437:         */
        -: 1438:        enc_msg = ssl->out_msg;
        -: 1439:        enc_msglen = ssl->out_msglen;
        -: 1440:        ssl->out_msglen += ssl->transform_out->ivlen -
        -: 1441:                           ssl->transform_out->fixed_ivlen;
        -: 1442:
        -: 1443:        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
        -: 1444:                            "including %d bytes of padding",
        -: 1445:                       ssl->out_msglen, 0 ) );
        -: 1446:
        -: 1447:        /*
        -: 1448:         * Encrypt and authenticate
        -: 1449:         */
        -: 1450:        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
        -: 1451:                                         ssl->transform_out->iv_enc,
        -: 1452:                                         ssl->transform_out->ivlen,
        -: 1453:                                         add_data, 13,
        -: 1454:                                         enc_msg, enc_msglen,
        -: 1455:                                         enc_msg, &olen,
        -: 1456:                                         enc_msg + enc_msglen, taglen ) ) != 0 )
        -: 1457:        {
        -: 1458:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
        -: 1459:            return( ret );
        -: 1460:        }
        -: 1461:
        -: 1462:        if( olen != enc_msglen )
        -: 1463:        {
        -: 1464:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        -: 1465:            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 1466:        }
        -: 1467:
        -: 1468:        ssl->out_msglen += taglen;
        -: 1469:        auth_done++;
        -: 1470:
        -: 1471:        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
        -: 1472:    }
        -: 1473:    else
        -: 1474:#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
        -: 1475:#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
        -: 1476:    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) || defined(MBEDTLS_ARIA_C) )
    #####: 1477:    if( mode == MBEDTLS_MODE_CBC )
        -: 1478:    {
        -: 1479:        int ret;
        -: 1480:        unsigned char *enc_msg;
    #####: 1481:        size_t enc_msglen, padlen, olen = 0, i;
        -: 1482:
    #####: 1483:        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
    #####: 1484:                 ssl->transform_out->ivlen;
    #####: 1485:        if( padlen == ssl->transform_out->ivlen )
    #####: 1486:            padlen = 0;
        -: 1487:
    #####: 1488:        for( i = 0; i <= padlen; i++ )
    #####: 1489:            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
        -: 1490:
    #####: 1491:        ssl->out_msglen += padlen + 1;
        -: 1492:
    #####: 1493:        enc_msglen = ssl->out_msglen;
    #####: 1494:        enc_msg = ssl->out_msg;
        -: 1495:
        -: 1496:#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        -: 1497:        /*
        -: 1498:         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
        -: 1499:         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
        -: 1500:         */
    #####: 1501:        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        -: 1502:        {
        -: 1503:            /*
        -: 1504:             * Generate IV
        -: 1505:             */
    #####: 1506:            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
    #####: 1507:                                  ssl->transform_out->ivlen );
    #####: 1508:            if( ret != 0 )
    #####: 1509:                return( ret );
        -: 1510:
    #####: 1511:            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
    #####: 1512:                    ssl->transform_out->ivlen );
        -: 1513:
        -: 1514:            /*
        -: 1515:             * Fix pointer positions and message length with added IV
        -: 1516:             */
    #####: 1517:            enc_msg = ssl->out_msg;
    #####: 1518:            enc_msglen = ssl->out_msglen;
    #####: 1519:            ssl->out_msglen += ssl->transform_out->ivlen;
        -: 1520:        }
        -: 1521:#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */
        -: 1522:
    #####: 1523:        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
        -: 1524:                            "including %d bytes of IV and %d bytes of padding",
        -: 1525:                            ssl->out_msglen, ssl->transform_out->ivlen,
        -: 1526:                            padlen + 1 ) );
        -: 1527:
    #####: 1528:        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
    #####: 1529:                                   ssl->transform_out->iv_enc,
    #####: 1530:                                   ssl->transform_out->ivlen,
        -: 1531:                                   enc_msg, enc_msglen,
        -: 1532:                                   enc_msg, &olen ) ) != 0 )
        -: 1533:        {
    #####: 1534:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
    #####: 1535:            return( ret );
        -: 1536:        }
        -: 1537:
    #####: 1538:        if( enc_msglen != olen )
        -: 1539:        {
    #####: 1540:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 1541:            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 1542:        }
        -: 1543:
        -: 1544:#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1)
        -: 1545:        if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_2 )
        -: 1546:        {
        -: 1547:            /*
        -: 1548:             * Save IV in SSL3 and TLS1
        -: 1549:             */
        -: 1550:            memcpy( ssl->transform_out->iv_enc,
        -: 1551:                    ssl->transform_out->cipher_ctx_enc.iv,
        -: 1552:                    ssl->transform_out->ivlen );
        -: 1553:        }
        -: 1554:#endif
        -: 1555:
        -: 1556:#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
        -: 1557:        if( auth_done == 0 )
        -: 1558:        {
        -: 1559:            /*
        -: 1560:             * MAC(MAC_write_key, seq_num +
        -: 1561:             *     TLSCipherText.type +
        -: 1562:             *     TLSCipherText.version +
        -: 1563:             *     length_of( (IV +) ENC(...) ) +
        -: 1564:             *     IV + // except for TLS 1.0
        -: 1565:             *     ENC(content + padding + padding_length));
        -: 1566:             */
        -: 1567:            unsigned char pseudo_hdr[13];
        -: 1568:
        -: 1569:            MBEDTLS_SSL_DEBUG_MSG( 3, ( "using encrypt then mac" ) );
        -: 1570:
        -: 1571:            memcpy( pseudo_hdr +  0, ssl->out_ctr, 8 );
        -: 1572:            memcpy( pseudo_hdr +  8, ssl->out_hdr, 3 );
        -: 1573:            pseudo_hdr[11] = (unsigned char)( ( ssl->out_msglen >> 8 ) & 0xFF );
        -: 1574:            pseudo_hdr[12] = (unsigned char)( ( ssl->out_msglen      ) & 0xFF );
        -: 1575:
        -: 1576:            MBEDTLS_SSL_DEBUG_BUF( 4, "MAC'd meta-data", pseudo_hdr, 13 );
        -: 1577:
        -: 1578:            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, pseudo_hdr, 13 );
        -: 1579:            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
        -: 1580:                             ssl->out_iv, ssl->out_msglen );
        -: 1581:            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc,
        -: 1582:                             ssl->out_iv + ssl->out_msglen );
        -: 1583:            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
        -: 1584:
        -: 1585:            ssl->out_msglen += ssl->transform_out->maclen;
        -: 1586:            auth_done++;
        -: 1587:        }
        -: 1588:#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */
        -: 1589:    }
        -: 1590:    else
        -: 1591:#endif /* MBEDTLS_CIPHER_MODE_CBC &&
        -: 1592:          ( MBEDTLS_AES_C || MBEDTLS_CAMELLIA_C || MBEDTLS_ARIA_C ) */
        -: 1593:    {
    #####: 1594:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 1595:        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 1596:    }
        -: 1597:
        -: 1598:    /* Make extra sure authentication was performed, exactly once */
    #####: 1599:    if( auth_done != 1 )
        -: 1600:    {
    #####: 1601:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 1602:        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 1603:    }
        -: 1604:
    #####: 1605:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= encrypt buf" ) );
        -: 1606:
    #####: 1607:    return( 0 );
        -: 1608:}
        -: 1609:
    #####: 1610:static int ssl_decrypt_buf( mbedtls_ssl_context *ssl )
        -: 1611:{
        -: 1612:    size_t i;
        -: 1613:    mbedtls_cipher_mode_t mode;
    #####: 1614:    int auth_done = 0;
        -: 1615:#if defined(SSL_SOME_MODES_USE_MAC)
    #####: 1616:    size_t padlen = 0, correct = 1;
        -: 1617:#endif
        -: 1618:
    #####: 1619:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );
        -: 1620:
    #####: 1621:    if( ssl->session_in == NULL || ssl->transform_in == NULL )
        -: 1622:    {
    #####: 1623:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 1624:        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 1625:    }
        -: 1626:
    #####: 1627:    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );
        -: 1628:
    #####: 1629:    if( ssl->in_msglen < ssl->transform_in->minlen )
        -: 1630:    {
    #####: 1631:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "in_msglen (%d) < minlen (%d)",
        -: 1632:                       ssl->in_msglen, ssl->transform_in->minlen ) );
    #####: 1633:        return( MBEDTLS_ERR_SSL_INVALID_MAC );
        -: 1634:    }
        -: 1635:
        -: 1636:#if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER)
        -: 1637:    if( mode == MBEDTLS_MODE_STREAM )
        -: 1638:    {
        -: 1639:        int ret;
        -: 1640:        size_t olen = 0;
        -: 1641:
        -: 1642:        padlen = 0;
        -: 1643:
        -: 1644:        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
        -: 1645:                                   ssl->transform_in->iv_dec,
        -: 1646:                                   ssl->transform_in->ivlen,
        -: 1647:                                   ssl->in_msg, ssl->in_msglen,
        -: 1648:                                   ssl->in_msg, &olen ) ) != 0 )
        -: 1649:        {
        -: 1650:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
        -: 1651:            return( ret );
        -: 1652:        }
        -: 1653:
        -: 1654:        if( ssl->in_msglen != olen )
        -: 1655:        {
        -: 1656:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        -: 1657:            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 1658:        }
        -: 1659:    }
        -: 1660:    else
        -: 1661:#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
        -: 1662:#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
        -: 1663:    if( mode == MBEDTLS_MODE_GCM ||
        -: 1664:        mode == MBEDTLS_MODE_CCM )
        -: 1665:    {
        -: 1666:        int ret;
        -: 1667:        size_t dec_msglen, olen;
        -: 1668:        unsigned char *dec_msg;
        -: 1669:        unsigned char *dec_msg_result;
        -: 1670:        unsigned char add_data[13];
        -: 1671:        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
        -: 1672:                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        -: 1673:        size_t explicit_iv_len = ssl->transform_in->ivlen -
        -: 1674:                                 ssl->transform_in->fixed_ivlen;
        -: 1675:
        -: 1676:        if( ssl->in_msglen < explicit_iv_len + taglen )
        -: 1677:        {
        -: 1678:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
        -: 1679:                                "+ taglen (%d)", ssl->in_msglen,
        -: 1680:                                explicit_iv_len, taglen ) );
        -: 1681:            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        -: 1682:        }
        -: 1683:        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
        -: 1684:
        -: 1685:        dec_msg = ssl->in_msg;
        -: 1686:        dec_msg_result = ssl->in_msg;
        -: 1687:        ssl->in_msglen = dec_msglen;
        -: 1688:
        -: 1689:        memcpy( add_data, ssl->in_ctr, 8 );
        -: 1690:        add_data[8]  = ssl->in_msgtype;
        -: 1691:        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
        -: 1692:                           ssl->conf->transport, add_data + 9 );
        -: 1693:        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
        -: 1694:        add_data[12] = ssl->in_msglen & 0xFF;
        -: 1695:
        -: 1696:        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
        -: 1697:                       add_data, 13 );
        -: 1698:
        -: 1699:        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
        -: 1700:                ssl->in_iv,
        -: 1701:                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
        -: 1702:
        -: 1703:        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->transform_in->iv_dec,
        -: 1704:                                     ssl->transform_in->ivlen );
        -: 1705:        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );
        -: 1706:
        -: 1707:        /*
        -: 1708:         * Decrypt and authenticate
        -: 1709:         */
        -: 1710:        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
        -: 1711:                                         ssl->transform_in->iv_dec,
        -: 1712:                                         ssl->transform_in->ivlen,
        -: 1713:                                         add_data, 13,
        -: 1714:                                         dec_msg, dec_msglen,
        -: 1715:                                         dec_msg_result, &olen,
        -: 1716:                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        -: 1717:        {
        -: 1718:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );
        -: 1719:
        -: 1720:            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
        -: 1721:                return( MBEDTLS_ERR_SSL_INVALID_MAC );
        -: 1722:
        -: 1723:            return( ret );
        -: 1724:        }
        -: 1725:        auth_done++;
        -: 1726:
        -: 1727:        if( olen != dec_msglen )
        -: 1728:        {
        -: 1729:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        -: 1730:            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 1731:        }
        -: 1732:    }
        -: 1733:    else
        -: 1734:#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
        -: 1735:#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
        -: 1736:    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) || defined(MBEDTLS_ARIA_C) )
    #####: 1737:    if( mode == MBEDTLS_MODE_CBC )
        -: 1738:    {
        -: 1739:        /*
        -: 1740:         * Decrypt and check the padding
        -: 1741:         */
        -: 1742:        int ret;
        -: 1743:        unsigned char *dec_msg;
        -: 1744:        unsigned char *dec_msg_result;
        -: 1745:        size_t dec_msglen;
    #####: 1746:        size_t minlen = 0;
    #####: 1747:        size_t olen = 0;
        -: 1748:
        -: 1749:        /*
        -: 1750:         * Check immediate ciphertext sanity
        -: 1751:         */
        -: 1752:#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
    #####: 1753:        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    #####: 1754:            minlen += ssl->transform_in->ivlen;
        -: 1755:#endif
        -: 1756:
    #####: 1757:        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
    #####: 1758:            ssl->in_msglen < minlen + ssl->transform_in->maclen + 1 )
        -: 1759:        {
    #####: 1760:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
        -: 1761:                                "+ 1 ) ( + expl IV )", ssl->in_msglen,
        -: 1762:                                ssl->transform_in->ivlen,
        -: 1763:                                ssl->transform_in->maclen ) );
    #####: 1764:            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        -: 1765:        }
        -: 1766:
    #####: 1767:        dec_msglen = ssl->in_msglen;
    #####: 1768:        dec_msg = ssl->in_msg;
    #####: 1769:        dec_msg_result = ssl->in_msg;
        -: 1770:
        -: 1771:        /*
        -: 1772:         * Authenticate before decrypt if enabled
        -: 1773:         */
        -: 1774:#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
        -: 1775:        if( ssl->session_in->encrypt_then_mac == MBEDTLS_SSL_ETM_ENABLED )
        -: 1776:        {
        -: 1777:            unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];
        -: 1778:            unsigned char pseudo_hdr[13];
        -: 1779:
        -: 1780:            MBEDTLS_SSL_DEBUG_MSG( 3, ( "using encrypt then mac" ) );
        -: 1781:
        -: 1782:            dec_msglen -= ssl->transform_in->maclen;
        -: 1783:            ssl->in_msglen -= ssl->transform_in->maclen;
        -: 1784:
        -: 1785:            memcpy( pseudo_hdr +  0, ssl->in_ctr, 8 );
        -: 1786:            memcpy( pseudo_hdr +  8, ssl->in_hdr, 3 );
        -: 1787:            pseudo_hdr[11] = (unsigned char)( ( ssl->in_msglen >> 8 ) & 0xFF );
        -: 1788:            pseudo_hdr[12] = (unsigned char)( ( ssl->in_msglen      ) & 0xFF );
        -: 1789:
        -: 1790:            MBEDTLS_SSL_DEBUG_BUF( 4, "MAC'd meta-data", pseudo_hdr, 13 );
        -: 1791:
        -: 1792:            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, pseudo_hdr, 13 );
        -: 1793:            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec,
        -: 1794:                             ssl->in_iv, ssl->in_msglen );
        -: 1795:            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
        -: 1796:            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
        -: 1797:
        -: 1798:            MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_iv + ssl->in_msglen,
        -: 1799:                                              ssl->transform_in->maclen );
        -: 1800:            MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect,
        -: 1801:                                              ssl->transform_in->maclen );
        -: 1802:
        -: 1803:            if( mbedtls_ssl_safer_memcmp( ssl->in_iv + ssl->in_msglen, mac_expect,
        -: 1804:                                          ssl->transform_in->maclen ) != 0 )
        -: 1805:            {
        -: 1806:                MBEDTLS_SSL_DEBUG_MSG( 1, ( "message mac does not match" ) );
        -: 1807:
        -: 1808:                return( MBEDTLS_ERR_SSL_INVALID_MAC );
        -: 1809:            }
        -: 1810:            auth_done++;
        -: 1811:        }
        -: 1812:#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */
        -: 1813:
        -: 1814:        /*
        -: 1815:         * Check length sanity
        -: 1816:         */
    #####: 1817:        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
        -: 1818:        {
    #####: 1819:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
        -: 1820:                           ssl->in_msglen, ssl->transform_in->ivlen ) );
    #####: 1821:            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        -: 1822:        }
        -: 1823:
        -: 1824:#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        -: 1825:        /*
        -: 1826:         * Initialize for prepended IV for block cipher in TLS v1.1 and up
        -: 1827:         */
    #####: 1828:        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        -: 1829:        {
    #####: 1830:            dec_msglen -= ssl->transform_in->ivlen;
    #####: 1831:            ssl->in_msglen -= ssl->transform_in->ivlen;
        -: 1832:
    #####: 1833:            for( i = 0; i < ssl->transform_in->ivlen; i++ )
    #####: 1834:                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
        -: 1835:        }
        -: 1836:#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */
        -: 1837:
    #####: 1838:        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
    #####: 1839:                                   ssl->transform_in->iv_dec,
    #####: 1840:                                   ssl->transform_in->ivlen,
        -: 1841:                                   dec_msg, dec_msglen,
        -: 1842:                                   dec_msg_result, &olen ) ) != 0 )
        -: 1843:        {
    #####: 1844:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
    #####: 1845:            return( ret );
        -: 1846:        }
        -: 1847:
    #####: 1848:        if( dec_msglen != olen )
        -: 1849:        {
    #####: 1850:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 1851:            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 1852:        }
        -: 1853:
        -: 1854:#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1)
        -: 1855:        if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_2 )
        -: 1856:        {
        -: 1857:            /*
        -: 1858:             * Save IV in SSL3 and TLS1
        -: 1859:             */
        -: 1860:            memcpy( ssl->transform_in->iv_dec,
        -: 1861:                    ssl->transform_in->cipher_ctx_dec.iv,
        -: 1862:                    ssl->transform_in->ivlen );
        -: 1863:        }
        -: 1864:#endif
        -: 1865:
    #####: 1866:        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
        -: 1867:
    #####: 1868:        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
        -: 1869:            auth_done == 0 )
        -: 1870:        {
        -: 1871:#if defined(MBEDTLS_SSL_DEBUG_ALL)
        -: 1872:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
        -: 1873:                        ssl->in_msglen, ssl->transform_in->maclen, padlen ) );
        -: 1874:#endif
    #####: 1875:            padlen = 0;
    #####: 1876:            correct = 0;
        -: 1877:        }
        -: 1878:
        -: 1879:#if defined(MBEDTLS_SSL_PROTO_SSL3)
        -: 1880:        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
        -: 1881:        {
        -: 1882:            if( padlen > ssl->transform_in->ivlen )
        -: 1883:            {
        -: 1884:#if defined(MBEDTLS_SSL_DEBUG_ALL)
        -: 1885:                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding length: is %d, "
        -: 1886:                                    "should be no more than %d",
        -: 1887:                               padlen, ssl->transform_in->ivlen ) );
        -: 1888:#endif
        -: 1889:                correct = 0;
        -: 1890:            }
        -: 1891:        }
        -: 1892:        else
        -: 1893:#endif /* MBEDTLS_SSL_PROTO_SSL3 */
        -: 1894:#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        -: 1895:    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    #####: 1896:        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
        -: 1897:        {
        -: 1898:            /*
        -: 1899:             * TLSv1+: always check the padding up to the first failure
        -: 1900:             * and fake check up to 256 bytes of padding
        -: 1901:             */
    #####: 1902:            size_t pad_count = 0, real_count = 1;
    #####: 1903:            size_t padding_idx = ssl->in_msglen - padlen - 1;
        -: 1904:
        -: 1905:            /*
        -: 1906:             * Padding is guaranteed to be incorrect if:
        -: 1907:             *   1. padlen >= ssl->in_msglen
        -: 1908:             *
        -: 1909:             *   2. padding_idx >= MBEDTLS_SSL_MAX_CONTENT_LEN +
        -: 1910:             *                     ssl->transform_in->maclen
        -: 1911:             *
        -: 1912:             * In both cases we reset padding_idx to a safe value (0) to
        -: 1913:             * prevent out-of-buffer reads.
        -: 1914:             */
    #####: 1915:            correct &= ( ssl->in_msglen >= padlen + 1 );
    #####: 1916:            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
    #####: 1917:                                       ssl->transform_in->maclen );
        -: 1918:
    #####: 1919:            padding_idx *= correct;
        -: 1920:
    #####: 1921:            for( i = 1; i <= 256; i++ )
        -: 1922:            {
    #####: 1923:                real_count &= ( i <= padlen );
    #####: 1924:                pad_count += real_count *
    #####: 1925:                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
        -: 1926:            }
        -: 1927:
    #####: 1928:            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
        -: 1929:
        -: 1930:#if defined(MBEDTLS_SSL_DEBUG_ALL)
        -: 1931:            if( padlen > 0 && correct == 0 )
        -: 1932:                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
        -: 1933:#endif
    #####: 1934:            padlen &= correct * 0x1FF;
        -: 1935:        }
        -: 1936:        else
        -: 1937:#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
        -: 1938:          MBEDTLS_SSL_PROTO_TLS1_2 */
        -: 1939:        {
    #####: 1940:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 1941:            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 1942:        }
        -: 1943:
    #####: 1944:        ssl->in_msglen -= padlen;
        -: 1945:    }
        -: 1946:    else
        -: 1947:#endif /* MBEDTLS_CIPHER_MODE_CBC &&
        -: 1948:          ( MBEDTLS_AES_C || MBEDTLS_CAMELLIA_C || MBEDTLS_ARIA_C ) */
        -: 1949:    {
    #####: 1950:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 1951:        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 1952:    }
        -: 1953:
    #####: 1954:    MBEDTLS_SSL_DEBUG_BUF( 4, "raw buffer after decryption",
        -: 1955:                   ssl->in_msg, ssl->in_msglen );
        -: 1956:
        -: 1957:    /*
        -: 1958:     * Authenticate if not done yet.
        -: 1959:     * Compute the MAC regardless of the padding result (RFC4346, CBCTIME).
        -: 1960:     */
        -: 1961:#if defined(SSL_SOME_MODES_USE_MAC)
    #####: 1962:    if( auth_done == 0 )
        -: 1963:    {
        -: 1964:        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];
        -: 1965:
    #####: 1966:        ssl->in_msglen -= ssl->transform_in->maclen;
        -: 1967:
    #####: 1968:        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
    #####: 1969:        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
        -: 1970:
        -: 1971:#if defined(MBEDTLS_SSL_PROTO_SSL3)
        -: 1972:        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
        -: 1973:        {
        -: 1974:            ssl_mac( &ssl->transform_in->md_ctx_dec,
        -: 1975:                      ssl->transform_in->mac_dec,
        -: 1976:                      ssl->in_msg, ssl->in_msglen,
        -: 1977:                      ssl->in_ctr, ssl->in_msgtype,
        -: 1978:                      mac_expect );
        -: 1979:        }
        -: 1980:        else
        -: 1981:#endif /* MBEDTLS_SSL_PROTO_SSL3 */
        -: 1982:#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        -: 1983:        defined(MBEDTLS_SSL_PROTO_TLS1_2)
    #####: 1984:        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
        -: 1985:        {
        -: 1986:            /*
        -: 1987:             * Process MAC and always update for padlen afterwards to make
        -: 1988:             * total time independent of padlen
        -: 1989:             *
        -: 1990:             * extra_run compensates MAC check for padlen
        -: 1991:             *
        -: 1992:             * Known timing attacks:
        -: 1993:             *  - Lucky Thirteen (http://www.isg.rhul.ac.uk/tls/TLStiming.pdf)
        -: 1994:             *
        -: 1995:             * We use ( ( Lx + 8 ) / 64 ) to handle 'negative Lx' values
        -: 1996:             * correctly. (We round down instead of up, so -56 is the correct
        -: 1997:             * value for our calculations instead of -55)
        -: 1998:             */
    #####: 1999:            size_t j, extra_run = 0;
    #####: 2000:            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
    #####: 2001:                        ( 13 + ssl->in_msglen          + 8 ) / 64;
        -: 2002:
    #####: 2003:            extra_run &= correct * 0xFF;
        -: 2004:
    #####: 2005:            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
    #####: 2006:            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
    #####: 2007:            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
    #####: 2008:            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
        -: 2009:                             ssl->in_msglen );
    #####: 2010:            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
        -: 2011:            /* Call mbedtls_md_process at least once due to cache attacks */
    #####: 2012:            for( j = 0; j < extra_run + 1; j++ )
    #####: 2013:                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
        -: 2014:
    #####: 2015:            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
        -: 2016:        }
        -: 2017:        else
        -: 2018:#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
        -: 2019:              MBEDTLS_SSL_PROTO_TLS1_2 */
        -: 2020:        {
    #####: 2021:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 2022:            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 2023:        }
        -: 2024:
    #####: 2025:        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
    #####: 2026:        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
        -: 2027:                               ssl->transform_in->maclen );
        -: 2028:
    #####: 2029:        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
    #####: 2030:                                      ssl->transform_in->maclen ) != 0 )
        -: 2031:        {
        -: 2032:#if defined(MBEDTLS_SSL_DEBUG_ALL)
        -: 2033:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "message mac does not match" ) );
        -: 2034:#endif
    #####: 2035:            correct = 0;
        -: 2036:        }
    #####: 2037:        auth_done++;
        -: 2038:
        -: 2039:        /*
        -: 2040:         * Finally check the correct flag
        -: 2041:         */
    #####: 2042:        if( correct == 0 )
    #####: 2043:            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        -: 2044:    }
        -: 2045:#endif /* SSL_SOME_MODES_USE_MAC */
        -: 2046:
        -: 2047:    /* Make extra sure authentication was performed, exactly once */
    #####: 2048:    if( auth_done != 1 )
        -: 2049:    {
    #####: 2050:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 2051:        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 2052:    }
        -: 2053:
    #####: 2054:    if( ssl->in_msglen == 0 )
        -: 2055:    {
    #####: 2056:        ssl->nb_zero++;
        -: 2057:
        -: 2058:        /*
        -: 2059:         * Three or more empty messages may be a DoS attack
        -: 2060:         * (excessive CPU consumption).
        -: 2061:         */
    #####: 2062:        if( ssl->nb_zero > 3 )
        -: 2063:        {
    #####: 2064:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
        -: 2065:                                "messages, possible DoS attack" ) );
    #####: 2066:            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        -: 2067:        }
        -: 2068:    }
        -: 2069:    else
    #####: 2070:        ssl->nb_zero = 0;
        -: 2071:
        -: 2072:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 2073:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 2074:    {
        -: 2075:        ; /* in_ctr read from peer, not maintained internally */
        -: 2076:    }
        -: 2077:    else
        -: 2078:#endif
        -: 2079:    {
    #####: 2080:        for( i = 8; i > ssl_ep_len( ssl ); i-- )
    #####: 2081:            if( ++ssl->in_ctr[i - 1] != 0 )
    #####: 2082:                break;
        -: 2083:
        -: 2084:        /* The loop goes to its end iff the counter is wrapping */
    #####: 2085:        if( i == ssl_ep_len( ssl ) )
        -: 2086:        {
    #####: 2087:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
    #####: 2088:            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        -: 2089:        }
        -: 2090:    }
        -: 2091:
    #####: 2092:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decrypt buf" ) );
        -: 2093:
    #####: 2094:    return( 0 );
        -: 2095:}
        -: 2096:
        -: 2097:#undef MAC_NONE
        -: 2098:#undef MAC_PLAINTEXT
        -: 2099:#undef MAC_CIPHERTEXT
        -: 2100:
        -: 2101:#if defined(MBEDTLS_ZLIB_SUPPORT)
        -: 2102:/*
        -: 2103: * Compression/decompression functions
        -: 2104: */
        -: 2105:static int ssl_compress_buf( mbedtls_ssl_context *ssl )
        -: 2106:{
        -: 2107:    int ret;
        -: 2108:    unsigned char *msg_post = ssl->out_msg;
        -: 2109:    ptrdiff_t bytes_written = ssl->out_msg - ssl->out_buf;
        -: 2110:    size_t len_pre = ssl->out_msglen;
        -: 2111:    unsigned char *msg_pre = ssl->compress_buf;
        -: 2112:
        -: 2113:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> compress buf" ) );
        -: 2114:
        -: 2115:    if( len_pre == 0 )
        -: 2116:        return( 0 );
        -: 2117:
        -: 2118:    memcpy( msg_pre, ssl->out_msg, len_pre );
        -: 2119:
        -: 2120:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "before compression: msglen = %d, ",
        -: 2121:                   ssl->out_msglen ) );
        -: 2122:
        -: 2123:    MBEDTLS_SSL_DEBUG_BUF( 4, "before compression: output payload",
        -: 2124:                   ssl->out_msg, ssl->out_msglen );
        -: 2125:
        -: 2126:    ssl->transform_out->ctx_deflate.next_in = msg_pre;
        -: 2127:    ssl->transform_out->ctx_deflate.avail_in = len_pre;
        -: 2128:    ssl->transform_out->ctx_deflate.next_out = msg_post;
        -: 2129:    ssl->transform_out->ctx_deflate.avail_out = MBEDTLS_SSL_BUFFER_LEN - bytes_written;
        -: 2130:
        -: 2131:    ret = deflate( &ssl->transform_out->ctx_deflate, Z_SYNC_FLUSH );
        -: 2132:    if( ret != Z_OK )
        -: 2133:    {
        -: 2134:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "failed to perform compression (%d)", ret ) );
        -: 2135:        return( MBEDTLS_ERR_SSL_COMPRESSION_FAILED );
        -: 2136:    }
        -: 2137:
        -: 2138:    ssl->out_msglen = MBEDTLS_SSL_BUFFER_LEN -
        -: 2139:                      ssl->transform_out->ctx_deflate.avail_out - bytes_written;
        -: 2140:
        -: 2141:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "after compression: msglen = %d, ",
        -: 2142:                   ssl->out_msglen ) );
        -: 2143:
        -: 2144:    MBEDTLS_SSL_DEBUG_BUF( 4, "after compression: output payload",
        -: 2145:                   ssl->out_msg, ssl->out_msglen );
        -: 2146:
        -: 2147:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= compress buf" ) );
        -: 2148:
        -: 2149:    return( 0 );
        -: 2150:}
        -: 2151:
        -: 2152:static int ssl_decompress_buf( mbedtls_ssl_context *ssl )
        -: 2153:{
        -: 2154:    int ret;
        -: 2155:    unsigned char *msg_post = ssl->in_msg;
        -: 2156:    ptrdiff_t header_bytes = ssl->in_msg - ssl->in_buf;
        -: 2157:    size_t len_pre = ssl->in_msglen;
        -: 2158:    unsigned char *msg_pre = ssl->compress_buf;
        -: 2159:
        -: 2160:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decompress buf" ) );
        -: 2161:
        -: 2162:    if( len_pre == 0 )
        -: 2163:        return( 0 );
        -: 2164:
        -: 2165:    memcpy( msg_pre, ssl->in_msg, len_pre );
        -: 2166:
        -: 2167:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "before decompression: msglen = %d, ",
        -: 2168:                   ssl->in_msglen ) );
        -: 2169:
        -: 2170:    MBEDTLS_SSL_DEBUG_BUF( 4, "before decompression: input payload",
        -: 2171:                   ssl->in_msg, ssl->in_msglen );
        -: 2172:
        -: 2173:    ssl->transform_in->ctx_inflate.next_in = msg_pre;
        -: 2174:    ssl->transform_in->ctx_inflate.avail_in = len_pre;
        -: 2175:    ssl->transform_in->ctx_inflate.next_out = msg_post;
        -: 2176:    ssl->transform_in->ctx_inflate.avail_out = MBEDTLS_SSL_BUFFER_LEN -
        -: 2177:                                               header_bytes;
        -: 2178:
        -: 2179:    ret = inflate( &ssl->transform_in->ctx_inflate, Z_SYNC_FLUSH );
        -: 2180:    if( ret != Z_OK )
        -: 2181:    {
        -: 2182:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "failed to perform decompression (%d)", ret ) );
        -: 2183:        return( MBEDTLS_ERR_SSL_COMPRESSION_FAILED );
        -: 2184:    }
        -: 2185:
        -: 2186:    ssl->in_msglen = MBEDTLS_SSL_BUFFER_LEN -
        -: 2187:                     ssl->transform_in->ctx_inflate.avail_out - header_bytes;
        -: 2188:
        -: 2189:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "after decompression: msglen = %d, ",
        -: 2190:                   ssl->in_msglen ) );
        -: 2191:
        -: 2192:    MBEDTLS_SSL_DEBUG_BUF( 4, "after decompression: input payload",
        -: 2193:                   ssl->in_msg, ssl->in_msglen );
        -: 2194:
        -: 2195:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decompress buf" ) );
        -: 2196:
        -: 2197:    return( 0 );
        -: 2198:}
        -: 2199:#endif /* MBEDTLS_ZLIB_SUPPORT */
        -: 2200:
        -: 2201:#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_RENEGOTIATION)
        -: 2202:static int ssl_write_hello_request( mbedtls_ssl_context *ssl );
        -: 2203:
        -: 2204:#if defined(MBEDTLS_SSL_PROTO_DTLS)
        -: 2205:static int ssl_resend_hello_request( mbedtls_ssl_context *ssl )
        -: 2206:{
        -: 2207:    /* If renegotiation is not enforced, retransmit until we would reach max
        -: 2208:     * timeout if we were using the usual handshake doubling scheme */
        -: 2209:    if( ssl->conf->renego_max_records < 0 )
        -: 2210:    {
        -: 2211:        uint32_t ratio = ssl->conf->hs_timeout_max / ssl->conf->hs_timeout_min + 1;
        -: 2212:        unsigned char doublings = 1;
        -: 2213:
        -: 2214:        while( ratio != 0 )
        -: 2215:        {
        -: 2216:            ++doublings;
        -: 2217:            ratio >>= 1;
        -: 2218:        }
        -: 2219:
        -: 2220:        if( ++ssl->renego_records_seen > doublings )
        -: 2221:        {
        -: 2222:            MBEDTLS_SSL_DEBUG_MSG( 2, ( "no longer retransmitting hello request" ) );
        -: 2223:            return( 0 );
        -: 2224:        }
        -: 2225:    }
        -: 2226:
        -: 2227:    return( ssl_write_hello_request( ssl ) );
        -: 2228:}
        -: 2229:#endif
        -: 2230:#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
        -: 2231:
        -: 2232:/*
        -: 2233: * Fill the input message buffer by appending data to it.
        -: 2234: * The amount of data already fetched is in ssl->in_left.
        -: 2235: *
        -: 2236: * If we return 0, is it guaranteed that (at least) nb_want bytes are
        -: 2237: * available (from this read and/or a previous one). Otherwise, an error code
        -: 2238: * is returned (possibly EOF or WANT_READ).
        -: 2239: *
        -: 2240: * With stream transport (TLS) on success ssl->in_left == nb_want, but
        -: 2241: * with datagram transport (DTLS) on success ssl->in_left >= nb_want,
        -: 2242: * since we always read a whole datagram at once.
        -: 2243: *
        -: 2244: * For DTLS, it is up to the caller to set ssl->next_record_offset when
        -: 2245: * they're done reading a record.
        -: 2246: */
    #####: 2247:int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
        -: 2248:{
        -: 2249:    int ret;
        -: 2250:    size_t len;
        -: 2251:
    #####: 2252:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
        -: 2253:
    #####: 2254:    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
        -: 2255:    {
    #####: 2256:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
        -: 2257:                            "or mbedtls_ssl_set_bio()" ) );
    #####: 2258:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 2259:    }
        -: 2260:
    #####: 2261:    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
        -: 2262:    {
    #####: 2263:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
    #####: 2264:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 2265:    }
        -: 2266:
        -: 2267:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 2268:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 2269:    {
        -: 2270:        uint32_t timeout;
        -: 2271:
        -: 2272:        /* Just to be sure */
    #####: 2273:        if( ssl->f_set_timer == NULL || ssl->f_get_timer == NULL )
        -: 2274:        {
    #####: 2275:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "You must use "
        -: 2276:                        "mbedtls_ssl_set_timer_cb() for DTLS" ) );
    #####: 2277:            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 2278:        }
        -: 2279:
        -: 2280:        /*
        -: 2281:         * The point is, we need to always read a full datagram at once, so we
        -: 2282:         * sometimes read more then requested, and handle the additional data.
        -: 2283:         * It could be the rest of the current record (while fetching the
        -: 2284:         * header) and/or some other records in the same datagram.
        -: 2285:         */
        -: 2286:
        -: 2287:        /*
        -: 2288:         * Move to the next record in the already read datagram if applicable
        -: 2289:         */
    #####: 2290:        if( ssl->next_record_offset != 0 )
        -: 2291:        {
    #####: 2292:            if( ssl->in_left < ssl->next_record_offset )
        -: 2293:            {
    #####: 2294:                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 2295:                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 2296:            }
        -: 2297:
    #####: 2298:            ssl->in_left -= ssl->next_record_offset;
        -: 2299:
    #####: 2300:            if( ssl->in_left != 0 )
        -: 2301:            {
    #####: 2302:                MBEDTLS_SSL_DEBUG_MSG( 2, ( "next record in same datagram, offset: %d",
        -: 2303:                                    ssl->next_record_offset ) );
    #####: 2304:                memmove( ssl->in_hdr,
    #####: 2305:                         ssl->in_hdr + ssl->next_record_offset,
        -: 2306:                         ssl->in_left );
        -: 2307:            }
        -: 2308:
    #####: 2309:            ssl->next_record_offset = 0;
        -: 2310:        }
        -: 2311:
    #####: 2312:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
        -: 2313:                       ssl->in_left, nb_want ) );
        -: 2314:
        -: 2315:        /*
        -: 2316:         * Done if we already have enough data.
        -: 2317:         */
    #####: 2318:        if( nb_want <= ssl->in_left)
        -: 2319:        {
    #####: 2320:            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
    #####: 2321:            return( 0 );
        -: 2322:        }
        -: 2323:
        -: 2324:        /*
        -: 2325:         * A record can't be split accross datagrams. If we need to read but
        -: 2326:         * are not at the beginning of a new record, the caller did something
        -: 2327:         * wrong.
        -: 2328:         */
    #####: 2329:        if( ssl->in_left != 0 )
        -: 2330:        {
    #####: 2331:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 2332:            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 2333:        }
        -: 2334:
        -: 2335:        /*
        -: 2336:         * Don't even try to read if time's out already.
        -: 2337:         * This avoids by-passing the timer when repeatedly receiving messages
        -: 2338:         * that will end up being dropped.
        -: 2339:         */
    #####: 2340:        if( ssl_check_timer( ssl ) != 0 )
        -: 2341:        {
    #####: 2342:            MBEDTLS_SSL_DEBUG_MSG( 2, ( "timer has expired" ) );
    #####: 2343:            ret = MBEDTLS_ERR_SSL_TIMEOUT;
        -: 2344:        }
        -: 2345:        else
        -: 2346:        {
    #####: 2347:            len = MBEDTLS_SSL_BUFFER_LEN - ( ssl->in_hdr - ssl->in_buf );
        -: 2348:
    #####: 2349:            if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    #####: 2350:                timeout = ssl->handshake->retransmit_timeout;
        -: 2351:            else
    #####: 2352:                timeout = ssl->conf->read_timeout;
        -: 2353:
    #####: 2354:            MBEDTLS_SSL_DEBUG_MSG( 3, ( "f_recv_timeout: %u ms", timeout ) );
        -: 2355:
    #####: 2356:            if( ssl->f_recv_timeout != NULL )
    #####: 2357:                ret = ssl->f_recv_timeout( ssl->p_bio, ssl->in_hdr, len,
        -: 2358:                                                                    timeout );
        -: 2359:            else
    #####: 2360:                ret = ssl->f_recv( ssl->p_bio, ssl->in_hdr, len );
        -: 2361:
    #####: 2362:            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
        -: 2363:
    #####: 2364:            if( ret == 0 )
    #####: 2365:                return( MBEDTLS_ERR_SSL_CONN_EOF );
        -: 2366:        }
        -: 2367:
    #####: 2368:        if( ret == MBEDTLS_ERR_SSL_TIMEOUT )
        -: 2369:        {
    #####: 2370:            MBEDTLS_SSL_DEBUG_MSG( 2, ( "timeout" ) );
    #####: 2371:            ssl_set_timer( ssl, 0 );
        -: 2372:
    #####: 2373:            if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
        -: 2374:            {
    #####: 2375:                if( ssl_double_retransmit_timeout( ssl ) != 0 )
        -: 2376:                {
    #####: 2377:                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake timeout" ) );
    #####: 2378:                    return( MBEDTLS_ERR_SSL_TIMEOUT );
        -: 2379:                }
        -: 2380:
    #####: 2381:                if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )
        -: 2382:                {
    #####: 2383:                    MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_resend", ret );
    #####: 2384:                    return( ret );
        -: 2385:                }
        -: 2386:
    #####: 2387:                return( MBEDTLS_ERR_SSL_WANT_READ );
        -: 2388:            }
        -: 2389:#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_RENEGOTIATION)
        -: 2390:            else if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
        -: 2391:                     ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )
        -: 2392:            {
        -: 2393:                if( ( ret = ssl_resend_hello_request( ssl ) ) != 0 )
        -: 2394:                {
        -: 2395:                    MBEDTLS_SSL_DEBUG_RET( 1, "ssl_resend_hello_request", ret );
        -: 2396:                    return( ret );
        -: 2397:                }
        -: 2398:
        -: 2399:                return( MBEDTLS_ERR_SSL_WANT_READ );
        -: 2400:            }
        -: 2401:#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
        -: 2402:        }
        -: 2403:
    #####: 2404:        if( ret < 0 )
    #####: 2405:            return( ret );
        -: 2406:
    #####: 2407:        ssl->in_left = ret;
        -: 2408:    }
        -: 2409:    else
        -: 2410:#endif
        -: 2411:    {
    #####: 2412:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
        -: 2413:                       ssl->in_left, nb_want ) );
        -: 2414:
    #####: 2415:        while( ssl->in_left < nb_want )
        -: 2416:        {
    #####: 2417:            len = nb_want - ssl->in_left;
        -: 2418:
    #####: 2419:            if( ssl_check_timer( ssl ) != 0 )
    #####: 2420:                ret = MBEDTLS_ERR_SSL_TIMEOUT;
        -: 2421:            else
        -: 2422:            {
    #####: 2423:                if( ssl->f_recv_timeout != NULL )
        -: 2424:                {
    #####: 2425:                    ret = ssl->f_recv_timeout( ssl->p_bio,
    #####: 2426:                                               ssl->in_hdr + ssl->in_left, len,
    #####: 2427:                                               ssl->conf->read_timeout );
        -: 2428:                }
        -: 2429:                else
        -: 2430:                {
    #####: 2431:                    ret = ssl->f_recv( ssl->p_bio,
    #####: 2432:                                       ssl->in_hdr + ssl->in_left, len );
        -: 2433:                }
        -: 2434:            }
        -: 2435:
    #####: 2436:            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
        -: 2437:                                        ssl->in_left, nb_want ) );
    #####: 2438:            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
        -: 2439:
    #####: 2440:            if( ret == 0 )
    #####: 2441:                return( MBEDTLS_ERR_SSL_CONN_EOF );
        -: 2442:
    #####: 2443:            if( ret < 0 )
    #####: 2444:                return( ret );
        -: 2445:
    #####: 2446:            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
        -: 2447:            {
    #####: 2448:                MBEDTLS_SSL_DEBUG_MSG( 1,
        -: 2449:                    ( "f_recv returned %d bytes but only %lu were requested",
        -: 2450:                    ret, (unsigned long)len ) );
    #####: 2451:                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 2452:            }
        -: 2453:
    #####: 2454:            ssl->in_left += ret;
        -: 2455:        }
        -: 2456:    }
        -: 2457:
    #####: 2458:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
        -: 2459:
    #####: 2460:    return( 0 );
        -: 2461:}
        -: 2462:
        -: 2463:/*
        -: 2464: * Flush any data not yet written
        -: 2465: */
    #####: 2466:int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
        -: 2467:{
        -: 2468:    int ret;
        -: 2469:    unsigned char *buf, i;
        -: 2470:
    #####: 2471:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
        -: 2472:
    #####: 2473:    if( ssl->f_send == NULL )
        -: 2474:    {
    #####: 2475:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
        -: 2476:                            "or mbedtls_ssl_set_bio()" ) );
    #####: 2477:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 2478:    }
        -: 2479:
        -: 2480:    /* Avoid incrementing counter if data is flushed */
    #####: 2481:    if( ssl->out_left == 0 )
        -: 2482:    {
    #####: 2483:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
    #####: 2484:        return( 0 );
        -: 2485:    }
        -: 2486:
    #####: 2487:    while( ssl->out_left > 0 )
        -: 2488:    {
    #####: 2489:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
        -: 2490:                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );
        -: 2491:
    #####: 2492:        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
    #####: 2493:              ssl->out_msglen - ssl->out_left;
    #####: 2494:        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
        -: 2495:
    #####: 2496:        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
        -: 2497:
    #####: 2498:        if( ret <= 0 )
    #####: 2499:            return( ret );
        -: 2500:
    #####: 2501:        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
        -: 2502:        {
    #####: 2503:            MBEDTLS_SSL_DEBUG_MSG( 1,
        -: 2504:                ( "f_send returned %d bytes but only %lu bytes were sent",
        -: 2505:                ret, (unsigned long)ssl->out_left ) );
    #####: 2506:            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 2507:        }
        -: 2508:
    #####: 2509:        ssl->out_left -= ret;
        -: 2510:    }
        -: 2511:
    #####: 2512:    for( i = 8; i > ssl_ep_len( ssl ); i-- )
    #####: 2513:        if( ++ssl->out_ctr[i - 1] != 0 )
    #####: 2514:            break;
        -: 2515:
        -: 2516:    /* The loop goes to its end iff the counter is wrapping */
    #####: 2517:    if( i == ssl_ep_len( ssl ) )
        -: 2518:    {
    #####: 2519:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
    #####: 2520:        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        -: 2521:    }
        -: 2522:
    #####: 2523:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        -: 2524:
    #####: 2525:    return( 0 );
        -: 2526:}
        -: 2527:
        -: 2528:/*
        -: 2529: * Functions to handle the DTLS retransmission state machine
        -: 2530: */
        -: 2531:#if defined(MBEDTLS_SSL_PROTO_DTLS)
        -: 2532:/*
        -: 2533: * Append current handshake message to current outgoing flight
        -: 2534: */
    #####: 2535:static int ssl_flight_append( mbedtls_ssl_context *ssl )
        -: 2536:{
        -: 2537:    mbedtls_ssl_flight_item *msg;
        -: 2538:
        -: 2539:    /* Allocate space for current message */
    #####: 2540:    if( ( msg = mbedtls_calloc( 1, sizeof(  mbedtls_ssl_flight_item ) ) ) == NULL )
        -: 2541:    {
    #####: 2542:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc %d bytes failed",
        -: 2543:                            sizeof( mbedtls_ssl_flight_item ) ) );
    #####: 2544:        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
        -: 2545:    }
        -: 2546:
    #####: 2547:    if( ( msg->p = mbedtls_calloc( 1, ssl->out_msglen ) ) == NULL )
        -: 2548:    {
    #####: 2549:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc %d bytes failed", ssl->out_msglen ) );
    #####: 2550:        mbedtls_free( msg );
    #####: 2551:        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
        -: 2552:    }
        -: 2553:
        -: 2554:    /* Copy current handshake message with headers */
    #####: 2555:    memcpy( msg->p, ssl->out_msg, ssl->out_msglen );
    #####: 2556:    msg->len = ssl->out_msglen;
    #####: 2557:    msg->type = ssl->out_msgtype;
    #####: 2558:    msg->next = NULL;
        -: 2559:
        -: 2560:    /* Append to the current flight */
    #####: 2561:    if( ssl->handshake->flight == NULL )
    #####: 2562:        ssl->handshake->flight = msg;
        -: 2563:    else
        -: 2564:    {
    #####: 2565:        mbedtls_ssl_flight_item *cur = ssl->handshake->flight;
    #####: 2566:        while( cur->next != NULL )
    #####: 2567:            cur = cur->next;
    #####: 2568:        cur->next = msg;
        -: 2569:    }
        -: 2570:
    #####: 2571:    return( 0 );
        -: 2572:}
        -: 2573:
        -: 2574:/*
        -: 2575: * Free the current flight of handshake messages
        -: 2576: */
    #####: 2577:static void ssl_flight_free( mbedtls_ssl_flight_item *flight )
        -: 2578:{
    #####: 2579:    mbedtls_ssl_flight_item *cur = flight;
        -: 2580:    mbedtls_ssl_flight_item *next;
        -: 2581:
    #####: 2582:    while( cur != NULL )
        -: 2583:    {
    #####: 2584:        next = cur->next;
        -: 2585:
    #####: 2586:        mbedtls_free( cur->p );
    #####: 2587:        mbedtls_free( cur );
        -: 2588:
    #####: 2589:        cur = next;
        -: 2590:    }
    #####: 2591:}
        -: 2592:
        -: 2593:#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
        -: 2594:static void ssl_dtls_replay_reset( mbedtls_ssl_context *ssl );
        -: 2595:#endif
        -: 2596:
        -: 2597:/*
        -: 2598: * Swap transform_out and out_ctr with the alternative ones
        -: 2599: */
    #####: 2600:static void ssl_swap_epochs( mbedtls_ssl_context *ssl )
        -: 2601:{
        -: 2602:    mbedtls_ssl_transform *tmp_transform;
        -: 2603:    unsigned char tmp_out_ctr[8];
        -: 2604:
    #####: 2605:    if( ssl->transform_out == ssl->handshake->alt_transform_out )
        -: 2606:    {
    #####: 2607:        MBEDTLS_SSL_DEBUG_MSG( 3, ( "skip swap epochs" ) );
    #####: 2608:        return;
        -: 2609:    }
        -: 2610:
    #####: 2611:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "swap epochs" ) );
        -: 2612:
        -: 2613:    /* Swap transforms */
    #####: 2614:    tmp_transform                     = ssl->transform_out;
    #####: 2615:    ssl->transform_out                = ssl->handshake->alt_transform_out;
    #####: 2616:    ssl->handshake->alt_transform_out = tmp_transform;
        -: 2617:
        -: 2618:    /* Swap epoch + sequence_number */
    #####: 2619:    memcpy( tmp_out_ctr,                 ssl->out_ctr,                8 );
    #####: 2620:    memcpy( ssl->out_ctr,                ssl->handshake->alt_out_ctr, 8 );
    #####: 2621:    memcpy( ssl->handshake->alt_out_ctr, tmp_out_ctr,                 8 );
        -: 2622:
        -: 2623:    /* Adjust to the newly activated transform */
    #####: 2624:    if( ssl->transform_out != NULL &&
    #####: 2625:        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        -: 2626:    {
    #####: 2627:        ssl->out_msg = ssl->out_iv + ssl->transform_out->ivlen -
    #####: 2628:                                     ssl->transform_out->fixed_ivlen;
        -: 2629:    }
        -: 2630:    else
    #####: 2631:        ssl->out_msg = ssl->out_iv;
        -: 2632:
        -: 2633:#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
        -: 2634:    if( mbedtls_ssl_hw_record_activate != NULL )
        -: 2635:    {
        -: 2636:        if( ( ret = mbedtls_ssl_hw_record_activate( ssl, MBEDTLS_SSL_CHANNEL_OUTBOUND ) ) != 0 )
        -: 2637:        {
        -: 2638:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_activate", ret );
        -: 2639:            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        -: 2640:        }
        -: 2641:    }
        -: 2642:#endif
        -: 2643:}
        -: 2644:
        -: 2645:/*
        -: 2646: * Retransmit the current flight of messages.
        -: 2647: *
        -: 2648: * Need to remember the current message in case flush_output returns
        -: 2649: * WANT_WRITE, causing us to exit this function and come back later.
        -: 2650: * This function must be called until state is no longer SENDING.
        -: 2651: */
    #####: 2652:int mbedtls_ssl_resend( mbedtls_ssl_context *ssl )
        -: 2653:{
    #####: 2654:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> mbedtls_ssl_resend" ) );
        -: 2655:
    #####: 2656:    if( ssl->handshake->retransmit_state != MBEDTLS_SSL_RETRANS_SENDING )
        -: 2657:    {
    #####: 2658:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "initialise resending" ) );
        -: 2659:
    #####: 2660:        ssl->handshake->cur_msg = ssl->handshake->flight;
    #####: 2661:        ssl_swap_epochs( ssl );
        -: 2662:
    #####: 2663:        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_SENDING;
        -: 2664:    }
        -: 2665:
    #####: 2666:    while( ssl->handshake->cur_msg != NULL )
        -: 2667:    {
        -: 2668:        int ret;
    #####: 2669:        mbedtls_ssl_flight_item *cur = ssl->handshake->cur_msg;
        -: 2670:
        -: 2671:        /* Swap epochs before sending Finished: we can't do it after
        -: 2672:         * sending ChangeCipherSpec, in case write returns WANT_READ.
        -: 2673:         * Must be done before copying, may change out_msg pointer */
    #####: 2674:        if( cur->type == MBEDTLS_SSL_MSG_HANDSHAKE &&
    #####: 2675:            cur->p[0] == MBEDTLS_SSL_HS_FINISHED )
        -: 2676:        {
    #####: 2677:            ssl_swap_epochs( ssl );
        -: 2678:        }
        -: 2679:
    #####: 2680:        memcpy( ssl->out_msg, cur->p, cur->len );
    #####: 2681:        ssl->out_msglen = cur->len;
    #####: 2682:        ssl->out_msgtype = cur->type;
        -: 2683:
    #####: 2684:        ssl->handshake->cur_msg = cur->next;
        -: 2685:
    #####: 2686:        MBEDTLS_SSL_DEBUG_BUF( 3, "resent handshake message header", ssl->out_msg, 12 );
        -: 2687:
    #####: 2688:        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
        -: 2689:        {
    #####: 2690:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
    #####: 2691:            return( ret );
        -: 2692:        }
        -: 2693:    }
        -: 2694:
    #####: 2695:    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
    #####: 2696:        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_FINISHED;
        -: 2697:    else
        -: 2698:    {
    #####: 2699:        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_WAITING;
    #####: 2700:        ssl_set_timer( ssl, ssl->handshake->retransmit_timeout );
        -: 2701:    }
        -: 2702:
    #####: 2703:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= mbedtls_ssl_resend" ) );
        -: 2704:
    #####: 2705:    return( 0 );
        -: 2706:}
        -: 2707:
        -: 2708:/*
        -: 2709: * To be called when the last message of an incoming flight is received.
        -: 2710: */
    #####: 2711:void mbedtls_ssl_recv_flight_completed( mbedtls_ssl_context *ssl )
        -: 2712:{
        -: 2713:    /* We won't need to resend that one any more */
    #####: 2714:    ssl_flight_free( ssl->handshake->flight );
    #####: 2715:    ssl->handshake->flight = NULL;
    #####: 2716:    ssl->handshake->cur_msg = NULL;
        -: 2717:
        -: 2718:    /* The next incoming flight will start with this msg_seq */
    #####: 2719:    ssl->handshake->in_flight_start_seq = ssl->handshake->in_msg_seq;
        -: 2720:
        -: 2721:    /* Cancel timer */
    #####: 2722:    ssl_set_timer( ssl, 0 );
        -: 2723:
    #####: 2724:    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
    #####: 2725:        ssl->in_msg[0] == MBEDTLS_SSL_HS_FINISHED )
        -: 2726:    {
    #####: 2727:        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_FINISHED;
        -: 2728:    }
        -: 2729:    else
    #####: 2730:        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_PREPARING;
    #####: 2731:}
        -: 2732:
        -: 2733:/*
        -: 2734: * To be called when the last message of an outgoing flight is send.
        -: 2735: */
    #####: 2736:void mbedtls_ssl_send_flight_completed( mbedtls_ssl_context *ssl )
        -: 2737:{
    #####: 2738:    ssl_reset_retransmit_timeout( ssl );
    #####: 2739:    ssl_set_timer( ssl, ssl->handshake->retransmit_timeout );
        -: 2740:
    #####: 2741:    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
    #####: 2742:        ssl->in_msg[0] == MBEDTLS_SSL_HS_FINISHED )
        -: 2743:    {
    #####: 2744:        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_FINISHED;
        -: 2745:    }
        -: 2746:    else
    #####: 2747:        ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_WAITING;
    #####: 2748:}
        -: 2749:#endif /* MBEDTLS_SSL_PROTO_DTLS */
        -: 2750:
        -: 2751:/*
        -: 2752: * Record layer functions
        -: 2753: */
        -: 2754:
        -: 2755:/*
        -: 2756: * Write current record.
        -: 2757: * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
        -: 2758: */
    #####: 2759:int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
        -: 2760:{
    #####: 2761:    int ret, done = 0, out_msg_type;
    #####: 2762:    size_t len = ssl->out_msglen;
        -: 2763:
    #####: 2764:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
        -: 2765:
        -: 2766:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 2767:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
    #####: 2768:        ssl->handshake != NULL &&
    #####: 2769:        ssl->handshake->retransmit_state == MBEDTLS_SSL_RETRANS_SENDING )
        -: 2770:    {
        -: 2771:        ; /* Skip special handshake treatment when resending */
        -: 2772:    }
        -: 2773:    else
        -: 2774:#endif
    #####: 2775:    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
        -: 2776:    {
    #####: 2777:        out_msg_type = ssl->out_msg[0];
        -: 2778:
    #####: 2779:        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
    #####: 2780:            ssl->handshake == NULL )
        -: 2781:        {
    #####: 2782:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 2783:            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 2784:        }
        -: 2785:
    #####: 2786:        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
    #####: 2787:        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
    #####: 2788:        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
        -: 2789:
        -: 2790:        /*
        -: 2791:         * DTLS has additional fields in the Handshake layer,
        -: 2792:         * between the length field and the actual payload:
        -: 2793:         *      uint16 message_seq;
        -: 2794:         *      uint24 fragment_offset;
        -: 2795:         *      uint24 fragment_length;
        -: 2796:         */
        -: 2797:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 2798:        if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 2799:        {
        -: 2800:            /* Make room for the additional DTLS fields */
    #####: 2801:            if( MBEDTLS_SSL_MAX_CONTENT_LEN - ssl->out_msglen < 8 )
        -: 2802:            {
    #####: 2803:                MBEDTLS_SSL_DEBUG_MSG( 1, ( "DTLS handshake message too large: "
        -: 2804:                              "size %u, maximum %u",
        -: 2805:                               (unsigned) ( ssl->in_hslen - 4 ),
        -: 2806:                               (unsigned) ( MBEDTLS_SSL_MAX_CONTENT_LEN - 12 ) ) );
    #####: 2807:                return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 2808:            }
        -: 2809:
    #####: 2810:            memmove( ssl->out_msg + 12, ssl->out_msg + 4, len - 4 );
    #####: 2811:            ssl->out_msglen += 8;
    #####: 2812:            len += 8;
        -: 2813:
        -: 2814:            /* Write message_seq and update it, except for HelloRequest */
    #####: 2815:            if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
        -: 2816:            {
    #####: 2817:                ssl->out_msg[4] = ( ssl->handshake->out_msg_seq >> 8 ) & 0xFF;
    #####: 2818:                ssl->out_msg[5] = ( ssl->handshake->out_msg_seq      ) & 0xFF;
    #####: 2819:                ++( ssl->handshake->out_msg_seq );
        -: 2820:            }
        -: 2821:            else
        -: 2822:            {
    #####: 2823:                ssl->out_msg[4] = 0;
    #####: 2824:                ssl->out_msg[5] = 0;
        -: 2825:            }
        -: 2826:
        -: 2827:            /* We don't fragment, so frag_offset = 0 and frag_len = len */
    #####: 2828:            memset( ssl->out_msg + 6, 0x00, 3 );
    #####: 2829:            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        -: 2830:        }
        -: 2831:#endif /* MBEDTLS_SSL_PROTO_DTLS */
        -: 2832:
    #####: 2833:        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
    #####: 2834:            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
        -: 2835:    }
        -: 2836:
        -: 2837:    /* Save handshake and CCS messages for resending */
        -: 2838:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 2839:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
    #####: 2840:        ssl->handshake != NULL &&
    #####: 2841:        ssl->handshake->retransmit_state != MBEDTLS_SSL_RETRANS_SENDING &&
    #####: 2842:        ( ssl->out_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC ||
    #####: 2843:          ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE ) )
        -: 2844:    {
    #####: 2845:        if( ( ret = ssl_flight_append( ssl ) ) != 0 )
        -: 2846:        {
    #####: 2847:            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_flight_append", ret );
    #####: 2848:            return( ret );
        -: 2849:        }
        -: 2850:    }
        -: 2851:#endif
        -: 2852:
        -: 2853:#if defined(MBEDTLS_ZLIB_SUPPORT)
        -: 2854:    if( ssl->transform_out != NULL &&
        -: 2855:        ssl->session_out->compression == MBEDTLS_SSL_COMPRESS_DEFLATE )
        -: 2856:    {
        -: 2857:        if( ( ret = ssl_compress_buf( ssl ) ) != 0 )
        -: 2858:        {
        -: 2859:            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_compress_buf", ret );
        -: 2860:            return( ret );
        -: 2861:        }
        -: 2862:
        -: 2863:        len = ssl->out_msglen;
        -: 2864:    }
        -: 2865:#endif /*MBEDTLS_ZLIB_SUPPORT */
        -: 2866:
        -: 2867:#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
        -: 2868:    if( mbedtls_ssl_hw_record_write != NULL )
        -: 2869:    {
        -: 2870:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "going for mbedtls_ssl_hw_record_write()" ) );
        -: 2871:
        -: 2872:        ret = mbedtls_ssl_hw_record_write( ssl );
        -: 2873:        if( ret != 0 && ret != MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH )
        -: 2874:        {
        -: 2875:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_write", ret );
        -: 2876:            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        -: 2877:        }
        -: 2878:
        -: 2879:        if( ret == 0 )
        -: 2880:            done = 1;
        -: 2881:    }
        -: 2882:#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    #####: 2883:    if( !done )
        -: 2884:    {
    #####: 2885:        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
    #####: 2886:        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
    #####: 2887:                           ssl->conf->transport, ssl->out_hdr + 1 );
        -: 2888:
    #####: 2889:        ssl->out_len[0] = (unsigned char)( len >> 8 );
    #####: 2890:        ssl->out_len[1] = (unsigned char)( len      );
        -: 2891:
    #####: 2892:        if( ssl->transform_out != NULL )
        -: 2893:        {
    #####: 2894:            if( ( ret = ssl_encrypt_buf( ssl ) ) != 0 )
        -: 2895:            {
    #####: 2896:                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
    #####: 2897:                return( ret );
        -: 2898:            }
        -: 2899:
    #####: 2900:            len = ssl->out_msglen;
    #####: 2901:            ssl->out_len[0] = (unsigned char)( len >> 8 );
    #####: 2902:            ssl->out_len[1] = (unsigned char)( len      );
        -: 2903:        }
        -: 2904:
    #####: 2905:        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
        -: 2906:
    #####: 2907:        MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
        -: 2908:                            "version = [%d:%d], msglen = %d",
        -: 2909:                       ssl->out_hdr[0], ssl->out_hdr[1], ssl->out_hdr[2],
        -: 2910:                     ( ssl->out_len[0] << 8 ) | ssl->out_len[1] ) );
        -: 2911:
    #####: 2912:        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
        -: 2913:                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
        -: 2914:    }
        -: 2915:
    #####: 2916:    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
        -: 2917:    {
    #####: 2918:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
    #####: 2919:        return( ret );
        -: 2920:    }
        -: 2921:
    #####: 2922:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );
        -: 2923:
    #####: 2924:    return( 0 );
        -: 2925:}
        -: 2926:
        -: 2927:#if defined(MBEDTLS_SSL_PROTO_DTLS)
        -: 2928:/*
        -: 2929: * Mark bits in bitmask (used for DTLS HS reassembly)
        -: 2930: */
    #####: 2931:static void ssl_bitmask_set( unsigned char *mask, size_t offset, size_t len )
        -: 2932:{
        -: 2933:    unsigned int start_bits, end_bits;
        -: 2934:
    #####: 2935:    start_bits = 8 - ( offset % 8 );
    #####: 2936:    if( start_bits != 8 )
        -: 2937:    {
    #####: 2938:        size_t first_byte_idx = offset / 8;
        -: 2939:
        -: 2940:        /* Special case */
    #####: 2941:        if( len <= start_bits )
        -: 2942:        {
    #####: 2943:            for( ; len != 0; len-- )
    #####: 2944:                mask[first_byte_idx] |= 1 << ( start_bits - len );
        -: 2945:
        -: 2946:            /* Avoid potential issues with offset or len becoming invalid */
    #####: 2947:            return;
        -: 2948:        }
        -: 2949:
    #####: 2950:        offset += start_bits; /* Now offset % 8 == 0 */
    #####: 2951:        len -= start_bits;
        -: 2952:
    #####: 2953:        for( ; start_bits != 0; start_bits-- )
    #####: 2954:            mask[first_byte_idx] |= 1 << ( start_bits - 1 );
        -: 2955:    }
        -: 2956:
    #####: 2957:    end_bits = len % 8;
    #####: 2958:    if( end_bits != 0 )
        -: 2959:    {
    #####: 2960:        size_t last_byte_idx = ( offset + len ) / 8;
        -: 2961:
    #####: 2962:        len -= end_bits; /* Now len % 8 == 0 */
        -: 2963:
    #####: 2964:        for( ; end_bits != 0; end_bits-- )
    #####: 2965:            mask[last_byte_idx] |= 1 << ( 8 - end_bits );
        -: 2966:    }
        -: 2967:
    #####: 2968:    memset( mask + offset / 8, 0xFF, len / 8 );
        -: 2969:}
        -: 2970:
        -: 2971:/*
        -: 2972: * Check that bitmask is full
        -: 2973: */
    #####: 2974:static int ssl_bitmask_check( unsigned char *mask, size_t len )
        -: 2975:{
        -: 2976:    size_t i;
        -: 2977:
    #####: 2978:    for( i = 0; i < len / 8; i++ )
    #####: 2979:        if( mask[i] != 0xFF )
    #####: 2980:            return( -1 );
        -: 2981:
    #####: 2982:    for( i = 0; i < len % 8; i++ )
    #####: 2983:        if( ( mask[len / 8] & ( 1 << ( 7 - i ) ) ) == 0 )
    #####: 2984:            return( -1 );
        -: 2985:
    #####: 2986:    return( 0 );
        -: 2987:}
        -: 2988:
        -: 2989:/*
        -: 2990: * Reassemble fragmented DTLS handshake messages.
        -: 2991: *
        -: 2992: * Use a temporary buffer for reassembly, divided in two parts:
        -: 2993: * - the first holds the reassembled message (including handshake header),
        -: 2994: * - the second holds a bitmask indicating which parts of the message
        -: 2995: *   (excluding headers) have been received so far.
        -: 2996: */
    #####: 2997:static int ssl_reassemble_dtls_handshake( mbedtls_ssl_context *ssl )
        -: 2998:{
        -: 2999:    unsigned char *msg, *bitmask;
        -: 3000:    size_t frag_len, frag_off;
    #####: 3001:    size_t msg_len = ssl->in_hslen - 12; /* Without headers */
        -: 3002:
    #####: 3003:    if( ssl->handshake == NULL )
        -: 3004:    {
    #####: 3005:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "not supported outside handshake (for now)" ) );
    #####: 3006:        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
        -: 3007:    }
        -: 3008:
        -: 3009:    /*
        -: 3010:     * For first fragment, check size and allocate buffer
        -: 3011:     */
    #####: 3012:    if( ssl->handshake->hs_msg == NULL )
        -: 3013:    {
        -: 3014:        size_t alloc_len;
        -: 3015:
    #####: 3016:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "initialize reassembly, total length = %d",
        -: 3017:                            msg_len ) );
        -: 3018:
    #####: 3019:        if( ssl->in_hslen > MBEDTLS_SSL_MAX_CONTENT_LEN )
        -: 3020:        {
    #####: 3021:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too large" ) );
    #####: 3022:            return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
        -: 3023:        }
        -: 3024:
        -: 3025:        /* The bitmask needs one bit per byte of message excluding header */
    #####: 3026:        alloc_len = 12 + msg_len + msg_len / 8 + ( msg_len % 8 != 0 );
        -: 3027:
    #####: 3028:        ssl->handshake->hs_msg = mbedtls_calloc( 1, alloc_len );
    #####: 3029:        if( ssl->handshake->hs_msg == NULL )
        -: 3030:        {
    #####: 3031:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc failed (%d bytes)", alloc_len ) );
    #####: 3032:            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
        -: 3033:        }
        -: 3034:
        -: 3035:        /* Prepare final header: copy msg_type, length and message_seq,
        -: 3036:         * then add standardised fragment_offset and fragment_length */
    #####: 3037:        memcpy( ssl->handshake->hs_msg, ssl->in_msg, 6 );
    #####: 3038:        memset( ssl->handshake->hs_msg + 6, 0, 3 );
    #####: 3039:        memcpy( ssl->handshake->hs_msg + 9,
    #####: 3040:                ssl->handshake->hs_msg + 1, 3 );
        -: 3041:    }
        -: 3042:    else
        -: 3043:    {
        -: 3044:        /* Make sure msg_type and length are consistent */
    #####: 3045:        if( memcmp( ssl->handshake->hs_msg, ssl->in_msg, 4 ) != 0 )
        -: 3046:        {
    #####: 3047:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "fragment header mismatch" ) );
    #####: 3048:            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        -: 3049:        }
        -: 3050:    }
        -: 3051:
    #####: 3052:    msg = ssl->handshake->hs_msg + 12;
    #####: 3053:    bitmask = msg + msg_len;
        -: 3054:
        -: 3055:    /*
        -: 3056:     * Check and copy current fragment
        -: 3057:     */
    #####: 3058:    frag_off = ( ssl->in_msg[6]  << 16 ) |
    #####: 3059:               ( ssl->in_msg[7]  << 8  ) |
    #####: 3060:                 ssl->in_msg[8];
    #####: 3061:    frag_len = ( ssl->in_msg[9]  << 16 ) |
    #####: 3062:               ( ssl->in_msg[10] << 8  ) |
    #####: 3063:                 ssl->in_msg[11];
        -: 3064:
    #####: 3065:    if( frag_off + frag_len > msg_len )
        -: 3066:    {
    #####: 3067:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid fragment offset/len: %d + %d > %d",
        -: 3068:                          frag_off, frag_len, msg_len ) );
    #####: 3069:        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        -: 3070:    }
        -: 3071:
    #####: 3072:    if( frag_len + 12 > ssl->in_msglen )
        -: 3073:    {
    #####: 3074:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid fragment length: %d + 12 > %d",
        -: 3075:                          frag_len, ssl->in_msglen ) );
    #####: 3076:        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        -: 3077:    }
        -: 3078:
    #####: 3079:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "adding fragment, offset = %d, length = %d",
        -: 3080:                        frag_off, frag_len ) );
        -: 3081:
    #####: 3082:    memcpy( msg + frag_off, ssl->in_msg + 12, frag_len );
    #####: 3083:    ssl_bitmask_set( bitmask, frag_off, frag_len );
        -: 3084:
        -: 3085:    /*
        -: 3086:     * Do we have the complete message by now?
        -: 3087:     * If yes, finalize it, else ask to read the next record.
        -: 3088:     */
    #####: 3089:    if( ssl_bitmask_check( bitmask, msg_len ) != 0 )
        -: 3090:    {
    #####: 3091:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message is not complete yet" ) );
    #####: 3092:        return( MBEDTLS_ERR_SSL_CONTINUE_PROCESSING );
        -: 3093:    }
        -: 3094:
    #####: 3095:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake message completed" ) );
        -: 3096:
    #####: 3097:    if( frag_len + 12 < ssl->in_msglen )
        -: 3098:    {
        -: 3099:        /*
        -: 3100:         * We'got more handshake messages in the same record.
        -: 3101:         * This case is not handled now because no know implementation does
        -: 3102:         * that and it's hard to test, so we prefer to fail cleanly for now.
        -: 3103:         */
    #####: 3104:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "last fragment not alone in its record" ) );
    #####: 3105:        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
        -: 3106:    }
        -: 3107:
    #####: 3108:    if( ssl->in_left > ssl->next_record_offset )
        -: 3109:    {
        -: 3110:        /*
        -: 3111:         * We've got more data in the buffer after the current record,
        -: 3112:         * that we don't want to overwrite. Move it before writing the
        -: 3113:         * reassembled message, and adjust in_left and next_record_offset.
        -: 3114:         */
    #####: 3115:        unsigned char *cur_remain = ssl->in_hdr + ssl->next_record_offset;
    #####: 3116:        unsigned char *new_remain = ssl->in_msg + ssl->in_hslen;
    #####: 3117:        size_t remain_len = ssl->in_left - ssl->next_record_offset;
        -: 3118:
        -: 3119:        /* First compute and check new lengths */
    #####: 3120:        ssl->next_record_offset = new_remain - ssl->in_hdr;
    #####: 3121:        ssl->in_left = ssl->next_record_offset + remain_len;
        -: 3122:
    #####: 3123:        if( ssl->in_left > MBEDTLS_SSL_BUFFER_LEN -
    #####: 3124:                           (size_t)( ssl->in_hdr - ssl->in_buf ) )
        -: 3125:        {
    #####: 3126:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "reassembled message too large for buffer" ) );
    #####: 3127:            return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
        -: 3128:        }
        -: 3129:
    #####: 3130:        memmove( new_remain, cur_remain, remain_len );
        -: 3131:    }
        -: 3132:
    #####: 3133:    memcpy( ssl->in_msg, ssl->handshake->hs_msg, ssl->in_hslen );
        -: 3134:
    #####: 3135:    mbedtls_free( ssl->handshake->hs_msg );
    #####: 3136:    ssl->handshake->hs_msg = NULL;
        -: 3137:
    #####: 3138:    MBEDTLS_SSL_DEBUG_BUF( 3, "reassembled handshake message",
        -: 3139:                   ssl->in_msg, ssl->in_hslen );
        -: 3140:
    #####: 3141:    return( 0 );
        -: 3142:}
        -: 3143:#endif /* MBEDTLS_SSL_PROTO_DTLS */
        -: 3144:
    #####: 3145:int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
        -: 3146:{
    #####: 3147:    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
        -: 3148:    {
    #####: 3149:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
        -: 3150:                            ssl->in_msglen ) );
    #####: 3151:        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        -: 3152:    }
        -: 3153:
    #####: 3154:    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
    #####: 3155:                    ( ssl->in_msg[1] << 16 ) |
    #####: 3156:                    ( ssl->in_msg[2] << 8  ) |
    #####: 3157:                      ssl->in_msg[3] );
        -: 3158:
    #####: 3159:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "handshake message: msglen ="
        -: 3160:                        " %d, type = %d, hslen = %d",
        -: 3161:                        ssl->in_msglen, ssl->in_msg[0], ssl->in_hslen ) );
        -: 3162:
        -: 3163:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 3164:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 3165:    {
        -: 3166:        int ret;
    #####: 3167:        unsigned int recv_msg_seq = ( ssl->in_msg[4] << 8 ) | ssl->in_msg[5];
        -: 3168:
    #####: 3169:        if( ssl->handshake != NULL &&
    #####: 3170:            ( ( ssl->state   != MBEDTLS_SSL_HANDSHAKE_OVER &&
    #####: 3171:                recv_msg_seq != ssl->handshake->in_msg_seq ) ||
    #####: 3172:              ( ssl->state  == MBEDTLS_SSL_HANDSHAKE_OVER &&
    #####: 3173:                ssl->in_msg[0] != MBEDTLS_SSL_HS_CLIENT_HELLO ) ) )
        -: 3174:        {
        -: 3175:            /* Retransmit only on last message from previous flight, to avoid
        -: 3176:             * too many retransmissions.
        -: 3177:             * Besides, No sane server ever retransmits HelloVerifyRequest */
    #####: 3178:            if( recv_msg_seq == ssl->handshake->in_flight_start_seq - 1 &&
    #####: 3179:                ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST )
        -: 3180:            {
    #####: 3181:                MBEDTLS_SSL_DEBUG_MSG( 2, ( "received message from last flight, "
        -: 3182:                                    "message_seq = %d, start_of_flight = %d",
        -: 3183:                                    recv_msg_seq,
        -: 3184:                                    ssl->handshake->in_flight_start_seq ) );
        -: 3185:
    #####: 3186:                if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )
        -: 3187:                {
    #####: 3188:                    MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_resend", ret );
    #####: 3189:                    return( ret );
        -: 3190:                }
        -: 3191:            }
        -: 3192:            else
        -: 3193:            {
    #####: 3194:                MBEDTLS_SSL_DEBUG_MSG( 2, ( "dropping out-of-sequence message: "
        -: 3195:                                    "message_seq = %d, expected = %d",
        -: 3196:                                    recv_msg_seq,
        -: 3197:                                    ssl->handshake->in_msg_seq ) );
        -: 3198:            }
        -: 3199:
    #####: 3200:            return( MBEDTLS_ERR_SSL_CONTINUE_PROCESSING );
        -: 3201:        }
        -: 3202:        /* Wait until message completion to increment in_msg_seq */
        -: 3203:
        -: 3204:        /* Reassemble if current message is fragmented or reassembly is
        -: 3205:         * already in progress */
    #####: 3206:        if( ssl->in_msglen < ssl->in_hslen ||
    #####: 3207:            memcmp( ssl->in_msg + 6, "\0\0\0",        3 ) != 0 ||
    #####: 3208:            memcmp( ssl->in_msg + 9, ssl->in_msg + 1, 3 ) != 0 ||
    #####: 3209:            ( ssl->handshake != NULL && ssl->handshake->hs_msg != NULL ) )
        -: 3210:        {
    #####: 3211:            MBEDTLS_SSL_DEBUG_MSG( 2, ( "found fragmented DTLS handshake message" ) );
        -: 3212:
    #####: 3213:            if( ( ret = ssl_reassemble_dtls_handshake( ssl ) ) != 0 )
        -: 3214:            {
    #####: 3215:                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_reassemble_dtls_handshake", ret );
    #####: 3216:                return( ret );
        -: 3217:            }
        -: 3218:        }
        -: 3219:    }
        -: 3220:    else
        -: 3221:#endif /* MBEDTLS_SSL_PROTO_DTLS */
        -: 3222:    /* With TLS we don't handle fragmentation (for now) */
    #####: 3223:    if( ssl->in_msglen < ssl->in_hslen )
        -: 3224:    {
    #####: 3225:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
    #####: 3226:        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
        -: 3227:    }
        -: 3228:
    #####: 3229:    return( 0 );
        -: 3230:}
        -: 3231:
    #####: 3232:void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
        -: 3233:{
        -: 3234:
    #####: 3235:    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
    #####: 3236:        ssl->handshake != NULL )
        -: 3237:    {
    #####: 3238:        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
        -: 3239:    }
        -: 3240:
        -: 3241:    /* Handshake message is complete, increment counter */
        -: 3242:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 3243:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
    #####: 3244:        ssl->handshake != NULL )
        -: 3245:    {
    #####: 3246:        ssl->handshake->in_msg_seq++;
        -: 3247:    }
        -: 3248:#endif
    #####: 3249:}
        -: 3250:
        -: 3251:/*
        -: 3252: * DTLS anti-replay: RFC 6347 4.1.2.6
        -: 3253: *
        -: 3254: * in_window is a field of bits numbered from 0 (lsb) to 63 (msb).
        -: 3255: * Bit n is set iff record number in_window_top - n has been seen.
        -: 3256: *
        -: 3257: * Usually, in_window_top is the last record number seen and the lsb of
        -: 3258: * in_window is set. The only exception is the initial state (record number 0
        -: 3259: * not seen yet).
        -: 3260: */
        -: 3261:#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
        -: 3262:static void ssl_dtls_replay_reset( mbedtls_ssl_context *ssl )
        -: 3263:{
        -: 3264:    ssl->in_window_top = 0;
        -: 3265:    ssl->in_window = 0;
        -: 3266:}
        -: 3267:
        -: 3268:static inline uint64_t ssl_load_six_bytes( unsigned char *buf )
        -: 3269:{
        -: 3270:    return( ( (uint64_t) buf[0] << 40 ) |
        -: 3271:            ( (uint64_t) buf[1] << 32 ) |
        -: 3272:            ( (uint64_t) buf[2] << 24 ) |
        -: 3273:            ( (uint64_t) buf[3] << 16 ) |
        -: 3274:            ( (uint64_t) buf[4] <<  8 ) |
        -: 3275:            ( (uint64_t) buf[5]       ) );
        -: 3276:}
        -: 3277:
        -: 3278:/*
        -: 3279: * Return 0 if sequence number is acceptable, -1 otherwise
        -: 3280: */
        -: 3281:int mbedtls_ssl_dtls_replay_check( mbedtls_ssl_context *ssl )
        -: 3282:{
        -: 3283:    uint64_t rec_seqnum = ssl_load_six_bytes( ssl->in_ctr + 2 );
        -: 3284:    uint64_t bit;
        -: 3285:
        -: 3286:    if( ssl->conf->anti_replay == MBEDTLS_SSL_ANTI_REPLAY_DISABLED )
        -: 3287:        return( 0 );
        -: 3288:
        -: 3289:    if( rec_seqnum > ssl->in_window_top )
        -: 3290:        return( 0 );
        -: 3291:
        -: 3292:    bit = ssl->in_window_top - rec_seqnum;
        -: 3293:
        -: 3294:    if( bit >= 64 )
        -: 3295:        return( -1 );
        -: 3296:
        -: 3297:    if( ( ssl->in_window & ( (uint64_t) 1 << bit ) ) != 0 )
        -: 3298:        return( -1 );
        -: 3299:
        -: 3300:    return( 0 );
        -: 3301:}
        -: 3302:
        -: 3303:/*
        -: 3304: * Update replay window on new validated record
        -: 3305: */
        -: 3306:void mbedtls_ssl_dtls_replay_update( mbedtls_ssl_context *ssl )
        -: 3307:{
        -: 3308:    uint64_t rec_seqnum = ssl_load_six_bytes( ssl->in_ctr + 2 );
        -: 3309:
        -: 3310:    if( ssl->conf->anti_replay == MBEDTLS_SSL_ANTI_REPLAY_DISABLED )
        -: 3311:        return;
        -: 3312:
        -: 3313:    if( rec_seqnum > ssl->in_window_top )
        -: 3314:    {
        -: 3315:        /* Update window_top and the contents of the window */
        -: 3316:        uint64_t shift = rec_seqnum - ssl->in_window_top;
        -: 3317:
        -: 3318:        if( shift >= 64 )
        -: 3319:            ssl->in_window = 1;
        -: 3320:        else
        -: 3321:        {
        -: 3322:            ssl->in_window <<= shift;
        -: 3323:            ssl->in_window |= 1;
        -: 3324:        }
        -: 3325:
        -: 3326:        ssl->in_window_top = rec_seqnum;
        -: 3327:    }
        -: 3328:    else
        -: 3329:    {
        -: 3330:        /* Mark that number as seen in the current window */
        -: 3331:        uint64_t bit = ssl->in_window_top - rec_seqnum;
        -: 3332:
        -: 3333:        if( bit < 64 ) /* Always true, but be extra sure */
        -: 3334:            ssl->in_window |= (uint64_t) 1 << bit;
        -: 3335:    }
        -: 3336:}
        -: 3337:#endif /* MBEDTLS_SSL_DTLS_ANTI_REPLAY */
        -: 3338:
        -: 3339:#if defined(MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE) && defined(MBEDTLS_SSL_SRV_C)
        -: 3340:/* Forward declaration */
        -: 3341:static int ssl_session_reset_int( mbedtls_ssl_context *ssl, int partial );
        -: 3342:
        -: 3343:/*
        -: 3344: * Without any SSL context, check if a datagram looks like a ClientHello with
        -: 3345: * a valid cookie, and if it doesn't, generate a HelloVerifyRequest message.
        -: 3346: * Both input and output include full DTLS headers.
        -: 3347: *
        -: 3348: * - if cookie is valid, return 0
        -: 3349: * - if ClientHello looks superficially valid but cookie is not,
        -: 3350: *   fill obuf and set olen, then
        -: 3351: *   return MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED
        -: 3352: * - otherwise return a specific error code
        -: 3353: */
    #####: 3354:static int ssl_check_dtls_clihlo_cookie(
        -: 3355:                           mbedtls_ssl_cookie_write_t *f_cookie_write,
        -: 3356:                           mbedtls_ssl_cookie_check_t *f_cookie_check,
        -: 3357:                           void *p_cookie,
        -: 3358:                           const unsigned char *cli_id, size_t cli_id_len,
        -: 3359:                           const unsigned char *in, size_t in_len,
        -: 3360:                           unsigned char *obuf, size_t buf_len, size_t *olen )
        -: 3361:{
        -: 3362:    size_t sid_len, cookie_len;
        -: 3363:    unsigned char *p;
        -: 3364:
    #####: 3365:    if( f_cookie_write == NULL || f_cookie_check == NULL )
    #####: 3366:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 3367:
        -: 3368:    /*
        -: 3369:     * Structure of ClientHello with record and handshake headers,
        -: 3370:     * and expected values. We don't need to check a lot, more checks will be
        -: 3371:     * done when actually parsing the ClientHello - skipping those checks
        -: 3372:     * avoids code duplication and does not make cookie forging any easier.
        -: 3373:     *
        -: 3374:     *  0-0  ContentType type;                  copied, must be handshake
        -: 3375:     *  1-2  ProtocolVersion version;           copied
        -: 3376:     *  3-4  uint16 epoch;                      copied, must be 0
        -: 3377:     *  5-10 uint48 sequence_number;            copied
        -: 3378:     * 11-12 uint16 length;                     (ignored)
        -: 3379:     *
        -: 3380:     * 13-13 HandshakeType msg_type;            (ignored)
        -: 3381:     * 14-16 uint24 length;                     (ignored)
        -: 3382:     * 17-18 uint16 message_seq;                copied
        -: 3383:     * 19-21 uint24 fragment_offset;            copied, must be 0
        -: 3384:     * 22-24 uint24 fragment_length;            (ignored)
        -: 3385:     *
        -: 3386:     * 25-26 ProtocolVersion client_version;    (ignored)
        -: 3387:     * 27-58 Random random;                     (ignored)
        -: 3388:     * 59-xx SessionID session_id;              1 byte len + sid_len content
        -: 3389:     * 60+   opaque cookie<0..2^8-1>;           1 byte len + content
        -: 3390:     *       ...
        -: 3391:     *
        -: 3392:     * Minimum length is 61 bytes.
        -: 3393:     */
    #####: 3394:    if( in_len < 61 ||
    #####: 3395:        in[0] != MBEDTLS_SSL_MSG_HANDSHAKE ||
    #####: 3396:        in[3] != 0 || in[4] != 0 ||
    #####: 3397:        in[19] != 0 || in[20] != 0 || in[21] != 0 )
        -: 3398:    {
    #####: 3399:        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
        -: 3400:    }
        -: 3401:
    #####: 3402:    sid_len = in[59];
    #####: 3403:    if( sid_len > in_len - 61 )
    #####: 3404:        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
        -: 3405:
    #####: 3406:    cookie_len = in[60 + sid_len];
    #####: 3407:    if( cookie_len > in_len - 60 )
    #####: 3408:        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
        -: 3409:
    #####: 3410:    if( f_cookie_check( p_cookie, in + sid_len + 61, cookie_len,
        -: 3411:                        cli_id, cli_id_len ) == 0 )
        -: 3412:    {
        -: 3413:        /* Valid cookie */
    #####: 3414:        return( 0 );
        -: 3415:    }
        -: 3416:
        -: 3417:    /*
        -: 3418:     * If we get here, we've got an invalid cookie, let's prepare HVR.
        -: 3419:     *
        -: 3420:     *  0-0  ContentType type;                  copied
        -: 3421:     *  1-2  ProtocolVersion version;           copied
        -: 3422:     *  3-4  uint16 epoch;                      copied
        -: 3423:     *  5-10 uint48 sequence_number;            copied
        -: 3424:     * 11-12 uint16 length;                     olen - 13
        -: 3425:     *
        -: 3426:     * 13-13 HandshakeType msg_type;            hello_verify_request
        -: 3427:     * 14-16 uint24 length;                     olen - 25
        -: 3428:     * 17-18 uint16 message_seq;                copied
        -: 3429:     * 19-21 uint24 fragment_offset;            copied
        -: 3430:     * 22-24 uint24 fragment_length;            olen - 25
        -: 3431:     *
        -: 3432:     * 25-26 ProtocolVersion server_version;    0xfe 0xff
        -: 3433:     * 27-27 opaque cookie<0..2^8-1>;           cookie_len = olen - 27, cookie
        -: 3434:     *
        -: 3435:     * Minimum length is 28.
        -: 3436:     */
    #####: 3437:    if( buf_len < 28 )
    #####: 3438:        return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
        -: 3439:
        -: 3440:    /* Copy most fields and adapt others */
    #####: 3441:    memcpy( obuf, in, 25 );
    #####: 3442:    obuf[13] = MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST;
    #####: 3443:    obuf[25] = 0xfe;
    #####: 3444:    obuf[26] = 0xff;
        -: 3445:
        -: 3446:    /* Generate and write actual cookie */
    #####: 3447:    p = obuf + 28;
    #####: 3448:    if( f_cookie_write( p_cookie,
        -: 3449:                        &p, obuf + buf_len, cli_id, cli_id_len ) != 0 )
        -: 3450:    {
    #####: 3451:        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 3452:    }
        -: 3453:
    #####: 3454:    *olen = p - obuf;
        -: 3455:
        -: 3456:    /* Go back and fill length fields */
    #####: 3457:    obuf[27] = (unsigned char)( *olen - 28 );
        -: 3458:
    #####: 3459:    obuf[14] = obuf[22] = (unsigned char)( ( *olen - 25 ) >> 16 );
    #####: 3460:    obuf[15] = obuf[23] = (unsigned char)( ( *olen - 25 ) >>  8 );
    #####: 3461:    obuf[16] = obuf[24] = (unsigned char)( ( *olen - 25 )       );
        -: 3462:
    #####: 3463:    obuf[11] = (unsigned char)( ( *olen - 13 ) >>  8 );
    #####: 3464:    obuf[12] = (unsigned char)( ( *olen - 13 )       );
        -: 3465:
    #####: 3466:    return( MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED );
        -: 3467:}
        -: 3468:
        -: 3469:/*
        -: 3470: * Handle possible client reconnect with the same UDP quadruplet
        -: 3471: * (RFC 6347 Section 4.2.8).
        -: 3472: *
        -: 3473: * Called by ssl_parse_record_header() in case we receive an epoch 0 record
        -: 3474: * that looks like a ClientHello.
        -: 3475: *
        -: 3476: * - if the input looks like a ClientHello without cookies,
        -: 3477: *   send back HelloVerifyRequest, then
        -: 3478: *   return MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED
        -: 3479: * - if the input looks like a ClientHello with a valid cookie,
        -: 3480: *   reset the session of the current context, and
        -: 3481: *   return MBEDTLS_ERR_SSL_CLIENT_RECONNECT
        -: 3482: * - if anything goes wrong, return a specific error code
        -: 3483: *
        -: 3484: * mbedtls_ssl_read_record() will ignore the record if anything else than
        -: 3485: * MBEDTLS_ERR_SSL_CLIENT_RECONNECT or 0 is returned, although this function
        -: 3486: * cannot not return 0.
        -: 3487: */
    #####: 3488:static int ssl_handle_possible_reconnect( mbedtls_ssl_context *ssl )
        -: 3489:{
        -: 3490:    int ret;
        -: 3491:    size_t len;
        -: 3492:
    #####: 3493:    ret = ssl_check_dtls_clihlo_cookie(
    #####: 3494:            ssl->conf->f_cookie_write,
    #####: 3495:            ssl->conf->f_cookie_check,
    #####: 3496:            ssl->conf->p_cookie,
    #####: 3497:            ssl->cli_id, ssl->cli_id_len,
    #####: 3498:            ssl->in_buf, ssl->in_left,
        -: 3499:            ssl->out_buf, MBEDTLS_SSL_MAX_CONTENT_LEN, &len );
        -: 3500:
    #####: 3501:    MBEDTLS_SSL_DEBUG_RET( 2, "ssl_check_dtls_clihlo_cookie", ret );
        -: 3502:
    #####: 3503:    if( ret == MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED )
        -: 3504:    {
        -: 3505:        /* Don't check write errors as we can't do anything here.
        -: 3506:         * If the error is permanent we'll catch it later,
        -: 3507:         * if it's not, then hopefully it'll work next time. */
    #####: 3508:        (void) ssl->f_send( ssl->p_bio, ssl->out_buf, len );
        -: 3509:
    #####: 3510:        return( MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED );
        -: 3511:    }
        -: 3512:
    #####: 3513:    if( ret == 0 )
        -: 3514:    {
        -: 3515:        /* Got a valid cookie, partially reset context */
    #####: 3516:        if( ( ret = ssl_session_reset_int( ssl, 1 ) ) != 0 )
        -: 3517:        {
    #####: 3518:            MBEDTLS_SSL_DEBUG_RET( 1, "reset", ret );
    #####: 3519:            return( ret );
        -: 3520:        }
        -: 3521:
    #####: 3522:        return( MBEDTLS_ERR_SSL_CLIENT_RECONNECT );
        -: 3523:    }
        -: 3524:
    #####: 3525:    return( ret );
        -: 3526:}
        -: 3527:#endif /* MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE && MBEDTLS_SSL_SRV_C */
        -: 3528:
        -: 3529:/*
        -: 3530: * ContentType type;
        -: 3531: * ProtocolVersion version;
        -: 3532: * uint16 epoch;            // DTLS only
        -: 3533: * uint48 sequence_number;  // DTLS only
        -: 3534: * uint16 length;
        -: 3535: *
        -: 3536: * Return 0 if header looks sane (and, for DTLS, the record is expected)
        -: 3537: * MBEDTLS_ERR_SSL_INVALID_RECORD if the header looks bad,
        -: 3538: * MBEDTLS_ERR_SSL_UNEXPECTED_RECORD (DTLS only) if sane but unexpected.
        -: 3539: *
        -: 3540: * With DTLS, mbedtls_ssl_read_record() will:
        -: 3541: * 1. proceed with the record if this function returns 0
        -: 3542: * 2. drop only the current record if this function returns UNEXPECTED_RECORD
        -: 3543: * 3. return CLIENT_RECONNECT if this function return that value
        -: 3544: * 4. drop the whole datagram if this function returns anything else.
        -: 3545: * Point 2 is needed when the peer is resending, and we have already received
        -: 3546: * the first record from a datagram but are still waiting for the others.
        -: 3547: */
    #####: 3548:static int ssl_parse_record_header( mbedtls_ssl_context *ssl )
        -: 3549:{
        -: 3550:    int major_ver, minor_ver;
        -: 3551:
    #####: 3552:    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );
        -: 3553:
    #####: 3554:    ssl->in_msgtype =  ssl->in_hdr[0];
    #####: 3555:    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
    #####: 3556:    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
        -: 3557:
    #####: 3558:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
        -: 3559:                        "version = [%d:%d], msglen = %d",
        -: 3560:                        ssl->in_msgtype,
        -: 3561:                        major_ver, minor_ver, ssl->in_msglen ) );
        -: 3562:
        -: 3563:    /* Check record type */
    #####: 3564:    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
    #####: 3565:        ssl->in_msgtype != MBEDTLS_SSL_MSG_ALERT &&
    #####: 3566:        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
    #####: 3567:        ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
        -: 3568:    {
    #####: 3569:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "unknown record type" ) );
        -: 3570:
        -: 3571:#if defined(MBEDTLS_SSL_PROTO_DTLS)
        -: 3572:        /* Silently ignore invalid DTLS records as recommended by RFC 6347
        -: 3573:         * Section 4.1.2.7 */
    #####: 3574:        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 3575:#endif /* MBEDTLS_SSL_PROTO_DTLS */
    #####: 3576:            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 3577:                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        -: 3578:
    #####: 3579:        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        -: 3580:    }
        -: 3581:
        -: 3582:    /* Check version */
    #####: 3583:    if( major_ver != ssl->major_ver )
        -: 3584:    {
    #####: 3585:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
    #####: 3586:        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        -: 3587:    }
        -: 3588:
    #####: 3589:    if( minor_ver > ssl->conf->max_minor_ver )
        -: 3590:    {
    #####: 3591:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
    #####: 3592:        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        -: 3593:    }
        -: 3594:
        -: 3595:    /* Check length against the size of our buffer */
    #####: 3596:    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
    #####: 3597:                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
        -: 3598:    {
    #####: 3599:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
    #####: 3600:        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        -: 3601:    }
        -: 3602:
        -: 3603:    /*
        -: 3604:     * DTLS-related tests.
        -: 3605:     * Check epoch before checking length constraint because
        -: 3606:     * the latter varies with the epoch. E.g., if a ChangeCipherSpec
        -: 3607:     * message gets duplicated before the corresponding Finished message,
        -: 3608:     * the second ChangeCipherSpec should be discarded because it belongs
        -: 3609:     * to an old epoch, but not because its length is shorter than
        -: 3610:     * the minimum record length for packets using the new record transform.
        -: 3611:     * Note that these two kinds of failures are handled differently,
        -: 3612:     * as an unexpected record is silently skipped but an invalid
        -: 3613:     * record leads to the entire datagram being dropped.
        -: 3614:     */
        -: 3615:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 3616:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 3617:    {
    #####: 3618:        unsigned int rec_epoch = ( ssl->in_ctr[0] << 8 ) | ssl->in_ctr[1];
        -: 3619:
        -: 3620:        /* Check epoch (and sequence number) with DTLS */
    #####: 3621:        if( rec_epoch != ssl->in_epoch )
        -: 3622:        {
    #####: 3623:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "record from another epoch: "
        -: 3624:                                        "expected %d, received %d",
        -: 3625:                                        ssl->in_epoch, rec_epoch ) );
        -: 3626:
        -: 3627:#if defined(MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE) && defined(MBEDTLS_SSL_SRV_C)
        -: 3628:            /*
        -: 3629:             * Check for an epoch 0 ClientHello. We can't use in_msg here to
        -: 3630:             * access the first byte of record content (handshake type), as we
        -: 3631:             * have an active transform (possibly iv_len != 0), so use the
        -: 3632:             * fact that the record header len is 13 instead.
        -: 3633:             */
    #####: 3634:            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
    #####: 3635:                ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER &&
    #####: 3636:                rec_epoch == 0 &&
    #####: 3637:                ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
    #####: 3638:                ssl->in_left > 13 &&
    #####: 3639:                ssl->in_buf[13] == MBEDTLS_SSL_HS_CLIENT_HELLO )
        -: 3640:            {
    #####: 3641:                MBEDTLS_SSL_DEBUG_MSG( 1, ( "possible client reconnect "
        -: 3642:                                            "from the same port" ) );
    #####: 3643:                return( ssl_handle_possible_reconnect( ssl ) );
        -: 3644:            }
        -: 3645:            else
        -: 3646:#endif /* MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE && MBEDTLS_SSL_SRV_C */
    #####: 3647:                return( MBEDTLS_ERR_SSL_UNEXPECTED_RECORD );
        -: 3648:        }
        -: 3649:
        -: 3650:#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
        -: 3651:        /* Replay detection only works for the current epoch */
        -: 3652:        if( rec_epoch == ssl->in_epoch &&
        -: 3653:            mbedtls_ssl_dtls_replay_check( ssl ) != 0 )
        -: 3654:        {
        -: 3655:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "replayed record" ) );
        -: 3656:            return( MBEDTLS_ERR_SSL_UNEXPECTED_RECORD );
        -: 3657:        }
        -: 3658:#endif
        -: 3659:
        -: 3660:        /* Drop unexpected ChangeCipherSpec messages */
    #####: 3661:        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
    #####: 3662:            ssl->state != MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC &&
    #####: 3663:            ssl->state != MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC )
        -: 3664:        {
    #####: 3665:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "dropping unexpected ChangeCipherSpec" ) );
    #####: 3666:            return( MBEDTLS_ERR_SSL_UNEXPECTED_RECORD );
        -: 3667:        }
        -: 3668:
        -: 3669:        /* Drop unexpected ApplicationData records,
        -: 3670:         * except at the beginning of renegotiations */
    #####: 3671:        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA &&
    #####: 3672:            ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER
        -: 3673:#if defined(MBEDTLS_SSL_RENEGOTIATION)
        -: 3674:            && ! ( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&
        -: 3675:                   ssl->state == MBEDTLS_SSL_SERVER_HELLO )
        -: 3676:#endif
        -: 3677:            )
        -: 3678:        {
    #####: 3679:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "dropping unexpected ApplicationData" ) );
    #####: 3680:            return( MBEDTLS_ERR_SSL_UNEXPECTED_RECORD );
        -: 3681:        }
        -: 3682:    }
        -: 3683:#endif /* MBEDTLS_SSL_PROTO_DTLS */
        -: 3684:
        -: 3685:
        -: 3686:    /* Check length against bounds of the current transform and version */
    #####: 3687:    if( ssl->transform_in == NULL )
        -: 3688:    {
    #####: 3689:        if( ssl->in_msglen < 1 ||
    #####: 3690:            ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
        -: 3691:        {
    #####: 3692:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
    #####: 3693:            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        -: 3694:        }
        -: 3695:    }
        -: 3696:    else
        -: 3697:    {
    #####: 3698:        if( ssl->in_msglen < ssl->transform_in->minlen )
        -: 3699:        {
    #####: 3700:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
    #####: 3701:            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        -: 3702:        }
        -: 3703:
        -: 3704:#if defined(MBEDTLS_SSL_PROTO_SSL3)
        -: 3705:        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 &&
        -: 3706:            ssl->in_msglen > ssl->transform_in->minlen + MBEDTLS_SSL_MAX_CONTENT_LEN )
        -: 3707:        {
        -: 3708:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
        -: 3709:            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        -: 3710:        }
        -: 3711:#endif
        -: 3712:#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        -: 3713:    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        -: 3714:        /*
        -: 3715:         * TLS encrypted messages can have up to 256 bytes of padding
        -: 3716:         */
    #####: 3717:        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
    #####: 3718:            ssl->in_msglen > ssl->transform_in->minlen +
    #####: 3719:                             MBEDTLS_SSL_MAX_CONTENT_LEN + 256 )
        -: 3720:        {
    #####: 3721:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
    #####: 3722:            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        -: 3723:        }
        -: 3724:#endif
        -: 3725:    }
        -: 3726:
    #####: 3727:    return( 0 );
        -: 3728:}
        -: 3729:
        -: 3730:/*
        -: 3731: * If applicable, decrypt (and decompress) record content
        -: 3732: */
    #####: 3733:static int ssl_prepare_record_content( mbedtls_ssl_context *ssl )
        -: 3734:{
    #####: 3735:    int ret, done = 0;
        -: 3736:
    #####: 3737:    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
        -: 3738:                   ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->in_msglen );
        -: 3739:
        -: 3740:#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
        -: 3741:    if( mbedtls_ssl_hw_record_read != NULL )
        -: 3742:    {
        -: 3743:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "going for mbedtls_ssl_hw_record_read()" ) );
        -: 3744:
        -: 3745:        ret = mbedtls_ssl_hw_record_read( ssl );
        -: 3746:        if( ret != 0 && ret != MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH )
        -: 3747:        {
        -: 3748:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_read", ret );
        -: 3749:            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        -: 3750:        }
        -: 3751:
        -: 3752:        if( ret == 0 )
        -: 3753:            done = 1;
        -: 3754:    }
        -: 3755:#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    #####: 3756:    if( !done && ssl->transform_in != NULL )
        -: 3757:    {
    #####: 3758:        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
        -: 3759:        {
    #####: 3760:            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
    #####: 3761:            return( ret );
        -: 3762:        }
        -: 3763:
    #####: 3764:        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
        -: 3765:                       ssl->in_msg, ssl->in_msglen );
        -: 3766:
    #####: 3767:        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
        -: 3768:        {
    #####: 3769:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
    #####: 3770:            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        -: 3771:        }
        -: 3772:    }
        -: 3773:
        -: 3774:#if defined(MBEDTLS_ZLIB_SUPPORT)
        -: 3775:    if( ssl->transform_in != NULL &&
        -: 3776:        ssl->session_in->compression == MBEDTLS_SSL_COMPRESS_DEFLATE )
        -: 3777:    {
        -: 3778:        if( ( ret = ssl_decompress_buf( ssl ) ) != 0 )
        -: 3779:        {
        -: 3780:            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decompress_buf", ret );
        -: 3781:            return( ret );
        -: 3782:        }
        -: 3783:    }
        -: 3784:#endif /* MBEDTLS_ZLIB_SUPPORT */
        -: 3785:
        -: 3786:#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
        -: 3787:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 3788:    {
        -: 3789:        mbedtls_ssl_dtls_replay_update( ssl );
        -: 3790:    }
        -: 3791:#endif
        -: 3792:
    #####: 3793:    return( 0 );
        -: 3794:}
        -: 3795:
        -: 3796:static void ssl_handshake_wrapup_free_hs_transform( mbedtls_ssl_context *ssl );
        -: 3797:
        -: 3798:/*
        -: 3799: * Read a record.
        -: 3800: *
        -: 3801: * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
        -: 3802: * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
        -: 3803: *
        -: 3804: */
    #####: 3805:int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
        -: 3806:{
        -: 3807:    int ret;
        -: 3808:
    #####: 3809:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
        -: 3810:
    #####: 3811:    if( ssl->keep_current_message == 0 )
        -: 3812:    {
        -: 3813:        do {
        -: 3814:
    #####: 3815:            do ret = mbedtls_ssl_read_record_layer( ssl );
    #####: 3816:            while( ret == MBEDTLS_ERR_SSL_CONTINUE_PROCESSING );
        -: 3817:
    #####: 3818:            if( ret != 0 )
        -: 3819:            {
    #####: 3820:                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
    #####: 3821:                return( ret );
        -: 3822:            }
        -: 3823:
    #####: 3824:            ret = mbedtls_ssl_handle_message_type( ssl );
        -: 3825:
    #####: 3826:        } while( MBEDTLS_ERR_SSL_NON_FATAL           == ret  ||
    #####: 3827:                 MBEDTLS_ERR_SSL_CONTINUE_PROCESSING == ret );
        -: 3828:
    #####: 3829:        if( 0 != ret )
        -: 3830:        {
    #####: 3831:            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_handle_message_type" ), ret );
    #####: 3832:            return( ret );
        -: 3833:        }
        -: 3834:
    #####: 3835:        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
        -: 3836:        {
    #####: 3837:            mbedtls_ssl_update_handshake_status( ssl );
        -: 3838:        }
        -: 3839:    }
        -: 3840:    else
        -: 3841:    {
    #####: 3842:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
    #####: 3843:        ssl->keep_current_message = 0;
        -: 3844:    }
        -: 3845:
    #####: 3846:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );
        -: 3847:
    #####: 3848:    return( 0 );
        -: 3849:}
        -: 3850:
    #####: 3851:int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
        -: 3852:{
        -: 3853:    int ret;
        -: 3854:
        -: 3855:    /*
        -: 3856:     * Step A
        -: 3857:     *
        -: 3858:     * Consume last content-layer message and potentially
        -: 3859:     * update in_msglen which keeps track of the contents'
        -: 3860:     * consumption state.
        -: 3861:     *
        -: 3862:     * (1) Handshake messages:
        -: 3863:     *     Remove last handshake message, move content
        -: 3864:     *     and adapt in_msglen.
        -: 3865:     *
        -: 3866:     * (2) Alert messages:
        -: 3867:     *     Consume whole record content, in_msglen = 0.
        -: 3868:     *
        -: 3869:     * (3) Change cipher spec:
        -: 3870:     *     Consume whole record content, in_msglen = 0.
        -: 3871:     *
        -: 3872:     * (4) Application data:
        -: 3873:     *     Don't do anything - the record layer provides
        -: 3874:     *     the application data as a stream transport
        -: 3875:     *     and consumes through mbedtls_ssl_read only.
        -: 3876:     *
        -: 3877:     */
        -: 3878:
        -: 3879:    /* Case (1): Handshake messages */
    #####: 3880:    if( ssl->in_hslen != 0 )
        -: 3881:    {
        -: 3882:        /* Hard assertion to be sure that no application data
        -: 3883:         * is in flight, as corrupting ssl->in_msglen during
        -: 3884:         * ssl->in_offt != NULL is fatal. */
    #####: 3885:        if( ssl->in_offt != NULL )
        -: 3886:        {
    #####: 3887:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 3888:            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 3889:        }
        -: 3890:
        -: 3891:        /*
        -: 3892:         * Get next Handshake message in the current record
        -: 3893:         */
        -: 3894:
        -: 3895:        /* Notes:
        -: 3896:         * (1) in_hslen is not necessarily the size of the
        -: 3897:         *     current handshake content: If DTLS handshake
        -: 3898:         *     fragmentation is used, that's the fragment
        -: 3899:         *     size instead. Using the total handshake message
        -: 3900:         *     size here is faulty and should be changed at
        -: 3901:         *     some point.
        -: 3902:         * (2) While it doesn't seem to cause problems, one
        -: 3903:         *     has to be very careful not to assume that in_hslen
        -: 3904:         *     is always <= in_msglen in a sensible communication.
        -: 3905:         *     Again, it's wrong for DTLS handshake fragmentation.
        -: 3906:         *     The following check is therefore mandatory, and
        -: 3907:         *     should not be treated as a silently corrected assertion.
        -: 3908:         *     Additionally, ssl->in_hslen might be arbitrarily out of
        -: 3909:         *     bounds after handling a DTLS message with an unexpected
        -: 3910:         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
        -: 3911:         */
    #####: 3912:        if( ssl->in_hslen < ssl->in_msglen )
        -: 3913:        {
    #####: 3914:            ssl->in_msglen -= ssl->in_hslen;
    #####: 3915:            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
        -: 3916:                     ssl->in_msglen );
        -: 3917:
    #####: 3918:            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
        -: 3919:                                   ssl->in_msg, ssl->in_msglen );
        -: 3920:        }
        -: 3921:        else
        -: 3922:        {
    #####: 3923:            ssl->in_msglen = 0;
        -: 3924:        }
        -: 3925:
    #####: 3926:        ssl->in_hslen   = 0;
        -: 3927:    }
        -: 3928:    /* Case (4): Application data */
    #####: 3929:    else if( ssl->in_offt != NULL )
        -: 3930:    {
    #####: 3931:        return( 0 );
        -: 3932:    }
        -: 3933:    /* Everything else (CCS & Alerts) */
        -: 3934:    else
        -: 3935:    {
    #####: 3936:        ssl->in_msglen = 0;
        -: 3937:    }
        -: 3938:
        -: 3939:    /*
        -: 3940:     * Step B
        -: 3941:     *
        -: 3942:     * Fetch and decode new record if current one is fully consumed.
        -: 3943:     *
        -: 3944:     */
        -: 3945:
    #####: 3946:    if( ssl->in_msglen > 0 )
        -: 3947:    {
        -: 3948:        /* There's something left to be processed in the current record. */
    #####: 3949:        return( 0 );
        -: 3950:    }
        -: 3951:
        -: 3952:    /* Current record either fully processed or to be discarded. */
        -: 3953:
    #####: 3954:    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
        -: 3955:    {
    #####: 3956:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
    #####: 3957:        return( ret );
        -: 3958:    }
        -: 3959:
    #####: 3960:    if( ( ret = ssl_parse_record_header( ssl ) ) != 0 )
        -: 3961:    {
        -: 3962:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 3963:        if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
        -: 3964:            ret != MBEDTLS_ERR_SSL_CLIENT_RECONNECT )
        -: 3965:        {
    #####: 3966:            if( ret == MBEDTLS_ERR_SSL_UNEXPECTED_RECORD )
        -: 3967:            {
        -: 3968:                /* Skip unexpected record (but not whole datagram) */
    #####: 3969:                ssl->next_record_offset = ssl->in_msglen
    #####: 3970:                                        + mbedtls_ssl_hdr_len( ssl );
        -: 3971:
    #####: 3972:                MBEDTLS_SSL_DEBUG_MSG( 1, ( "discarding unexpected record "
        -: 3973:                                            "(header)" ) );
        -: 3974:            }
        -: 3975:            else
        -: 3976:            {
        -: 3977:                /* Skip invalid record and the rest of the datagram */
    #####: 3978:                ssl->next_record_offset = 0;
    #####: 3979:                ssl->in_left = 0;
        -: 3980:
    #####: 3981:                MBEDTLS_SSL_DEBUG_MSG( 1, ( "discarding invalid record "
        -: 3982:                                            "(header)" ) );
        -: 3983:            }
        -: 3984:
        -: 3985:            /* Get next record */
    #####: 3986:            return( MBEDTLS_ERR_SSL_CONTINUE_PROCESSING );
        -: 3987:        }
        -: 3988:#endif
    #####: 3989:        return( ret );
        -: 3990:    }
        -: 3991:
        -: 3992:    /*
        -: 3993:     * Read and optionally decrypt the message contents
        -: 3994:     */
    #####: 3995:    if( ( ret = mbedtls_ssl_fetch_input( ssl,
    #####: 3996:                                 mbedtls_ssl_hdr_len( ssl ) + ssl->in_msglen ) ) != 0 )
        -: 3997:    {
    #####: 3998:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
    #####: 3999:        return( ret );
        -: 4000:    }
        -: 4001:
        -: 4002:    /* Done reading this record, get ready for the next one */
        -: 4003:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 4004:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 4005:    {
    #####: 4006:        ssl->next_record_offset = ssl->in_msglen + mbedtls_ssl_hdr_len( ssl );
    #####: 4007:        if( ssl->next_record_offset < ssl->in_left )
        -: 4008:        {
    #####: 4009:            MBEDTLS_SSL_DEBUG_MSG( 3, ( "more than one record within datagram" ) );
        -: 4010:        }
        -: 4011:    }
        -: 4012:    else
        -: 4013:#endif
    #####: 4014:        ssl->in_left = 0;
        -: 4015:
    #####: 4016:    if( ( ret = ssl_prepare_record_content( ssl ) ) != 0 )
        -: 4017:    {
        -: 4018:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 4019:        if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 4020:        {
        -: 4021:            /* Silently discard invalid records */
    #####: 4022:            if( ret == MBEDTLS_ERR_SSL_INVALID_RECORD ||
        -: 4023:                ret == MBEDTLS_ERR_SSL_INVALID_MAC )
        -: 4024:            {
        -: 4025:                /* Except when waiting for Finished as a bad mac here
        -: 4026:                 * probably means something went wrong in the handshake
        -: 4027:                 * (eg wrong psk used, mitm downgrade attempt, etc.) */
    #####: 4028:                if( ssl->state == MBEDTLS_SSL_CLIENT_FINISHED ||
    #####: 4029:                    ssl->state == MBEDTLS_SSL_SERVER_FINISHED )
        -: 4030:                {
        -: 4031:#if defined(MBEDTLS_SSL_ALL_ALERT_MESSAGES)
    #####: 4032:                    if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )
        -: 4033:                    {
    #####: 4034:                        mbedtls_ssl_send_alert_message( ssl,
        -: 4035:                                MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 4036:                                MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC );
        -: 4037:                    }
        -: 4038:#endif
    #####: 4039:                    return( ret );
        -: 4040:                }
        -: 4041:
        -: 4042:#if defined(MBEDTLS_SSL_DTLS_BADMAC_LIMIT)
        -: 4043:                if( ssl->conf->badmac_limit != 0 &&
        -: 4044:                    ++ssl->badmac_seen >= ssl->conf->badmac_limit )
        -: 4045:                {
        -: 4046:                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "too many records with bad MAC" ) );
        -: 4047:                    return( MBEDTLS_ERR_SSL_INVALID_MAC );
        -: 4048:                }
        -: 4049:#endif
        -: 4050:
        -: 4051:                /* As above, invalid records cause
        -: 4052:                 * dismissal of the whole datagram. */
        -: 4053:
    #####: 4054:                ssl->next_record_offset = 0;
    #####: 4055:                ssl->in_left = 0;
        -: 4056:
    #####: 4057:                MBEDTLS_SSL_DEBUG_MSG( 1, ( "discarding invalid record (mac)" ) );
    #####: 4058:                return( MBEDTLS_ERR_SSL_CONTINUE_PROCESSING );
        -: 4059:            }
        -: 4060:
    #####: 4061:            return( ret );
        -: 4062:        }
        -: 4063:        else
        -: 4064:#endif
        -: 4065:        {
        -: 4066:            /* Error out (and send alert) on invalid records */
        -: 4067:#if defined(MBEDTLS_SSL_ALL_ALERT_MESSAGES)
    #####: 4068:            if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )
        -: 4069:            {
    #####: 4070:                mbedtls_ssl_send_alert_message( ssl,
        -: 4071:                        MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 4072:                        MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC );
        -: 4073:            }
        -: 4074:#endif
    #####: 4075:            return( ret );
        -: 4076:        }
        -: 4077:    }
        -: 4078:
    #####: 4079:    return( 0 );
        -: 4080:}
        -: 4081:
    #####: 4082:int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
        -: 4083:{
        -: 4084:    int ret;
        -: 4085:
        -: 4086:    /*
        -: 4087:     * Handle particular types of records
        -: 4088:     */
    #####: 4089:    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
        -: 4090:    {
    #####: 4091:        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
        -: 4092:        {
    #####: 4093:            return( ret );
        -: 4094:        }
        -: 4095:    }
        -: 4096:
    #####: 4097:    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
        -: 4098:    {
    #####: 4099:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "got an alert message, type: [%d:%d]",
        -: 4100:                       ssl->in_msg[0], ssl->in_msg[1] ) );
        -: 4101:
        -: 4102:        /*
        -: 4103:         * Ignore non-fatal alerts, except close_notify and no_renegotiation
        -: 4104:         */
    #####: 4105:        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
        -: 4106:        {
    #####: 4107:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
        -: 4108:                           ssl->in_msg[1] ) );
    #####: 4109:            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        -: 4110:        }
        -: 4111:
    #####: 4112:        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
    #####: 4113:            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
        -: 4114:        {
    #####: 4115:            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
    #####: 4116:            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
        -: 4117:        }
        -: 4118:
        -: 4119:#if defined(MBEDTLS_SSL_RENEGOTIATION_ENABLED)
    #####: 4120:        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
    #####: 4121:            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION )
        -: 4122:        {
    #####: 4123:            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no renegotiation alert" ) );
        -: 4124:            /* Will be handled when trying to parse ServerHello */
    #####: 4125:            return( 0 );
        -: 4126:        }
        -: 4127:#endif
        -: 4128:
        -: 4129:#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_SRV_C)
        -: 4130:        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 &&
        -: 4131:            ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
        -: 4132:            ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
        -: 4133:            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_NO_CERT )
        -: 4134:        {
        -: 4135:            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no_cert" ) );
        -: 4136:            /* Will be handled in mbedtls_ssl_parse_certificate() */
        -: 4137:            return( 0 );
        -: 4138:        }
        -: 4139:#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */
        -: 4140:
        -: 4141:        /* Silently ignore: fetch new message */
    #####: 4142:        return MBEDTLS_ERR_SSL_NON_FATAL;
        -: 4143:    }
        -: 4144:
        -: 4145:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 4146:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
    #####: 4147:        ssl->handshake != NULL &&
    #####: 4148:        ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER  )
        -: 4149:    {
    #####: 4150:        ssl_handshake_wrapup_free_hs_transform( ssl );
        -: 4151:    }
        -: 4152:#endif
        -: 4153:
    #####: 4154:    return( 0 );
        -: 4155:}
        -: 4156:
    #####: 4157:int mbedtls_ssl_send_fatal_handshake_failure( mbedtls_ssl_context *ssl )
        -: 4158:{
        -: 4159:    int ret;
        -: 4160:
    #####: 4161:    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
        -: 4162:                    MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 4163:                    MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE ) ) != 0 )
        -: 4164:    {
    #####: 4165:        return( ret );
        -: 4166:    }
        -: 4167:
    #####: 4168:    return( 0 );
        -: 4169:}
        -: 4170:
    #####: 4171:int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
        -: 4172:                            unsigned char level,
        -: 4173:                            unsigned char message )
        -: 4174:{
        -: 4175:    int ret;
        -: 4176:
    #####: 4177:    if( ssl == NULL || ssl->conf == NULL )
    #####: 4178:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 4179:
    #####: 4180:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
    #####: 4181:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));
        -: 4182:
    #####: 4183:    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
    #####: 4184:    ssl->out_msglen = 2;
    #####: 4185:    ssl->out_msg[0] = level;
    #####: 4186:    ssl->out_msg[1] = message;
        -: 4187:
    #####: 4188:    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
        -: 4189:    {
    #####: 4190:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
    #####: 4191:        return( ret );
        -: 4192:    }
    #####: 4193:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );
        -: 4194:
    #####: 4195:    return( 0 );
        -: 4196:}
        -: 4197:
        -: 4198:/*
        -: 4199: * Handshake functions
        -: 4200: */
        -: 4201:#if !defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)         && \
        -: 4202:    !defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)     && \
        -: 4203:    !defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)     && \
        -: 4204:    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)   && \
        -: 4205:    !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) && \
        -: 4206:    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)    && \
        -: 4207:    !defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
        -: 4208:/* No certificate support -> dummy functions */
    #####: 4209:int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
        -: 4210:{
    #####: 4211:    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
        -: 4212:
    #####: 4213:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
        -: 4214:
    #####: 4215:    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
    #####: 4216:        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
    #####: 4217:        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
    #####: 4218:        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
        -: 4219:    {
    #####: 4220:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
    #####: 4221:        ssl->state++;
    #####: 4222:        return( 0 );
        -: 4223:    }
        -: 4224:
    #####: 4225:    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 4226:    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 4227:}
        -: 4228:
    #####: 4229:int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
        -: 4230:{
    #####: 4231:    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
        -: 4232:
    #####: 4233:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
        -: 4234:
    #####: 4235:    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
    #####: 4236:        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
    #####: 4237:        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
    #####: 4238:        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
        -: 4239:    {
    #####: 4240:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
    #####: 4241:        ssl->state++;
    #####: 4242:        return( 0 );
        -: 4243:    }
        -: 4244:
    #####: 4245:    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 4246:    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 4247:}
        -: 4248:
        -: 4249:#else
        -: 4250:/* Some certificate support -> implement write and parse */
        -: 4251:
        -: 4252:int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
        -: 4253:{
        -: 4254:    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
        -: 4255:    size_t i, n;
        -: 4256:    const mbedtls_x509_crt *crt;
        -: 4257:    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
        -: 4258:
        -: 4259:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
        -: 4260:
        -: 4261:    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
        -: 4262:        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        -: 4263:        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        -: 4264:        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
        -: 4265:    {
        -: 4266:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        -: 4267:        ssl->state++;
        -: 4268:        return( 0 );
        -: 4269:    }
        -: 4270:
        -: 4271:#if defined(MBEDTLS_SSL_CLI_C)
        -: 4272:    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
        -: 4273:    {
        -: 4274:        if( ssl->client_auth == 0 )
        -: 4275:        {
        -: 4276:            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        -: 4277:            ssl->state++;
        -: 4278:            return( 0 );
        -: 4279:        }
        -: 4280:
        -: 4281:#if defined(MBEDTLS_SSL_PROTO_SSL3)
        -: 4282:        /*
        -: 4283:         * If using SSLv3 and got no cert, send an Alert message
        -: 4284:         * (otherwise an empty Certificate message will be sent).
        -: 4285:         */
        -: 4286:        if( mbedtls_ssl_own_cert( ssl )  == NULL &&
        -: 4287:            ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
        -: 4288:        {
        -: 4289:            ssl->out_msglen  = 2;
        -: 4290:            ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
        -: 4291:            ssl->out_msg[0]  = MBEDTLS_SSL_ALERT_LEVEL_WARNING;
        -: 4292:            ssl->out_msg[1]  = MBEDTLS_SSL_ALERT_MSG_NO_CERT;
        -: 4293:
        -: 4294:            MBEDTLS_SSL_DEBUG_MSG( 2, ( "got no certificate to send" ) );
        -: 4295:            goto write_msg;
        -: 4296:        }
        -: 4297:#endif /* MBEDTLS_SSL_PROTO_SSL3 */
        -: 4298:    }
        -: 4299:#endif /* MBEDTLS_SSL_CLI_C */
        -: 4300:#if defined(MBEDTLS_SSL_SRV_C)
        -: 4301:    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        -: 4302:    {
        -: 4303:        if( mbedtls_ssl_own_cert( ssl ) == NULL )
        -: 4304:        {
        -: 4305:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no certificate to send" ) );
        -: 4306:            return( MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED );
        -: 4307:        }
        -: 4308:    }
        -: 4309:#endif
        -: 4310:
        -: 4311:    MBEDTLS_SSL_DEBUG_CRT( 3, "own certificate", mbedtls_ssl_own_cert( ssl ) );
        -: 4312:
        -: 4313:    /*
        -: 4314:     *     0  .  0    handshake type
        -: 4315:     *     1  .  3    handshake length
        -: 4316:     *     4  .  6    length of all certs
        -: 4317:     *     7  .  9    length of cert. 1
        -: 4318:     *    10  . n-1   peer certificate
        -: 4319:     *     n  . n+2   length of cert. 2
        -: 4320:     *    n+3 . ...   upper level cert, etc.
        -: 4321:     */
        -: 4322:    i = 7;
        -: 4323:    crt = mbedtls_ssl_own_cert( ssl );
        -: 4324:
        -: 4325:    while( crt != NULL )
        -: 4326:    {
        -: 4327:        n = crt->raw.len;
        -: 4328:        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
        -: 4329:        {
        -: 4330:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
        -: 4331:                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
        -: 4332:            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        -: 4333:        }
        -: 4334:
        -: 4335:        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
        -: 4336:        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
        -: 4337:        ssl->out_msg[i + 2] = (unsigned char)( n       );
        -: 4338:
        -: 4339:        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
        -: 4340:        i += n; crt = crt->next;
        -: 4341:    }
        -: 4342:
        -: 4343:    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
        -: 4344:    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
        -: 4345:    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
        -: 4346:
        -: 4347:    ssl->out_msglen  = i;
        -: 4348:    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
        -: 4349:    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
        -: 4350:
        -: 4351:#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
        -: 4352:write_msg:
        -: 4353:#endif
        -: 4354:
        -: 4355:    ssl->state++;
        -: 4356:
        -: 4357:    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
        -: 4358:    {
        -: 4359:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
        -: 4360:        return( ret );
        -: 4361:    }
        -: 4362:
        -: 4363:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );
        -: 4364:
        -: 4365:    return( ret );
        -: 4366:}
        -: 4367:
        -: 4368:int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
        -: 4369:{
        -: 4370:    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
        -: 4371:    size_t i, n;
        -: 4372:    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
        -: 4373:    int authmode = ssl->conf->authmode;
        -: 4374:    uint8_t alert;
        -: 4375:
        -: 4376:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
        -: 4377:
        -: 4378:    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
        -: 4379:        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        -: 4380:        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        -: 4381:        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
        -: 4382:    {
        -: 4383:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
        -: 4384:        ssl->state++;
        -: 4385:        return( 0 );
        -: 4386:    }
        -: 4387:
        -: 4388:#if defined(MBEDTLS_SSL_SRV_C)
        -: 4389:    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
        -: 4390:        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
        -: 4391:    {
        -: 4392:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
        -: 4393:        ssl->state++;
        -: 4394:        return( 0 );
        -: 4395:    }
        -: 4396:
        -: 4397:#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
        -: 4398:    if( ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET )
        -: 4399:        authmode = ssl->handshake->sni_authmode;
        -: 4400:#endif
        -: 4401:
        -: 4402:    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
        -: 4403:        authmode == MBEDTLS_SSL_VERIFY_NONE )
        -: 4404:    {
        -: 4405:        ssl->session_negotiate->verify_result = MBEDTLS_X509_BADCERT_SKIP_VERIFY;
        -: 4406:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
        -: 4407:        ssl->state++;
        -: 4408:        return( 0 );
        -: 4409:    }
        -: 4410:#endif
        -: 4411:
        -: 4412:    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
        -: 4413:    {
        -: 4414:        /* mbedtls_ssl_read_record may have sent an alert already. We
        -: 4415:           let it decide whether to alert. */
        -: 4416:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        -: 4417:        return( ret );
        -: 4418:    }
        -: 4419:
        -: 4420:    ssl->state++;
        -: 4421:
        -: 4422:#if defined(MBEDTLS_SSL_SRV_C)
        -: 4423:#if defined(MBEDTLS_SSL_PROTO_SSL3)
        -: 4424:    /*
        -: 4425:     * Check if the client sent an empty certificate
        -: 4426:     */
        -: 4427:    if( ssl->conf->endpoint  == MBEDTLS_SSL_IS_SERVER &&
        -: 4428:        ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
        -: 4429:    {
        -: 4430:        if( ssl->in_msglen  == 2                        &&
        -: 4431:            ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT            &&
        -: 4432:            ssl->in_msg[0]  == MBEDTLS_SSL_ALERT_LEVEL_WARNING  &&
        -: 4433:            ssl->in_msg[1]  == MBEDTLS_SSL_ALERT_MSG_NO_CERT )
        -: 4434:        {
        -: 4435:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "SSLv3 client has no certificate" ) );
        -: 4436:
        -: 4437:            /* The client was asked for a certificate but didn't send
        -: 4438:               one. The client should know what's going on, so we
        -: 4439:               don't send an alert. */
        -: 4440:            ssl->session_negotiate->verify_result = MBEDTLS_X509_BADCERT_MISSING;
        -: 4441:            if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL )
        -: 4442:                return( 0 );
        -: 4443:            else
        -: 4444:                return( MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE );
        -: 4445:        }
        -: 4446:    }
        -: 4447:#endif /* MBEDTLS_SSL_PROTO_SSL3 */
        -: 4448:
        -: 4449:#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        -: 4450:    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        -: 4451:    if( ssl->conf->endpoint  == MBEDTLS_SSL_IS_SERVER &&
        -: 4452:        ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_0 )
        -: 4453:    {
        -: 4454:        if( ssl->in_hslen   == 3 + mbedtls_ssl_hs_hdr_len( ssl ) &&
        -: 4455:            ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE    &&
        -: 4456:            ssl->in_msg[0]  == MBEDTLS_SSL_HS_CERTIFICATE   &&
        -: 4457:            memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ), "\0\0\0", 3 ) == 0 )
        -: 4458:        {
        -: 4459:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLSv1 client has no certificate" ) );
        -: 4460:
        -: 4461:            /* The client was asked for a certificate but didn't send
        -: 4462:               one. The client should know what's going on, so we
        -: 4463:               don't send an alert. */
        -: 4464:            ssl->session_negotiate->verify_result = MBEDTLS_X509_BADCERT_MISSING;
        -: 4465:            if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL )
        -: 4466:                return( 0 );
        -: 4467:            else
        -: 4468:                return( MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE );
        -: 4469:        }
        -: 4470:    }
        -: 4471:#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
        -: 4472:          MBEDTLS_SSL_PROTO_TLS1_2 */
        -: 4473:#endif /* MBEDTLS_SSL_SRV_C */
        -: 4474:
        -: 4475:    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
        -: 4476:    {
        -: 4477:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        -: 4478:        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 4479:                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        -: 4480:        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        -: 4481:    }
        -: 4482:
        -: 4483:    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
        -: 4484:        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
        -: 4485:    {
        -: 4486:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        -: 4487:        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 4488:                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        -: 4489:        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        -: 4490:    }
        -: 4491:
        -: 4492:    i = mbedtls_ssl_hs_hdr_len( ssl );
        -: 4493:
        -: 4494:    /*
        -: 4495:     * Same message structure as in mbedtls_ssl_write_certificate()
        -: 4496:     */
        -: 4497:    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
        -: 4498:
        -: 4499:    if( ssl->in_msg[i] != 0 ||
        -: 4500:        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
        -: 4501:    {
        -: 4502:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        -: 4503:        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 4504:                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        -: 4505:        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        -: 4506:    }
        -: 4507:
        -: 4508:    /* In case we tried to reuse a session but it failed */
        -: 4509:    if( ssl->session_negotiate->peer_cert != NULL )
        -: 4510:    {
        -: 4511:        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
        -: 4512:        mbedtls_free( ssl->session_negotiate->peer_cert );
        -: 4513:    }
        -: 4514:
        -: 4515:    if( ( ssl->session_negotiate->peer_cert = mbedtls_calloc( 1,
        -: 4516:                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
        -: 4517:    {
        -: 4518:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
        -: 4519:                       sizeof( mbedtls_x509_crt ) ) );
        -: 4520:        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 4521:                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        -: 4522:        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
        -: 4523:    }
        -: 4524:
        -: 4525:    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
        -: 4526:
        -: 4527:    i += 3;
        -: 4528:
        -: 4529:    while( i < ssl->in_hslen )
        -: 4530:    {
        -: 4531:        if( ssl->in_msg[i] != 0 )
        -: 4532:        {
        -: 4533:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        -: 4534:            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 4535:                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        -: 4536:            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        -: 4537:        }
        -: 4538:
        -: 4539:        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
        -: 4540:            | (unsigned int) ssl->in_msg[i + 2];
        -: 4541:        i += 3;
        -: 4542:
        -: 4543:        if( n < 128 || i + n > ssl->in_hslen )
        -: 4544:        {
        -: 4545:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        -: 4546:            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 4547:                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        -: 4548:            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        -: 4549:        }
        -: 4550:
        -: 4551:        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
        -: 4552:                                  ssl->in_msg + i, n );
        -: 4553:        switch( ret )
        -: 4554:        {
        -: 4555:        case 0: /*ok*/
        -: 4556:        case MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + MBEDTLS_ERR_OID_NOT_FOUND:
        -: 4557:            /* Ignore certificate with an unknown algorithm: maybe a
        -: 4558:               prior certificate was already trusted. */
        -: 4559:            break;
        -: 4560:
        -: 4561:        case MBEDTLS_ERR_X509_ALLOC_FAILED:
        -: 4562:            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
        -: 4563:            goto crt_parse_der_failed;
        -: 4564:
        -: 4565:        case MBEDTLS_ERR_X509_UNKNOWN_VERSION:
        -: 4566:            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
        -: 4567:            goto crt_parse_der_failed;
        -: 4568:
        -: 4569:        default:
        -: 4570:            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
        -: 4571:        crt_parse_der_failed:
        -: 4572:            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
        -: 4573:            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
        -: 4574:            return( ret );
        -: 4575:        }
        -: 4576:
        -: 4577:        i += n;
        -: 4578:    }
        -: 4579:
        -: 4580:    MBEDTLS_SSL_DEBUG_CRT( 3, "peer certificate", ssl->session_negotiate->peer_cert );
        -: 4581:
        -: 4582:    /*
        -: 4583:     * On client, make sure the server cert doesn't change during renego to
        -: 4584:     * avoid "triple handshake" attack: https://secure-resumption.com/
        -: 4585:     */
        -: 4586:#if defined(MBEDTLS_SSL_RENEGOTIATION) && defined(MBEDTLS_SSL_CLI_C)
        -: 4587:    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
        -: 4588:        ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
        -: 4589:    {
        -: 4590:        if( ssl->session->peer_cert == NULL )
        -: 4591:        {
        -: 4592:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "new server cert during renegotiation" ) );
        -: 4593:            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 4594:                                            MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED );
        -: 4595:            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        -: 4596:        }
        -: 4597:
        -: 4598:        if( ssl->session->peer_cert->raw.len !=
        -: 4599:            ssl->session_negotiate->peer_cert->raw.len ||
        -: 4600:            memcmp( ssl->session->peer_cert->raw.p,
        -: 4601:                    ssl->session_negotiate->peer_cert->raw.p,
        -: 4602:                    ssl->session->peer_cert->raw.len ) != 0 )
        -: 4603:        {
        -: 4604:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "server cert changed during renegotiation" ) );
        -: 4605:            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 4606:                                            MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED );
        -: 4607:            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        -: 4608:        }
        -: 4609:    }
        -: 4610:#endif /* MBEDTLS_SSL_RENEGOTIATION && MBEDTLS_SSL_CLI_C */
        -: 4611:
        -: 4612:    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
        -: 4613:    {
        -: 4614:        mbedtls_x509_crt *ca_chain;
        -: 4615:        mbedtls_x509_crl *ca_crl;
        -: 4616:
        -: 4617:#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
        -: 4618:        if( ssl->handshake->sni_ca_chain != NULL )
        -: 4619:        {
        -: 4620:            ca_chain = ssl->handshake->sni_ca_chain;
        -: 4621:            ca_crl   = ssl->handshake->sni_ca_crl;
        -: 4622:        }
        -: 4623:        else
        -: 4624:#endif
        -: 4625:        {
        -: 4626:            ca_chain = ssl->conf->ca_chain;
        -: 4627:            ca_crl   = ssl->conf->ca_crl;
        -: 4628:        }
        -: 4629:
        -: 4630:        /*
        -: 4631:         * Main check: verify certificate
        -: 4632:         */
        -: 4633:        ret = mbedtls_x509_crt_verify_with_profile(
        -: 4634:                                ssl->session_negotiate->peer_cert,
        -: 4635:                                ca_chain, ca_crl,
        -: 4636:                                ssl->conf->cert_profile,
        -: 4637:                                ssl->hostname,
        -: 4638:                               &ssl->session_negotiate->verify_result,
        -: 4639:                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
        -: 4640:
        -: 4641:        if( ret != 0 )
        -: 4642:        {
        -: 4643:            MBEDTLS_SSL_DEBUG_RET( 1, "x509_verify_cert", ret );
        -: 4644:        }
        -: 4645:
        -: 4646:        /*
        -: 4647:         * Secondary checks: always done, but change 'ret' only if it was 0
        -: 4648:         */
        -: 4649:
        -: 4650:#if defined(MBEDTLS_ECP_C)
        -: 4651:        {
        -: 4652:            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;
        -: 4653:
        -: 4654:            /* If certificate uses an EC key, make sure the curve is OK */
        -: 4655:            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
        -: 4656:                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
        -: 4657:            {
        -: 4658:                ssl->session_negotiate->verify_result |= MBEDTLS_X509_BADCERT_BAD_KEY;
        -: 4659:
        -: 4660:                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (EC key curve)" ) );
        -: 4661:                if( ret == 0 )
        -: 4662:                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
        -: 4663:            }
        -: 4664:        }
        -: 4665:#endif /* MBEDTLS_ECP_C */
        -: 4666:
        -: 4667:        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
        -: 4668:                                 ciphersuite_info,
        -: 4669:                                 ! ssl->conf->endpoint,
        -: 4670:                                 &ssl->session_negotiate->verify_result ) != 0 )
        -: 4671:        {
        -: 4672:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
        -: 4673:            if( ret == 0 )
        -: 4674:                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
        -: 4675:        }
        -: 4676:
        -: 4677:        /* mbedtls_x509_crt_verify_with_profile is supposed to report a
        -: 4678:         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
        -: 4679:         * with details encoded in the verification flags. All other kinds
        -: 4680:         * of error codes, including those from the user provided f_vrfy
        -: 4681:         * functions, are treated as fatal and lead to a failure of
        -: 4682:         * ssl_parse_certificate even if verification was optional. */
        -: 4683:        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
        -: 4684:            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
        -: 4685:              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        -: 4686:        {
        -: 4687:            ret = 0;
        -: 4688:        }
        -: 4689:
        -: 4690:        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        -: 4691:        {
        -: 4692:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
        -: 4693:            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
        -: 4694:        }
        -: 4695:
        -: 4696:        if( ret != 0 )
        -: 4697:        {
        -: 4698:            /* The certificate may have been rejected for several reasons.
        -: 4699:               Pick one and send the corresponding alert. Which alert to send
        -: 4700:               may be a subject of debate in some cases. */
        -: 4701:            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
        -: 4702:                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
        -: 4703:            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
        -: 4704:                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
        -: 4705:            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_KEY_USAGE )
        -: 4706:                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
        -: 4707:            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXT_KEY_USAGE )
        -: 4708:                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
        -: 4709:            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
        -: 4710:                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
        -: 4711:            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
        -: 4712:                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
        -: 4713:            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
        -: 4714:                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
        -: 4715:            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
        -: 4716:                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
        -: 4717:            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
        -: 4718:                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
        -: 4719:            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
        -: 4720:                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
        -: 4721:            else
        -: 4722:                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
        -: 4723:            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 4724:                                            alert );
        -: 4725:        }
        -: 4726:
        -: 4727:#if defined(MBEDTLS_DEBUG_C)
        -: 4728:        if( ssl->session_negotiate->verify_result != 0 )
        -: 4729:        {
        -: 4730:            MBEDTLS_SSL_DEBUG_MSG( 3, ( "! Certificate verification flags %x",
        -: 4731:                                        ssl->session_negotiate->verify_result ) );
        -: 4732:        }
        -: 4733:        else
        -: 4734:        {
        -: 4735:            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
        -: 4736:        }
        -: 4737:#endif /* MBEDTLS_DEBUG_C */
        -: 4738:    }
        -: 4739:
        -: 4740:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );
        -: 4741:
        -: 4742:    return( ret );
        -: 4743:}
        -: 4744:#endif /* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED
        -: 4745:          !MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED
        -: 4746:          !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED
        -: 4747:          !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED
        -: 4748:          !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
        -: 4749:          !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED
        -: 4750:          !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */
        -: 4751:
    #####: 4752:int mbedtls_ssl_write_change_cipher_spec( mbedtls_ssl_context *ssl )
        -: 4753:{
        -: 4754:    int ret;
        -: 4755:
    #####: 4756:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
        -: 4757:
    #####: 4758:    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
    #####: 4759:    ssl->out_msglen  = 1;
    #####: 4760:    ssl->out_msg[0]  = 1;
        -: 4761:
    #####: 4762:    ssl->state++;
        -: 4763:
    #####: 4764:    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
        -: 4765:    {
    #####: 4766:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
    #####: 4767:        return( ret );
        -: 4768:    }
        -: 4769:
    #####: 4770:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write change cipher spec" ) );
        -: 4771:
    #####: 4772:    return( 0 );
        -: 4773:}
        -: 4774:
    #####: 4775:int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
        -: 4776:{
        -: 4777:    int ret;
        -: 4778:
    #####: 4779:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
        -: 4780:
    #####: 4781:    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
        -: 4782:    {
    #####: 4783:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
    #####: 4784:        return( ret );
        -: 4785:    }
        -: 4786:
    #####: 4787:    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
        -: 4788:    {
    #####: 4789:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
    #####: 4790:        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 4791:                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
    #####: 4792:        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        -: 4793:    }
        -: 4794:
    #####: 4795:    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
        -: 4796:    {
    #####: 4797:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
    #####: 4798:        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 4799:                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
    #####: 4800:        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
        -: 4801:    }
        -: 4802:
        -: 4803:    /*
        -: 4804:     * Switch to our negotiated transform and session parameters for inbound
        -: 4805:     * data.
        -: 4806:     */
    #####: 4807:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
    #####: 4808:    ssl->transform_in = ssl->transform_negotiate;
    #####: 4809:    ssl->session_in = ssl->session_negotiate;
        -: 4810:
        -: 4811:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 4812:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 4813:    {
        -: 4814:#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
        -: 4815:        ssl_dtls_replay_reset( ssl );
        -: 4816:#endif
        -: 4817:
        -: 4818:        /* Increment epoch */
    #####: 4819:        if( ++ssl->in_epoch == 0 )
        -: 4820:        {
    #####: 4821:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "DTLS epoch would wrap" ) );
        -: 4822:            /* This is highly unlikely to happen for legitimate reasons, so
        -: 4823:               treat it as an attack and don't send an alert. */
    #####: 4824:            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        -: 4825:        }
        -: 4826:    }
        -: 4827:    else
        -: 4828:#endif /* MBEDTLS_SSL_PROTO_DTLS */
    #####: 4829:    memset( ssl->in_ctr, 0, 8 );
        -: 4830:
        -: 4831:    /*
        -: 4832:     * Set the in_msg pointer to the correct location based on IV length
        -: 4833:     */
    #####: 4834:    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        -: 4835:    {
    #####: 4836:        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
    #####: 4837:                      ssl->transform_negotiate->fixed_ivlen;
        -: 4838:    }
        -: 4839:    else
    #####: 4840:        ssl->in_msg = ssl->in_iv;
        -: 4841:
        -: 4842:#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
        -: 4843:    if( mbedtls_ssl_hw_record_activate != NULL )
        -: 4844:    {
        -: 4845:        if( ( ret = mbedtls_ssl_hw_record_activate( ssl, MBEDTLS_SSL_CHANNEL_INBOUND ) ) != 0 )
        -: 4846:        {
        -: 4847:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_activate", ret );
        -: 4848:            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 4849:                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        -: 4850:            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        -: 4851:        }
        -: 4852:    }
        -: 4853:#endif
        -: 4854:
    #####: 4855:    ssl->state++;
        -: 4856:
    #####: 4857:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
        -: 4858:
    #####: 4859:    return( 0 );
        -: 4860:}
        -: 4861:
    #####: 4862:void mbedtls_ssl_optimize_checksum( mbedtls_ssl_context *ssl,
        -: 4863:                            const mbedtls_ssl_ciphersuite_t *ciphersuite_info )
        -: 4864:{
        -: 4865:    ((void) ciphersuite_info);
        -: 4866:
        -: 4867:#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
        -: 4868:    defined(MBEDTLS_SSL_PROTO_TLS1_1)
    #####: 4869:    if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 )
    #####: 4870:        ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;
        -: 4871:    else
        -: 4872:#endif
        -: 4873:#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        -: 4874:#if defined(MBEDTLS_SHA512_C)
    #####: 4875:    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
    #####: 4876:        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
        -: 4877:    else
        -: 4878:#endif
        -: 4879:#if defined(MBEDTLS_SHA256_C)
    #####: 4880:    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
    #####: 4881:        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
        -: 4882:    else
        -: 4883:#endif
        -: 4884:#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
        -: 4885:    {
    #####: 4886:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 4887:        return;
        -: 4888:    }
        -: 4889:}
        -: 4890:
    #####: 4891:void mbedtls_ssl_reset_checksum( mbedtls_ssl_context *ssl )
        -: 4892:{
        -: 4893:#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
        -: 4894:    defined(MBEDTLS_SSL_PROTO_TLS1_1)
    #####: 4895:     mbedtls_md5_starts_ret( &ssl->handshake->fin_md5  );
    #####: 4896:    mbedtls_sha1_starts_ret( &ssl->handshake->fin_sha1 );
        -: 4897:#endif
        -: 4898:#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        -: 4899:#if defined(MBEDTLS_SHA256_C)
    #####: 4900:    mbedtls_sha256_starts_ret( &ssl->handshake->fin_sha256, 0 );
        -: 4901:#endif
        -: 4902:#if defined(MBEDTLS_SHA512_C)
    #####: 4903:    mbedtls_sha512_starts_ret( &ssl->handshake->fin_sha512, 1 );
        -: 4904:#endif
        -: 4905:#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    #####: 4906:}
        -: 4907:
    #####: 4908:static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
        -: 4909:                                       const unsigned char *buf, size_t len )
        -: 4910:{
        -: 4911:#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
        -: 4912:    defined(MBEDTLS_SSL_PROTO_TLS1_1)
    #####: 4913:     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    #####: 4914:    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
        -: 4915:#endif
        -: 4916:#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        -: 4917:#if defined(MBEDTLS_SHA256_C)
    #####: 4918:    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
        -: 4919:#endif
        -: 4920:#if defined(MBEDTLS_SHA512_C)
    #####: 4921:    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
        -: 4922:#endif
        -: 4923:#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    #####: 4924:}
        -: 4925:
        -: 4926:#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
        -: 4927:    defined(MBEDTLS_SSL_PROTO_TLS1_1)
    #####: 4928:static void ssl_update_checksum_md5sha1( mbedtls_ssl_context *ssl,
        -: 4929:                                         const unsigned char *buf, size_t len )
        -: 4930:{
    #####: 4931:     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    #####: 4932:    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
    #####: 4933:}
        -: 4934:#endif
        -: 4935:
        -: 4936:#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        -: 4937:#if defined(MBEDTLS_SHA256_C)
    #####: 4938:static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
        -: 4939:                                        const unsigned char *buf, size_t len )
        -: 4940:{
    #####: 4941:    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
    #####: 4942:}
        -: 4943:#endif
        -: 4944:
        -: 4945:#if defined(MBEDTLS_SHA512_C)
    #####: 4946:static void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,
        -: 4947:                                        const unsigned char *buf, size_t len )
        -: 4948:{
    #####: 4949:    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
    #####: 4950:}
        -: 4951:#endif
        -: 4952:#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
        -: 4953:
        -: 4954:#if defined(MBEDTLS_SSL_PROTO_SSL3)
        -: 4955:static void ssl_calc_finished_ssl(
        -: 4956:                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
        -: 4957:{
        -: 4958:    const char *sender;
        -: 4959:    mbedtls_md5_context  md5;
        -: 4960:    mbedtls_sha1_context sha1;
        -: 4961:
        -: 4962:    unsigned char padbuf[48];
        -: 4963:    unsigned char md5sum[16];
        -: 4964:    unsigned char sha1sum[20];
        -: 4965:
        -: 4966:    mbedtls_ssl_session *session = ssl->session_negotiate;
        -: 4967:    if( !session )
        -: 4968:        session = ssl->session;
        -: 4969:
        -: 4970:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished ssl" ) );
        -: 4971:
        -: 4972:    mbedtls_md5_init( &md5 );
        -: 4973:    mbedtls_sha1_init( &sha1 );
        -: 4974:
        -: 4975:    mbedtls_md5_clone( &md5, &ssl->handshake->fin_md5 );
        -: 4976:    mbedtls_sha1_clone( &sha1, &ssl->handshake->fin_sha1 );
        -: 4977:
        -: 4978:    /*
        -: 4979:     * SSLv3:
        -: 4980:     *   hash =
        -: 4981:     *      MD5( master + pad2 +
        -: 4982:     *          MD5( handshake + sender + master + pad1 ) )
        -: 4983:     *   + SHA1( master + pad2 +
        -: 4984:     *         SHA1( handshake + sender + master + pad1 ) )
        -: 4985:     */
        -: 4986:
        -: 4987:#if !defined(MBEDTLS_MD5_ALT)
        -: 4988:    MBEDTLS_SSL_DEBUG_BUF( 4, "finished  md5 state", (unsigned char *)
        -: 4989:                    md5.state, sizeof(  md5.state ) );
        -: 4990:#endif
        -: 4991:
        -: 4992:#if !defined(MBEDTLS_SHA1_ALT)
        -: 4993:    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha1 state", (unsigned char *)
        -: 4994:                   sha1.state, sizeof( sha1.state ) );
        -: 4995:#endif
        -: 4996:
        -: 4997:    sender = ( from == MBEDTLS_SSL_IS_CLIENT ) ? "CLNT"
        -: 4998:                                       : "SRVR";
        -: 4999:
        -: 5000:    memset( padbuf, 0x36, 48 );
        -: 5001:
        -: 5002:    mbedtls_md5_update_ret( &md5, (const unsigned char *) sender, 4 );
        -: 5003:    mbedtls_md5_update_ret( &md5, session->master, 48 );
        -: 5004:    mbedtls_md5_update_ret( &md5, padbuf, 48 );
        -: 5005:    mbedtls_md5_finish_ret( &md5, md5sum );
        -: 5006:
        -: 5007:    mbedtls_sha1_update_ret( &sha1, (const unsigned char *) sender, 4 );
        -: 5008:    mbedtls_sha1_update_ret( &sha1, session->master, 48 );
        -: 5009:    mbedtls_sha1_update_ret( &sha1, padbuf, 40 );
        -: 5010:    mbedtls_sha1_finish_ret( &sha1, sha1sum );
        -: 5011:
        -: 5012:    memset( padbuf, 0x5C, 48 );
        -: 5013:
        -: 5014:    mbedtls_md5_starts_ret( &md5 );
        -: 5015:    mbedtls_md5_update_ret( &md5, session->master, 48 );
        -: 5016:    mbedtls_md5_update_ret( &md5, padbuf, 48 );
        -: 5017:    mbedtls_md5_update_ret( &md5, md5sum, 16 );
        -: 5018:    mbedtls_md5_finish_ret( &md5, buf );
        -: 5019:
        -: 5020:    mbedtls_sha1_starts_ret( &sha1 );
        -: 5021:    mbedtls_sha1_update_ret( &sha1, session->master, 48 );
        -: 5022:    mbedtls_sha1_update_ret( &sha1, padbuf , 40 );
        -: 5023:    mbedtls_sha1_update_ret( &sha1, sha1sum, 20 );
        -: 5024:    mbedtls_sha1_finish_ret( &sha1, buf + 16 );
        -: 5025:
        -: 5026:    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, 36 );
        -: 5027:
        -: 5028:    mbedtls_md5_free(  &md5  );
        -: 5029:    mbedtls_sha1_free( &sha1 );
        -: 5030:
        -: 5031:    mbedtls_platform_zeroize(  padbuf, sizeof(  padbuf ) );
        -: 5032:    mbedtls_platform_zeroize(  md5sum, sizeof(  md5sum ) );
        -: 5033:    mbedtls_platform_zeroize( sha1sum, sizeof( sha1sum ) );
        -: 5034:
        -: 5035:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
        -: 5036:}
        -: 5037:#endif /* MBEDTLS_SSL_PROTO_SSL3 */
        -: 5038:
        -: 5039:#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)
    #####: 5040:static void ssl_calc_finished_tls(
        -: 5041:                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
        -: 5042:{
    #####: 5043:    int len = 12;
        -: 5044:    const char *sender;
        -: 5045:    mbedtls_md5_context  md5;
        -: 5046:    mbedtls_sha1_context sha1;
        -: 5047:    unsigned char padbuf[36];
        -: 5048:
    #####: 5049:    mbedtls_ssl_session *session = ssl->session_negotiate;
    #####: 5050:    if( !session )
    #####: 5051:        session = ssl->session;
        -: 5052:
    #####: 5053:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls" ) );
        -: 5054:
    #####: 5055:    mbedtls_md5_init( &md5 );
    #####: 5056:    mbedtls_sha1_init( &sha1 );
        -: 5057:
    #####: 5058:    mbedtls_md5_clone( &md5, &ssl->handshake->fin_md5 );
    #####: 5059:    mbedtls_sha1_clone( &sha1, &ssl->handshake->fin_sha1 );
        -: 5060:
        -: 5061:    /*
        -: 5062:     * TLSv1:
        -: 5063:     *   hash = PRF( master, finished_label,
        -: 5064:     *               MD5( handshake ) + SHA1( handshake ) )[0..11]
        -: 5065:     */
        -: 5066:
        -: 5067:#if !defined(MBEDTLS_MD5_ALT)
    #####: 5068:    MBEDTLS_SSL_DEBUG_BUF( 4, "finished  md5 state", (unsigned char *)
        -: 5069:                    md5.state, sizeof(  md5.state ) );
        -: 5070:#endif
        -: 5071:
        -: 5072:#if !defined(MBEDTLS_SHA1_ALT)
    #####: 5073:    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha1 state", (unsigned char *)
        -: 5074:                   sha1.state, sizeof( sha1.state ) );
        -: 5075:#endif
        -: 5076:
    #####: 5077:    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
        -: 5078:             ? "client finished"
        -: 5079:             : "server finished";
        -: 5080:
    #####: 5081:    mbedtls_md5_finish_ret(  &md5, padbuf );
    #####: 5082:    mbedtls_sha1_finish_ret( &sha1, padbuf + 16 );
        -: 5083:
    #####: 5084:    ssl->handshake->tls_prf( session->master, 48, sender,
        -: 5085:                             padbuf, 36, buf, len );
        -: 5086:
    #####: 5087:    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
        -: 5088:
    #####: 5089:    mbedtls_md5_free(  &md5  );
    #####: 5090:    mbedtls_sha1_free( &sha1 );
        -: 5091:
    #####: 5092:    mbedtls_platform_zeroize(  padbuf, sizeof(  padbuf ) );
        -: 5093:
    #####: 5094:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
    #####: 5095:}
        -: 5096:#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */
        -: 5097:
        -: 5098:#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        -: 5099:#if defined(MBEDTLS_SHA256_C)
    #####: 5100:static void ssl_calc_finished_tls_sha256(
        -: 5101:                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
        -: 5102:{
    #####: 5103:    int len = 12;
        -: 5104:    const char *sender;
        -: 5105:    mbedtls_sha256_context sha256;
        -: 5106:    unsigned char padbuf[32];
        -: 5107:
    #####: 5108:    mbedtls_ssl_session *session = ssl->session_negotiate;
    #####: 5109:    if( !session )
    #####: 5110:        session = ssl->session;
        -: 5111:
    #####: 5112:    mbedtls_sha256_init( &sha256 );
        -: 5113:
    #####: 5114:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );
        -: 5115:
    #####: 5116:    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
        -: 5117:
        -: 5118:    /*
        -: 5119:     * TLSv1.2:
        -: 5120:     *   hash = PRF( master, finished_label,
        -: 5121:     *               Hash( handshake ) )[0.11]
        -: 5122:     */
        -: 5123:
        -: 5124:#if !defined(MBEDTLS_SHA256_ALT)
    #####: 5125:    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
        -: 5126:                   sha256.state, sizeof( sha256.state ) );
        -: 5127:#endif
        -: 5128:
    #####: 5129:    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
        -: 5130:             ? "client finished"
        -: 5131:             : "server finished";
        -: 5132:
    #####: 5133:    mbedtls_sha256_finish_ret( &sha256, padbuf );
        -: 5134:
    #####: 5135:    ssl->handshake->tls_prf( session->master, 48, sender,
        -: 5136:                             padbuf, 32, buf, len );
        -: 5137:
    #####: 5138:    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
        -: 5139:
    #####: 5140:    mbedtls_sha256_free( &sha256 );
        -: 5141:
    #####: 5142:    mbedtls_platform_zeroize(  padbuf, sizeof(  padbuf ) );
        -: 5143:
    #####: 5144:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
    #####: 5145:}
        -: 5146:#endif /* MBEDTLS_SHA256_C */
        -: 5147:
        -: 5148:#if defined(MBEDTLS_SHA512_C)
    #####: 5149:static void ssl_calc_finished_tls_sha384(
        -: 5150:                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
        -: 5151:{
    #####: 5152:    int len = 12;
        -: 5153:    const char *sender;
        -: 5154:    mbedtls_sha512_context sha512;
        -: 5155:    unsigned char padbuf[48];
        -: 5156:
    #####: 5157:    mbedtls_ssl_session *session = ssl->session_negotiate;
    #####: 5158:    if( !session )
    #####: 5159:        session = ssl->session;
        -: 5160:
    #####: 5161:    mbedtls_sha512_init( &sha512 );
        -: 5162:
    #####: 5163:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );
        -: 5164:
    #####: 5165:    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
        -: 5166:
        -: 5167:    /*
        -: 5168:     * TLSv1.2:
        -: 5169:     *   hash = PRF( master, finished_label,
        -: 5170:     *               Hash( handshake ) )[0.11]
        -: 5171:     */
        -: 5172:
        -: 5173:#if !defined(MBEDTLS_SHA512_ALT)
    #####: 5174:    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha512 state", (unsigned char *)
        -: 5175:                   sha512.state, sizeof( sha512.state ) );
        -: 5176:#endif
        -: 5177:
    #####: 5178:    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
        -: 5179:             ? "client finished"
        -: 5180:             : "server finished";
        -: 5181:
    #####: 5182:    mbedtls_sha512_finish_ret( &sha512, padbuf );
        -: 5183:
    #####: 5184:    ssl->handshake->tls_prf( session->master, 48, sender,
        -: 5185:                             padbuf, 48, buf, len );
        -: 5186:
    #####: 5187:    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
        -: 5188:
    #####: 5189:    mbedtls_sha512_free( &sha512 );
        -: 5190:
    #####: 5191:    mbedtls_platform_zeroize(  padbuf, sizeof( padbuf ) );
        -: 5192:
    #####: 5193:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
    #####: 5194:}
        -: 5195:#endif /* MBEDTLS_SHA512_C */
        -: 5196:#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
        -: 5197:
    #####: 5198:static void ssl_handshake_wrapup_free_hs_transform( mbedtls_ssl_context *ssl )
        -: 5199:{
    #####: 5200:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );
        -: 5201:
        -: 5202:    /*
        -: 5203:     * Free our handshake params
        -: 5204:     */
    #####: 5205:    mbedtls_ssl_handshake_free( ssl->handshake );
    #####: 5206:    mbedtls_free( ssl->handshake );
    #####: 5207:    ssl->handshake = NULL;
        -: 5208:
        -: 5209:    /*
        -: 5210:     * Free the previous transform and swith in the current one
        -: 5211:     */
    #####: 5212:    if( ssl->transform )
        -: 5213:    {
    #####: 5214:        mbedtls_ssl_transform_free( ssl->transform );
    #####: 5215:        mbedtls_free( ssl->transform );
        -: 5216:    }
    #####: 5217:    ssl->transform = ssl->transform_negotiate;
    #####: 5218:    ssl->transform_negotiate = NULL;
        -: 5219:
    #####: 5220:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
    #####: 5221:}
        -: 5222:
    #####: 5223:void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
        -: 5224:{
    #####: 5225:    int resume = ssl->handshake->resume;
        -: 5226:
    #####: 5227:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
        -: 5228:
        -: 5229:#if defined(MBEDTLS_SSL_RENEGOTIATION)
        -: 5230:    if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
        -: 5231:    {
        -: 5232:        ssl->renego_status =  MBEDTLS_SSL_RENEGOTIATION_DONE;
        -: 5233:        ssl->renego_records_seen = 0;
        -: 5234:    }
        -: 5235:#endif
        -: 5236:
        -: 5237:    /*
        -: 5238:     * Free the previous session and switch in the current one
        -: 5239:     */
    #####: 5240:    if( ssl->session )
        -: 5241:    {
        -: 5242:#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
        -: 5243:        /* RFC 7366 3.1: keep the EtM state */
        -: 5244:        ssl->session_negotiate->encrypt_then_mac =
        -: 5245:                  ssl->session->encrypt_then_mac;
        -: 5246:#endif
        -: 5247:
    #####: 5248:        mbedtls_ssl_session_free( ssl->session );
    #####: 5249:        mbedtls_free( ssl->session );
        -: 5250:    }
    #####: 5251:    ssl->session = ssl->session_negotiate;
    #####: 5252:    ssl->session_negotiate = NULL;
        -: 5253:
        -: 5254:    /*
        -: 5255:     * Add cache entry
        -: 5256:     */
    #####: 5257:    if( ssl->conf->f_set_cache != NULL &&
    #####: 5258:        ssl->session->id_len != 0 &&
        -: 5259:        resume == 0 )
        -: 5260:    {
    #####: 5261:        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
    #####: 5262:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "cache did not store session" ) );
        -: 5263:    }
        -: 5264:
        -: 5265:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 5266:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
    #####: 5267:        ssl->handshake->flight != NULL )
        -: 5268:    {
        -: 5269:        /* Cancel handshake timer */
    #####: 5270:        ssl_set_timer( ssl, 0 );
        -: 5271:
        -: 5272:        /* Keep last flight around in case we need to resend it:
        -: 5273:         * we need the handshake and transform structures for that */
    #####: 5274:        MBEDTLS_SSL_DEBUG_MSG( 3, ( "skip freeing handshake and transform" ) );
        -: 5275:    }
        -: 5276:    else
        -: 5277:#endif
    #####: 5278:        ssl_handshake_wrapup_free_hs_transform( ssl );
        -: 5279:
    #####: 5280:    ssl->state++;
        -: 5281:
    #####: 5282:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
    #####: 5283:}
        -: 5284:
    #####: 5285:int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
        -: 5286:{
        -: 5287:    int ret, hash_len;
        -: 5288:
    #####: 5289:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
        -: 5290:
        -: 5291:    /*
        -: 5292:     * Set the out_msg pointer to the correct location based on IV length
        -: 5293:     */
    #####: 5294:    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        -: 5295:    {
    #####: 5296:        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
    #####: 5297:                       ssl->transform_negotiate->fixed_ivlen;
        -: 5298:    }
        -: 5299:    else
    #####: 5300:        ssl->out_msg = ssl->out_iv;
        -: 5301:
    #####: 5302:    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
        -: 5303:
        -: 5304:    /*
        -: 5305:     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
        -: 5306:     * may define some other value. Currently (early 2016), no defined
        -: 5307:     * ciphersuite does this (and this is unlikely to change as activity has
        -: 5308:     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
        -: 5309:     */
    #####: 5310:    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
        -: 5311:
        -: 5312:#if defined(MBEDTLS_SSL_RENEGOTIATION)
        -: 5313:    ssl->verify_data_len = hash_len;
        -: 5314:    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
        -: 5315:#endif
        -: 5316:
    #####: 5317:    ssl->out_msglen  = 4 + hash_len;
    #####: 5318:    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    #####: 5319:    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
        -: 5320:
        -: 5321:    /*
        -: 5322:     * In case of session resuming, invert the client and server
        -: 5323:     * ChangeCipherSpec messages order.
        -: 5324:     */
    #####: 5325:    if( ssl->handshake->resume != 0 )
        -: 5326:    {
        -: 5327:#if defined(MBEDTLS_SSL_CLI_C)
    #####: 5328:        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    #####: 5329:            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
        -: 5330:#endif
        -: 5331:#if defined(MBEDTLS_SSL_SRV_C)
    #####: 5332:        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
    #####: 5333:            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
        -: 5334:#endif
        -: 5335:    }
        -: 5336:    else
    #####: 5337:        ssl->state++;
        -: 5338:
        -: 5339:    /*
        -: 5340:     * Switch to our negotiated transform and session parameters for outbound
        -: 5341:     * data.
        -: 5342:     */
    #####: 5343:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for outbound data" ) );
        -: 5344:
        -: 5345:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 5346:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 5347:    {
        -: 5348:        unsigned char i;
        -: 5349:
        -: 5350:        /* Remember current epoch settings for resending */
    #####: 5351:        ssl->handshake->alt_transform_out = ssl->transform_out;
    #####: 5352:        memcpy( ssl->handshake->alt_out_ctr, ssl->out_ctr, 8 );
        -: 5353:
        -: 5354:        /* Set sequence_number to zero */
    #####: 5355:        memset( ssl->out_ctr + 2, 0, 6 );
        -: 5356:
        -: 5357:        /* Increment epoch */
    #####: 5358:        for( i = 2; i > 0; i-- )
    #####: 5359:            if( ++ssl->out_ctr[i - 1] != 0 )
    #####: 5360:                break;
        -: 5361:
        -: 5362:        /* The loop goes to its end iff the counter is wrapping */
    #####: 5363:        if( i == 0 )
        -: 5364:        {
    #####: 5365:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "DTLS epoch would wrap" ) );
    #####: 5366:            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        -: 5367:        }
        -: 5368:    }
        -: 5369:    else
        -: 5370:#endif /* MBEDTLS_SSL_PROTO_DTLS */
    #####: 5371:    memset( ssl->out_ctr, 0, 8 );
        -: 5372:
    #####: 5373:    ssl->transform_out = ssl->transform_negotiate;
    #####: 5374:    ssl->session_out = ssl->session_negotiate;
        -: 5375:
        -: 5376:#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
        -: 5377:    if( mbedtls_ssl_hw_record_activate != NULL )
        -: 5378:    {
        -: 5379:        if( ( ret = mbedtls_ssl_hw_record_activate( ssl, MBEDTLS_SSL_CHANNEL_OUTBOUND ) ) != 0 )
        -: 5380:        {
        -: 5381:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_activate", ret );
        -: 5382:            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        -: 5383:        }
        -: 5384:    }
        -: 5385:#endif
        -: 5386:
        -: 5387:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 5388:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
    #####: 5389:        mbedtls_ssl_send_flight_completed( ssl );
        -: 5390:#endif
        -: 5391:
    #####: 5392:    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
        -: 5393:    {
    #####: 5394:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
    #####: 5395:        return( ret );
        -: 5396:    }
        -: 5397:
    #####: 5398:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );
        -: 5399:
    #####: 5400:    return( 0 );
        -: 5401:}
        -: 5402:
        -: 5403:#if defined(MBEDTLS_SSL_PROTO_SSL3)
        -: 5404:#define SSL_MAX_HASH_LEN 36
        -: 5405:#else
        -: 5406:#define SSL_MAX_HASH_LEN 12
        -: 5407:#endif
        -: 5408:
    #####: 5409:int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
        -: 5410:{
        -: 5411:    int ret;
        -: 5412:    unsigned int hash_len;
        -: 5413:    unsigned char buf[SSL_MAX_HASH_LEN];
        -: 5414:
    #####: 5415:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );
        -: 5416:
    #####: 5417:    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
        -: 5418:
    #####: 5419:    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
        -: 5420:    {
    #####: 5421:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
    #####: 5422:        return( ret );
        -: 5423:    }
        -: 5424:
    #####: 5425:    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
        -: 5426:    {
    #####: 5427:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
    #####: 5428:        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 5429:                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
    #####: 5430:        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        -: 5431:    }
        -: 5432:
        -: 5433:    /* There is currently no ciphersuite using another length with TLS 1.2 */
        -: 5434:#if defined(MBEDTLS_SSL_PROTO_SSL3)
        -: 5435:    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
        -: 5436:        hash_len = 36;
        -: 5437:    else
        -: 5438:#endif
    #####: 5439:        hash_len = 12;
        -: 5440:
    #####: 5441:    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
    #####: 5442:        ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) + hash_len )
        -: 5443:    {
    #####: 5444:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
    #####: 5445:        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 5446:                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
    #####: 5447:        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
        -: 5448:    }
        -: 5449:
    #####: 5450:    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
        -: 5451:                      buf, hash_len ) != 0 )
        -: 5452:    {
    #####: 5453:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
    #####: 5454:        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 5455:                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
    #####: 5456:        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
        -: 5457:    }
        -: 5458:
        -: 5459:#if defined(MBEDTLS_SSL_RENEGOTIATION)
        -: 5460:    ssl->verify_data_len = hash_len;
        -: 5461:    memcpy( ssl->peer_verify_data, buf, hash_len );
        -: 5462:#endif
        -: 5463:
    #####: 5464:    if( ssl->handshake->resume != 0 )
        -: 5465:    {
        -: 5466:#if defined(MBEDTLS_SSL_CLI_C)
    #####: 5467:        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    #####: 5468:            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
        -: 5469:#endif
        -: 5470:#if defined(MBEDTLS_SSL_SRV_C)
    #####: 5471:        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
    #####: 5472:            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
        -: 5473:#endif
        -: 5474:    }
        -: 5475:    else
    #####: 5476:        ssl->state++;
        -: 5477:
        -: 5478:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 5479:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
    #####: 5480:        mbedtls_ssl_recv_flight_completed( ssl );
        -: 5481:#endif
        -: 5482:
    #####: 5483:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );
        -: 5484:
    #####: 5485:    return( 0 );
        -: 5486:}
        -: 5487:
    #####: 5488:static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
        -: 5489:{
    #####: 5490:    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
        -: 5491:
        -: 5492:#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
        -: 5493:    defined(MBEDTLS_SSL_PROTO_TLS1_1)
    #####: 5494:     mbedtls_md5_init(   &handshake->fin_md5  );
    #####: 5495:    mbedtls_sha1_init(   &handshake->fin_sha1 );
    #####: 5496:     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    #####: 5497:    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
        -: 5498:#endif
        -: 5499:#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        -: 5500:#if defined(MBEDTLS_SHA256_C)
    #####: 5501:    mbedtls_sha256_init(   &handshake->fin_sha256    );
    #####: 5502:    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
        -: 5503:#endif
        -: 5504:#if defined(MBEDTLS_SHA512_C)
    #####: 5505:    mbedtls_sha512_init(   &handshake->fin_sha512    );
    #####: 5506:    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
        -: 5507:#endif
        -: 5508:#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
        -: 5509:
    #####: 5510:    handshake->update_checksum = ssl_update_checksum_start;
        -: 5511:
        -: 5512:#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
        -: 5513:    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
        -: 5514:    mbedtls_ssl_sig_hash_set_init( &handshake->hash_algs );
        -: 5515:#endif
        -: 5516:
        -: 5517:#if defined(MBEDTLS_DHM_C)
        -: 5518:    mbedtls_dhm_init( &handshake->dhm_ctx );
        -: 5519:#endif
        -: 5520:#if defined(MBEDTLS_ECDH_C)
        -: 5521:    mbedtls_ecdh_init( &handshake->ecdh_ctx );
        -: 5522:#endif
        -: 5523:#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
        -: 5524:    mbedtls_ecjpake_init( &handshake->ecjpake_ctx );
        -: 5525:#if defined(MBEDTLS_SSL_CLI_C)
        -: 5526:    handshake->ecjpake_cache = NULL;
        -: 5527:    handshake->ecjpake_cache_len = 0;
        -: 5528:#endif
        -: 5529:#endif
        -: 5530:
        -: 5531:#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    #####: 5532:    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
        -: 5533:#endif
    #####: 5534:}
        -: 5535:
    #####: 5536:static void ssl_transform_init( mbedtls_ssl_transform *transform )
        -: 5537:{
    #####: 5538:    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
        -: 5539:
    #####: 5540:    mbedtls_cipher_init( &transform->cipher_ctx_enc );
    #####: 5541:    mbedtls_cipher_init( &transform->cipher_ctx_dec );
        -: 5542:
    #####: 5543:    mbedtls_md_init( &transform->md_ctx_enc );
    #####: 5544:    mbedtls_md_init( &transform->md_ctx_dec );
    #####: 5545:}
        -: 5546:
    #####: 5547:void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
        -: 5548:{
    #####: 5549:    memset( session, 0, sizeof(mbedtls_ssl_session) );
    #####: 5550:}
        -: 5551:
    #####: 5552:static int ssl_handshake_init( mbedtls_ssl_context *ssl )
        -: 5553:{
        -: 5554:    /* Clear old handshake information if present */
    #####: 5555:    if( ssl->transform_negotiate )
    #####: 5556:        mbedtls_ssl_transform_free( ssl->transform_negotiate );
    #####: 5557:    if( ssl->session_negotiate )
    #####: 5558:        mbedtls_ssl_session_free( ssl->session_negotiate );
    #####: 5559:    if( ssl->handshake )
    #####: 5560:        mbedtls_ssl_handshake_free( ssl->handshake );
        -: 5561:
        -: 5562:    /*
        -: 5563:     * Either the pointers are now NULL or cleared properly and can be freed.
        -: 5564:     * Now allocate missing structures.
        -: 5565:     */
    #####: 5566:    if( ssl->transform_negotiate == NULL )
        -: 5567:    {
    #####: 5568:        ssl->transform_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
        -: 5569:    }
        -: 5570:
    #####: 5571:    if( ssl->session_negotiate == NULL )
        -: 5572:    {
    #####: 5573:        ssl->session_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
        -: 5574:    }
        -: 5575:
    #####: 5576:    if( ssl->handshake == NULL )
        -: 5577:    {
    #####: 5578:        ssl->handshake = mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
        -: 5579:    }
        -: 5580:
        -: 5581:    /* All pointers should exist and can be directly freed without issue */
    #####: 5582:    if( ssl->handshake == NULL ||
    #####: 5583:        ssl->transform_negotiate == NULL ||
    #####: 5584:        ssl->session_negotiate == NULL )
        -: 5585:    {
    #####: 5586:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );
        -: 5587:
    #####: 5588:        mbedtls_free( ssl->handshake );
    #####: 5589:        mbedtls_free( ssl->transform_negotiate );
    #####: 5590:        mbedtls_free( ssl->session_negotiate );
        -: 5591:
    #####: 5592:        ssl->handshake = NULL;
    #####: 5593:        ssl->transform_negotiate = NULL;
    #####: 5594:        ssl->session_negotiate = NULL;
        -: 5595:
    #####: 5596:        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
        -: 5597:    }
        -: 5598:
        -: 5599:    /* Initialize structures */
    #####: 5600:    mbedtls_ssl_session_init( ssl->session_negotiate );
    #####: 5601:    ssl_transform_init( ssl->transform_negotiate );
    #####: 5602:    ssl_handshake_params_init( ssl->handshake );
        -: 5603:
        -: 5604:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 5605:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 5606:    {
    #####: 5607:        ssl->handshake->alt_transform_out = ssl->transform_out;
        -: 5608:
    #####: 5609:        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    #####: 5610:            ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_PREPARING;
        -: 5611:        else
    #####: 5612:            ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_WAITING;
        -: 5613:
    #####: 5614:        ssl_set_timer( ssl, 0 );
        -: 5615:    }
        -: 5616:#endif
        -: 5617:
    #####: 5618:    return( 0 );
        -: 5619:}
        -: 5620:
        -: 5621:#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)
        -: 5622:/* Dummy cookie callbacks for defaults */
    #####: 5623:static int ssl_cookie_write_dummy( void *ctx,
        -: 5624:                      unsigned char **p, unsigned char *end,
        -: 5625:                      const unsigned char *cli_id, size_t cli_id_len )
        -: 5626:{
        -: 5627:    ((void) ctx);
        -: 5628:    ((void) p);
        -: 5629:    ((void) end);
        -: 5630:    ((void) cli_id);
        -: 5631:    ((void) cli_id_len);
        -: 5632:
    #####: 5633:    return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
        -: 5634:}
        -: 5635:
    #####: 5636:static int ssl_cookie_check_dummy( void *ctx,
        -: 5637:                      const unsigned char *cookie, size_t cookie_len,
        -: 5638:                      const unsigned char *cli_id, size_t cli_id_len )
        -: 5639:{
        -: 5640:    ((void) ctx);
        -: 5641:    ((void) cookie);
        -: 5642:    ((void) cookie_len);
        -: 5643:    ((void) cli_id);
        -: 5644:    ((void) cli_id_len);
        -: 5645:
    #####: 5646:    return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
        -: 5647:}
        -: 5648:#endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY && MBEDTLS_SSL_SRV_C */
        -: 5649:
        -: 5650:/*
        -: 5651: * Initialize an SSL context
        -: 5652: */
    #####: 5653:void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
        -: 5654:{
    #####: 5655:    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
    #####: 5656:}
        -: 5657:
        -: 5658:/*
        -: 5659: * Setup an SSL context
        -: 5660: */
    #####: 5661:int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
        -: 5662:                       const mbedtls_ssl_config *conf )
        -: 5663:{
        -: 5664:    int ret;
    #####: 5665:    const size_t len = MBEDTLS_SSL_BUFFER_LEN;
        -: 5666:
    #####: 5667:    ssl->conf = conf;
        -: 5668:
        -: 5669:    /*
        -: 5670:     * Prepare base structures
        -: 5671:     */
    #####: 5672:    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
    #####: 5673:        ( ssl->out_buf = mbedtls_calloc( 1, len ) ) == NULL )
        -: 5674:    {
    #####: 5675:        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
    #####: 5676:        mbedtls_free( ssl->in_buf );
    #####: 5677:        ssl->in_buf = NULL;
    #####: 5678:        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
        -: 5679:    }
        -: 5680:
        -: 5681:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 5682:    if( conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 5683:    {
    #####: 5684:        ssl->out_hdr = ssl->out_buf;
    #####: 5685:        ssl->out_ctr = ssl->out_buf +  3;
    #####: 5686:        ssl->out_len = ssl->out_buf + 11;
    #####: 5687:        ssl->out_iv  = ssl->out_buf + 13;
    #####: 5688:        ssl->out_msg = ssl->out_buf + 13;
        -: 5689:
    #####: 5690:        ssl->in_hdr = ssl->in_buf;
    #####: 5691:        ssl->in_ctr = ssl->in_buf +  3;
    #####: 5692:        ssl->in_len = ssl->in_buf + 11;
    #####: 5693:        ssl->in_iv  = ssl->in_buf + 13;
    #####: 5694:        ssl->in_msg = ssl->in_buf + 13;
        -: 5695:    }
        -: 5696:    else
        -: 5697:#endif
        -: 5698:    {
    #####: 5699:        ssl->out_ctr = ssl->out_buf;
    #####: 5700:        ssl->out_hdr = ssl->out_buf +  8;
    #####: 5701:        ssl->out_len = ssl->out_buf + 11;
    #####: 5702:        ssl->out_iv  = ssl->out_buf + 13;
    #####: 5703:        ssl->out_msg = ssl->out_buf + 13;
        -: 5704:
    #####: 5705:        ssl->in_ctr = ssl->in_buf;
    #####: 5706:        ssl->in_hdr = ssl->in_buf +  8;
    #####: 5707:        ssl->in_len = ssl->in_buf + 11;
    #####: 5708:        ssl->in_iv  = ssl->in_buf + 13;
    #####: 5709:        ssl->in_msg = ssl->in_buf + 13;
        -: 5710:    }
        -: 5711:
    #####: 5712:    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
    #####: 5713:        return( ret );
        -: 5714:
    #####: 5715:    return( 0 );
        -: 5716:}
        -: 5717:
        -: 5718:/*
        -: 5719: * Reset an initialized and used SSL context for re-use while retaining
        -: 5720: * all application-set variables, function pointers and data.
        -: 5721: *
        -: 5722: * If partial is non-zero, keep data in the input buffer and client ID.
        -: 5723: * (Use when a DTLS client reconnects from the same port.)
        -: 5724: */
    #####: 5725:static int ssl_session_reset_int( mbedtls_ssl_context *ssl, int partial )
        -: 5726:{
        -: 5727:    int ret;
        -: 5728:
    #####: 5729:    ssl->state = MBEDTLS_SSL_HELLO_REQUEST;
        -: 5730:
        -: 5731:    /* Cancel any possibly running timer */
    #####: 5732:    ssl_set_timer( ssl, 0 );
        -: 5733:
        -: 5734:#if defined(MBEDTLS_SSL_RENEGOTIATION)
        -: 5735:    ssl->renego_status = MBEDTLS_SSL_INITIAL_HANDSHAKE;
        -: 5736:    ssl->renego_records_seen = 0;
        -: 5737:
        -: 5738:    ssl->verify_data_len = 0;
        -: 5739:    memset( ssl->own_verify_data, 0, MBEDTLS_SSL_VERIFY_DATA_MAX_LEN );
        -: 5740:    memset( ssl->peer_verify_data, 0, MBEDTLS_SSL_VERIFY_DATA_MAX_LEN );
        -: 5741:#endif
    #####: 5742:    ssl->secure_renegotiation = MBEDTLS_SSL_LEGACY_RENEGOTIATION;
        -: 5743:
    #####: 5744:    ssl->in_offt = NULL;
        -: 5745:
    #####: 5746:    ssl->in_msg = ssl->in_buf + 13;
    #####: 5747:    ssl->in_msgtype = 0;
    #####: 5748:    ssl->in_msglen = 0;
    #####: 5749:    if( partial == 0 )
    #####: 5750:        ssl->in_left = 0;
        -: 5751:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 5752:    ssl->next_record_offset = 0;
    #####: 5753:    ssl->in_epoch = 0;
        -: 5754:#endif
        -: 5755:#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
        -: 5756:    ssl_dtls_replay_reset( ssl );
        -: 5757:#endif
        -: 5758:
    #####: 5759:    ssl->in_hslen = 0;
    #####: 5760:    ssl->nb_zero = 0;
        -: 5761:
    #####: 5762:    ssl->keep_current_message = 0;
        -: 5763:
    #####: 5764:    ssl->out_msg = ssl->out_buf + 13;
    #####: 5765:    ssl->out_msgtype = 0;
    #####: 5766:    ssl->out_msglen = 0;
    #####: 5767:    ssl->out_left = 0;
        -: 5768:#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
        -: 5769:    if( ssl->split_done != MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED )
        -: 5770:        ssl->split_done = 0;
        -: 5771:#endif
        -: 5772:
    #####: 5773:    ssl->transform_in = NULL;
    #####: 5774:    ssl->transform_out = NULL;
        -: 5775:
    #####: 5776:    memset( ssl->out_buf, 0, MBEDTLS_SSL_BUFFER_LEN );
    #####: 5777:    if( partial == 0 )
    #####: 5778:        memset( ssl->in_buf, 0, MBEDTLS_SSL_BUFFER_LEN );
        -: 5779:
        -: 5780:#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
        -: 5781:    if( mbedtls_ssl_hw_record_reset != NULL )
        -: 5782:    {
        -: 5783:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "going for mbedtls_ssl_hw_record_reset()" ) );
        -: 5784:        if( ( ret = mbedtls_ssl_hw_record_reset( ssl ) ) != 0 )
        -: 5785:        {
        -: 5786:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_reset", ret );
        -: 5787:            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        -: 5788:        }
        -: 5789:    }
        -: 5790:#endif
        -: 5791:
    #####: 5792:    if( ssl->transform )
        -: 5793:    {
    #####: 5794:        mbedtls_ssl_transform_free( ssl->transform );
    #####: 5795:        mbedtls_free( ssl->transform );
    #####: 5796:        ssl->transform = NULL;
        -: 5797:    }
        -: 5798:
    #####: 5799:    if( ssl->session )
        -: 5800:    {
    #####: 5801:        mbedtls_ssl_session_free( ssl->session );
    #####: 5802:        mbedtls_free( ssl->session );
    #####: 5803:        ssl->session = NULL;
        -: 5804:    }
        -: 5805:
        -: 5806:#if defined(MBEDTLS_SSL_ALPN)
    #####: 5807:    ssl->alpn_chosen = NULL;
        -: 5808:#endif
        -: 5809:
        -: 5810:#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)
    #####: 5811:    if( partial == 0 )
        -: 5812:    {
    #####: 5813:        mbedtls_free( ssl->cli_id );
    #####: 5814:        ssl->cli_id = NULL;
    #####: 5815:        ssl->cli_id_len = 0;
        -: 5816:    }
        -: 5817:#endif
        -: 5818:
    #####: 5819:    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
    #####: 5820:        return( ret );
        -: 5821:
    #####: 5822:    return( 0 );
        -: 5823:}
        -: 5824:
        -: 5825:/*
        -: 5826: * Reset an initialized and used SSL context for re-use while retaining
        -: 5827: * all application-set variables, function pointers and data.
        -: 5828: */
    #####: 5829:int mbedtls_ssl_session_reset( mbedtls_ssl_context *ssl )
        -: 5830:{
    #####: 5831:    return( ssl_session_reset_int( ssl, 0 ) );
        -: 5832:}
        -: 5833:
        -: 5834:/*
        -: 5835: * SSL set accessors
        -: 5836: */
    #####: 5837:void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
        -: 5838:{
    #####: 5839:    conf->endpoint   = endpoint;
    #####: 5840:}
        -: 5841:
    #####: 5842:void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
        -: 5843:{
    #####: 5844:    conf->transport = transport;
    #####: 5845:}
        -: 5846:
        -: 5847:#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
        -: 5848:void mbedtls_ssl_conf_dtls_anti_replay( mbedtls_ssl_config *conf, char mode )
        -: 5849:{
        -: 5850:    conf->anti_replay = mode;
        -: 5851:}
        -: 5852:#endif
        -: 5853:
        -: 5854:#if defined(MBEDTLS_SSL_DTLS_BADMAC_LIMIT)
        -: 5855:void mbedtls_ssl_conf_dtls_badmac_limit( mbedtls_ssl_config *conf, unsigned limit )
        -: 5856:{
        -: 5857:    conf->badmac_limit = limit;
        -: 5858:}
        -: 5859:#endif
        -: 5860:
        -: 5861:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 5862:void mbedtls_ssl_conf_handshake_timeout( mbedtls_ssl_config *conf, uint32_t min, uint32_t max )
        -: 5863:{
    #####: 5864:    conf->hs_timeout_min = min;
    #####: 5865:    conf->hs_timeout_max = max;
    #####: 5866:}
        -: 5867:#endif
        -: 5868:
    #####: 5869:void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
        -: 5870:{
    #####: 5871:    conf->authmode   = authmode;
    #####: 5872:}
        -: 5873:
        -: 5874:#if defined(MBEDTLS_X509_CRT_PARSE_C)
    #####: 5875:void mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
        -: 5876:                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
        -: 5877:                     void *p_vrfy )
        -: 5878:{
    #####: 5879:    conf->f_vrfy      = f_vrfy;
    #####: 5880:    conf->p_vrfy      = p_vrfy;
    #####: 5881:}
        -: 5882:#endif /* MBEDTLS_X509_CRT_PARSE_C */
        -: 5883:
    #####: 5884:void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
        -: 5885:                  int (*f_rng)(void *, unsigned char *, size_t),
        -: 5886:                  void *p_rng )
        -: 5887:{
    #####: 5888:    conf->f_rng      = f_rng;
    #####: 5889:    conf->p_rng      = p_rng;
    #####: 5890:}
        -: 5891:
    #####: 5892:void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
        -: 5893:                  void (*f_dbg)(void *, int, const char *, int, const char *),
        -: 5894:                  void  *p_dbg )
        -: 5895:{
    #####: 5896:    conf->f_dbg      = f_dbg;
    #####: 5897:    conf->p_dbg      = p_dbg;
    #####: 5898:}
        -: 5899:
    #####: 5900:void mbedtls_ssl_set_bio( mbedtls_ssl_context *ssl,
        -: 5901:        void *p_bio,
        -: 5902:        mbedtls_ssl_send_t *f_send,
        -: 5903:        mbedtls_ssl_recv_t *f_recv,
        -: 5904:        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
        -: 5905:{
    #####: 5906:    ssl->p_bio          = p_bio;
    #####: 5907:    ssl->f_send         = f_send;
    #####: 5908:    ssl->f_recv         = f_recv;
    #####: 5909:    ssl->f_recv_timeout = f_recv_timeout;
    #####: 5910:}
        -: 5911:
    #####: 5912:void mbedtls_ssl_conf_read_timeout( mbedtls_ssl_config *conf, uint32_t timeout )
        -: 5913:{
    #####: 5914:    conf->read_timeout   = timeout;
    #####: 5915:}
        -: 5916:
    #####: 5917:void mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,
        -: 5918:                               void *p_timer,
        -: 5919:                               mbedtls_ssl_set_timer_t *f_set_timer,
        -: 5920:                               mbedtls_ssl_get_timer_t *f_get_timer )
        -: 5921:{
    #####: 5922:    ssl->p_timer        = p_timer;
    #####: 5923:    ssl->f_set_timer    = f_set_timer;
    #####: 5924:    ssl->f_get_timer    = f_get_timer;
        -: 5925:
        -: 5926:    /* Make sure we start with no timer running */
    #####: 5927:    ssl_set_timer( ssl, 0 );
    #####: 5928:}
        -: 5929:
        -: 5930:#if defined(MBEDTLS_SSL_SRV_C)
    #####: 5931:void mbedtls_ssl_conf_session_cache( mbedtls_ssl_config *conf,
        -: 5932:        void *p_cache,
        -: 5933:        int (*f_get_cache)(void *, mbedtls_ssl_session *),
        -: 5934:        int (*f_set_cache)(void *, const mbedtls_ssl_session *) )
        -: 5935:{
    #####: 5936:    conf->p_cache = p_cache;
    #####: 5937:    conf->f_get_cache = f_get_cache;
    #####: 5938:    conf->f_set_cache = f_set_cache;
    #####: 5939:}
        -: 5940:#endif /* MBEDTLS_SSL_SRV_C */
        -: 5941:
        -: 5942:#if defined(MBEDTLS_SSL_CLI_C)
    #####: 5943:int mbedtls_ssl_set_session( mbedtls_ssl_context *ssl, const mbedtls_ssl_session *session )
        -: 5944:{
        -: 5945:    int ret;
        -: 5946:
    #####: 5947:    if( ssl == NULL ||
    #####: 5948:        session == NULL ||
    #####: 5949:        ssl->session_negotiate == NULL ||
    #####: 5950:        ssl->conf->endpoint != MBEDTLS_SSL_IS_CLIENT )
        -: 5951:    {
    #####: 5952:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 5953:    }
        -: 5954:
    #####: 5955:    if( ( ret = ssl_session_copy( ssl->session_negotiate, session ) ) != 0 )
    #####: 5956:        return( ret );
        -: 5957:
    #####: 5958:    ssl->handshake->resume = 1;
        -: 5959:
    #####: 5960:    return( 0 );
        -: 5961:}
        -: 5962:#endif /* MBEDTLS_SSL_CLI_C */
        -: 5963:
    #####: 5964:void mbedtls_ssl_conf_ciphersuites( mbedtls_ssl_config *conf,
        -: 5965:                                   const int *ciphersuites )
        -: 5966:{
    #####: 5967:    conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] = ciphersuites;
    #####: 5968:    conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] = ciphersuites;
    #####: 5969:    conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] = ciphersuites;
    #####: 5970:    conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] = ciphersuites;
    #####: 5971:}
        -: 5972:
    #####: 5973:void mbedtls_ssl_conf_ciphersuites_for_version( mbedtls_ssl_config *conf,
        -: 5974:                                       const int *ciphersuites,
        -: 5975:                                       int major, int minor )
        -: 5976:{
    #####: 5977:    if( major != MBEDTLS_SSL_MAJOR_VERSION_3 )
    #####: 5978:        return;
        -: 5979:
    #####: 5980:    if( minor < MBEDTLS_SSL_MINOR_VERSION_0 || minor > MBEDTLS_SSL_MINOR_VERSION_3 )
    #####: 5981:        return;
        -: 5982:
    #####: 5983:    conf->ciphersuite_list[minor] = ciphersuites;
        -: 5984:}
        -: 5985:
        -: 5986:#if defined(MBEDTLS_X509_CRT_PARSE_C)
    #####: 5987:void mbedtls_ssl_conf_cert_profile( mbedtls_ssl_config *conf,
        -: 5988:                                    const mbedtls_x509_crt_profile *profile )
        -: 5989:{
    #####: 5990:    conf->cert_profile = profile;
    #####: 5991:}
        -: 5992:
        -: 5993:/* Append a new keycert entry to a (possibly empty) list */
    #####: 5994:static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
        -: 5995:                                mbedtls_x509_crt *cert,
        -: 5996:                                mbedtls_pk_context *key )
        -: 5997:{
        -: 5998:    mbedtls_ssl_key_cert *new;
        -: 5999:
    #####: 6000:    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    #####: 6001:    if( new == NULL )
    #####: 6002:        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
        -: 6003:
    #####: 6004:    new->cert = cert;
    #####: 6005:    new->key  = key;
    #####: 6006:    new->next = NULL;
        -: 6007:
        -: 6008:    /* Update head is the list was null, else add to the end */
    #####: 6009:    if( *head == NULL )
        -: 6010:    {
    #####: 6011:        *head = new;
        -: 6012:    }
        -: 6013:    else
        -: 6014:    {
    #####: 6015:        mbedtls_ssl_key_cert *cur = *head;
    #####: 6016:        while( cur->next != NULL )
    #####: 6017:            cur = cur->next;
    #####: 6018:        cur->next = new;
        -: 6019:    }
        -: 6020:
    #####: 6021:    return( 0 );
        -: 6022:}
        -: 6023:
    #####: 6024:int mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,
        -: 6025:                              mbedtls_x509_crt *own_cert,
        -: 6026:                              mbedtls_pk_context *pk_key )
        -: 6027:{
    #####: 6028:    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
        -: 6029:}
        -: 6030:
    #####: 6031:void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
        -: 6032:                               mbedtls_x509_crt *ca_chain,
        -: 6033:                               mbedtls_x509_crl *ca_crl )
        -: 6034:{
    #####: 6035:    conf->ca_chain   = ca_chain;
    #####: 6036:    conf->ca_crl     = ca_crl;
    #####: 6037:}
        -: 6038:#endif /* MBEDTLS_X509_CRT_PARSE_C */
        -: 6039:
        -: 6040:#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    #####: 6041:int mbedtls_ssl_set_hs_own_cert( mbedtls_ssl_context *ssl,
        -: 6042:                                 mbedtls_x509_crt *own_cert,
        -: 6043:                                 mbedtls_pk_context *pk_key )
        -: 6044:{
    #####: 6045:    return( ssl_append_key_cert( &ssl->handshake->sni_key_cert,
        -: 6046:                                 own_cert, pk_key ) );
        -: 6047:}
        -: 6048:
    #####: 6049:void mbedtls_ssl_set_hs_ca_chain( mbedtls_ssl_context *ssl,
        -: 6050:                                  mbedtls_x509_crt *ca_chain,
        -: 6051:                                  mbedtls_x509_crl *ca_crl )
        -: 6052:{
    #####: 6053:    ssl->handshake->sni_ca_chain   = ca_chain;
    #####: 6054:    ssl->handshake->sni_ca_crl     = ca_crl;
    #####: 6055:}
        -: 6056:
    #####: 6057:void mbedtls_ssl_set_hs_authmode( mbedtls_ssl_context *ssl,
        -: 6058:                                  int authmode )
        -: 6059:{
    #####: 6060:    ssl->handshake->sni_authmode = authmode;
    #####: 6061:}
        -: 6062:#endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */
        -: 6063:
        -: 6064:#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
        -: 6065:/*
        -: 6066: * Set EC J-PAKE password for current handshake
        -: 6067: */
        -: 6068:int mbedtls_ssl_set_hs_ecjpake_password( mbedtls_ssl_context *ssl,
        -: 6069:                                         const unsigned char *pw,
        -: 6070:                                         size_t pw_len )
        -: 6071:{
        -: 6072:    mbedtls_ecjpake_role role;
        -: 6073:
        -: 6074:    if( ssl->handshake == NULL || ssl->conf == NULL )
        -: 6075:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 6076:
        -: 6077:    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        -: 6078:        role = MBEDTLS_ECJPAKE_SERVER;
        -: 6079:    else
        -: 6080:        role = MBEDTLS_ECJPAKE_CLIENT;
        -: 6081:
        -: 6082:    return( mbedtls_ecjpake_setup( &ssl->handshake->ecjpake_ctx,
        -: 6083:                                   role,
        -: 6084:                                   MBEDTLS_MD_SHA256,
        -: 6085:                                   MBEDTLS_ECP_DP_SECP256R1,
        -: 6086:                                   pw, pw_len ) );
        -: 6087:}
        -: 6088:#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
        -: 6089:
        -: 6090:#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    #####: 6091:int mbedtls_ssl_conf_psk( mbedtls_ssl_config *conf,
        -: 6092:                const unsigned char *psk, size_t psk_len,
        -: 6093:                const unsigned char *psk_identity, size_t psk_identity_len )
        -: 6094:{
    #####: 6095:    if( psk == NULL || psk_identity == NULL )
    #####: 6096:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 6097:
    #####: 6098:    if( psk_len > MBEDTLS_PSK_MAX_LEN )
    #####: 6099:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 6100:
        -: 6101:    /* Identity len will be encoded on two bytes */
    #####: 6102:    if( ( psk_identity_len >> 16 ) != 0 ||
    #####: 6103:        psk_identity_len > MBEDTLS_SSL_MAX_CONTENT_LEN )
        -: 6104:    {
    #####: 6105:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 6106:    }
        -: 6107:
    #####: 6108:    if( conf->psk != NULL )
        -: 6109:    {
    #####: 6110:        mbedtls_platform_zeroize( conf->psk, conf->psk_len );
        -: 6111:
    #####: 6112:        mbedtls_free( conf->psk );
    #####: 6113:        conf->psk = NULL;
    #####: 6114:        conf->psk_len = 0;
        -: 6115:    }
    #####: 6116:    if( conf->psk_identity != NULL )
        -: 6117:    {
    #####: 6118:        mbedtls_free( conf->psk_identity );
    #####: 6119:        conf->psk_identity = NULL;
    #####: 6120:        conf->psk_identity_len = 0;
        -: 6121:    }
        -: 6122:
    #####: 6123:    if( ( conf->psk = mbedtls_calloc( 1, psk_len ) ) == NULL ||
    #####: 6124:        ( conf->psk_identity = mbedtls_calloc( 1, psk_identity_len ) ) == NULL )
        -: 6125:    {
    #####: 6126:        mbedtls_free( conf->psk );
    #####: 6127:        mbedtls_free( conf->psk_identity );
    #####: 6128:        conf->psk = NULL;
    #####: 6129:        conf->psk_identity = NULL;
    #####: 6130:        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
        -: 6131:    }
        -: 6132:
    #####: 6133:    conf->psk_len = psk_len;
    #####: 6134:    conf->psk_identity_len = psk_identity_len;
        -: 6135:
    #####: 6136:    memcpy( conf->psk, psk, conf->psk_len );
    #####: 6137:    memcpy( conf->psk_identity, psk_identity, conf->psk_identity_len );
        -: 6138:
    #####: 6139:    return( 0 );
        -: 6140:}
        -: 6141:
    #####: 6142:int mbedtls_ssl_set_hs_psk( mbedtls_ssl_context *ssl,
        -: 6143:                            const unsigned char *psk, size_t psk_len )
        -: 6144:{
    #####: 6145:    if( psk == NULL || ssl->handshake == NULL )
    #####: 6146:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 6147:
    #####: 6148:    if( psk_len > MBEDTLS_PSK_MAX_LEN )
    #####: 6149:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 6150:
    #####: 6151:    if( ssl->handshake->psk != NULL )
        -: 6152:    {
    #####: 6153:        mbedtls_platform_zeroize( ssl->handshake->psk,
    #####: 6154:                                  ssl->handshake->psk_len );
    #####: 6155:        mbedtls_free( ssl->handshake->psk );
    #####: 6156:        ssl->handshake->psk_len = 0;
        -: 6157:    }
        -: 6158:
    #####: 6159:    if( ( ssl->handshake->psk = mbedtls_calloc( 1, psk_len ) ) == NULL )
    #####: 6160:        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
        -: 6161:
    #####: 6162:    ssl->handshake->psk_len = psk_len;
    #####: 6163:    memcpy( ssl->handshake->psk, psk, ssl->handshake->psk_len );
        -: 6164:
    #####: 6165:    return( 0 );
        -: 6166:}
        -: 6167:
    #####: 6168:void mbedtls_ssl_conf_psk_cb( mbedtls_ssl_config *conf,
        -: 6169:                     int (*f_psk)(void *, mbedtls_ssl_context *, const unsigned char *,
        -: 6170:                     size_t),
        -: 6171:                     void *p_psk )
        -: 6172:{
    #####: 6173:    conf->f_psk = f_psk;
    #####: 6174:    conf->p_psk = p_psk;
    #####: 6175:}
        -: 6176:#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
        -: 6177:
        -: 6178:#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_SRV_C)
        -: 6179:
        -: 6180:#if !defined(MBEDTLS_DEPRECATED_REMOVED)
        -: 6181:int mbedtls_ssl_conf_dh_param( mbedtls_ssl_config *conf, const char *dhm_P, const char *dhm_G )
        -: 6182:{
        -: 6183:    int ret;
        -: 6184:
        -: 6185:    if( ( ret = mbedtls_mpi_read_string( &conf->dhm_P, 16, dhm_P ) ) != 0 ||
        -: 6186:        ( ret = mbedtls_mpi_read_string( &conf->dhm_G, 16, dhm_G ) ) != 0 )
        -: 6187:    {
        -: 6188:        mbedtls_mpi_free( &conf->dhm_P );
        -: 6189:        mbedtls_mpi_free( &conf->dhm_G );
        -: 6190:        return( ret );
        -: 6191:    }
        -: 6192:
        -: 6193:    return( 0 );
        -: 6194:}
        -: 6195:#endif /* MBEDTLS_DEPRECATED_REMOVED */
        -: 6196:
        -: 6197:int mbedtls_ssl_conf_dh_param_bin( mbedtls_ssl_config *conf,
        -: 6198:                                   const unsigned char *dhm_P, size_t P_len,
        -: 6199:                                   const unsigned char *dhm_G, size_t G_len )
        -: 6200:{
        -: 6201:    int ret;
        -: 6202:
        -: 6203:    if( ( ret = mbedtls_mpi_read_binary( &conf->dhm_P, dhm_P, P_len ) ) != 0 ||
        -: 6204:        ( ret = mbedtls_mpi_read_binary( &conf->dhm_G, dhm_G, G_len ) ) != 0 )
        -: 6205:    {
        -: 6206:        mbedtls_mpi_free( &conf->dhm_P );
        -: 6207:        mbedtls_mpi_free( &conf->dhm_G );
        -: 6208:        return( ret );
        -: 6209:    }
        -: 6210:
        -: 6211:    return( 0 );
        -: 6212:}
        -: 6213:
        -: 6214:int mbedtls_ssl_conf_dh_param_ctx( mbedtls_ssl_config *conf, mbedtls_dhm_context *dhm_ctx )
        -: 6215:{
        -: 6216:    int ret;
        -: 6217:
        -: 6218:    if( ( ret = mbedtls_mpi_copy( &conf->dhm_P, &dhm_ctx->P ) ) != 0 ||
        -: 6219:        ( ret = mbedtls_mpi_copy( &conf->dhm_G, &dhm_ctx->G ) ) != 0 )
        -: 6220:    {
        -: 6221:        mbedtls_mpi_free( &conf->dhm_P );
        -: 6222:        mbedtls_mpi_free( &conf->dhm_G );
        -: 6223:        return( ret );
        -: 6224:    }
        -: 6225:
        -: 6226:    return( 0 );
        -: 6227:}
        -: 6228:#endif /* MBEDTLS_DHM_C && MBEDTLS_SSL_SRV_C */
        -: 6229:
        -: 6230:#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_CLI_C)
        -: 6231:/*
        -: 6232: * Set the minimum length for Diffie-Hellman parameters
        -: 6233: */
        -: 6234:void mbedtls_ssl_conf_dhm_min_bitlen( mbedtls_ssl_config *conf,
        -: 6235:                                      unsigned int bitlen )
        -: 6236:{
        -: 6237:    conf->dhm_min_bitlen = bitlen;
        -: 6238:}
        -: 6239:#endif /* MBEDTLS_DHM_C && MBEDTLS_SSL_CLI_C */
        -: 6240:
        -: 6241:#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
        -: 6242:/*
        -: 6243: * Set allowed/preferred hashes for handshake signatures
        -: 6244: */
        -: 6245:void mbedtls_ssl_conf_sig_hashes( mbedtls_ssl_config *conf,
        -: 6246:                                  const int *hashes )
        -: 6247:{
        -: 6248:    conf->sig_hashes = hashes;
        -: 6249:}
        -: 6250:#endif /* MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */
        -: 6251:
        -: 6252:#if defined(MBEDTLS_ECP_C)
        -: 6253:/*
        -: 6254: * Set the allowed elliptic curves
        -: 6255: */
        -: 6256:void mbedtls_ssl_conf_curves( mbedtls_ssl_config *conf,
        -: 6257:                             const mbedtls_ecp_group_id *curve_list )
        -: 6258:{
        -: 6259:    conf->curve_list = curve_list;
        -: 6260:}
        -: 6261:#endif /* MBEDTLS_ECP_C */
        -: 6262:
        -: 6263:#if defined(MBEDTLS_X509_CRT_PARSE_C)
    #####: 6264:int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
        -: 6265:{
        -: 6266:    /* Initialize to suppress unnecessary compiler warning */
    #####: 6267:    size_t hostname_len = 0;
        -: 6268:
        -: 6269:    /* Check if new hostname is valid before
        -: 6270:     * making any change to current one */
    #####: 6271:    if( hostname != NULL )
        -: 6272:    {
    #####: 6273:        hostname_len = strlen( hostname );
        -: 6274:
    #####: 6275:        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
    #####: 6276:            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 6277:    }
        -: 6278:
        -: 6279:    /* Now it's clear that we will overwrite the old hostname,
        -: 6280:     * so we can free it safely */
        -: 6281:
    #####: 6282:    if( ssl->hostname != NULL )
        -: 6283:    {
    #####: 6284:        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
    #####: 6285:        mbedtls_free( ssl->hostname );
        -: 6286:    }
        -: 6287:
        -: 6288:    /* Passing NULL as hostname shall clear the old one */
        -: 6289:
    #####: 6290:    if( hostname == NULL )
        -: 6291:    {
    #####: 6292:        ssl->hostname = NULL;
        -: 6293:    }
        -: 6294:    else
        -: 6295:    {
    #####: 6296:        ssl->hostname = mbedtls_calloc( 1, hostname_len + 1 );
    #####: 6297:        if( ssl->hostname == NULL )
    #####: 6298:            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
        -: 6299:
    #####: 6300:        memcpy( ssl->hostname, hostname, hostname_len );
        -: 6301:
    #####: 6302:        ssl->hostname[hostname_len] = '\0';
        -: 6303:    }
        -: 6304:
    #####: 6305:    return( 0 );
        -: 6306:}
        -: 6307:#endif /* MBEDTLS_X509_CRT_PARSE_C */
        -: 6308:
        -: 6309:#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    #####: 6310:void mbedtls_ssl_conf_sni( mbedtls_ssl_config *conf,
        -: 6311:                  int (*f_sni)(void *, mbedtls_ssl_context *,
        -: 6312:                                const unsigned char *, size_t),
        -: 6313:                  void *p_sni )
        -: 6314:{
    #####: 6315:    conf->f_sni = f_sni;
    #####: 6316:    conf->p_sni = p_sni;
    #####: 6317:}
        -: 6318:#endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */
        -: 6319:
        -: 6320:#if defined(MBEDTLS_SSL_ALPN)
    #####: 6321:int mbedtls_ssl_conf_alpn_protocols( mbedtls_ssl_config *conf, const char **protos )
        -: 6322:{
        -: 6323:    size_t cur_len, tot_len;
        -: 6324:    const char **p;
        -: 6325:
        -: 6326:    /*
        -: 6327:     * RFC 7301 3.1: "Empty strings MUST NOT be included and byte strings
        -: 6328:     * MUST NOT be truncated."
        -: 6329:     * We check lengths now rather than later.
        -: 6330:     */
    #####: 6331:    tot_len = 0;
    #####: 6332:    for( p = protos; *p != NULL; p++ )
        -: 6333:    {
    #####: 6334:        cur_len = strlen( *p );
    #####: 6335:        tot_len += cur_len;
        -: 6336:
    #####: 6337:        if( cur_len == 0 || cur_len > 255 || tot_len > 65535 )
    #####: 6338:            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 6339:    }
        -: 6340:
    #####: 6341:    conf->alpn_list = protos;
        -: 6342:
    #####: 6343:    return( 0 );
        -: 6344:}
        -: 6345:
    #####: 6346:const char *mbedtls_ssl_get_alpn_protocol( const mbedtls_ssl_context *ssl )
        -: 6347:{
    #####: 6348:    return( ssl->alpn_chosen );
        -: 6349:}
        -: 6350:#endif /* MBEDTLS_SSL_ALPN */
        -: 6351:
    #####: 6352:void mbedtls_ssl_conf_max_version( mbedtls_ssl_config *conf, int major, int minor )
        -: 6353:{
    #####: 6354:    conf->max_major_ver = major;
    #####: 6355:    conf->max_minor_ver = minor;
    #####: 6356:}
        -: 6357:
    #####: 6358:void mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor )
        -: 6359:{
    #####: 6360:    conf->min_major_ver = major;
    #####: 6361:    conf->min_minor_ver = minor;
    #####: 6362:}
        -: 6363:
        -: 6364:#if defined(MBEDTLS_SSL_FALLBACK_SCSV) && defined(MBEDTLS_SSL_CLI_C)
        -: 6365:void mbedtls_ssl_conf_fallback( mbedtls_ssl_config *conf, char fallback )
        -: 6366:{
        -: 6367:    conf->fallback = fallback;
        -: 6368:}
        -: 6369:#endif
        -: 6370:
        -: 6371:#if defined(MBEDTLS_SSL_SRV_C)
    #####: 6372:void mbedtls_ssl_conf_cert_req_ca_list( mbedtls_ssl_config *conf,
        -: 6373:                                          char cert_req_ca_list )
        -: 6374:{
    #####: 6375:    conf->cert_req_ca_list = cert_req_ca_list;
    #####: 6376:}
        -: 6377:#endif
        -: 6378:
        -: 6379:#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
        -: 6380:void mbedtls_ssl_conf_encrypt_then_mac( mbedtls_ssl_config *conf, char etm )
        -: 6381:{
        -: 6382:    conf->encrypt_then_mac = etm;
        -: 6383:}
        -: 6384:#endif
        -: 6385:
        -: 6386:#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)
        -: 6387:void mbedtls_ssl_conf_extended_master_secret( mbedtls_ssl_config *conf, char ems )
        -: 6388:{
        -: 6389:    conf->extended_ms = ems;
        -: 6390:}
        -: 6391:#endif
        -: 6392:
        -: 6393:#if defined(MBEDTLS_ARC4_C)
        -: 6394:void mbedtls_ssl_conf_arc4_support( mbedtls_ssl_config *conf, char arc4 )
        -: 6395:{
        -: 6396:    conf->arc4_disabled = arc4;
        -: 6397:}
        -: 6398:#endif
        -: 6399:
        -: 6400:#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
        -: 6401:int mbedtls_ssl_conf_max_frag_len( mbedtls_ssl_config *conf, unsigned char mfl_code )
        -: 6402:{
        -: 6403:    if( mfl_code >= MBEDTLS_SSL_MAX_FRAG_LEN_INVALID ||
        -: 6404:        mfl_code_to_length[mfl_code] > MBEDTLS_SSL_MAX_CONTENT_LEN )
        -: 6405:    {
        -: 6406:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 6407:    }
        -: 6408:
        -: 6409:    conf->mfl_code = mfl_code;
        -: 6410:
        -: 6411:    return( 0 );
        -: 6412:}
        -: 6413:#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
        -: 6414:
        -: 6415:#if defined(MBEDTLS_SSL_TRUNCATED_HMAC)
        -: 6416:void mbedtls_ssl_conf_truncated_hmac( mbedtls_ssl_config *conf, int truncate )
        -: 6417:{
        -: 6418:    conf->trunc_hmac = truncate;
        -: 6419:}
        -: 6420:#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */
        -: 6421:
        -: 6422:#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
        -: 6423:void mbedtls_ssl_conf_cbc_record_splitting( mbedtls_ssl_config *conf, char split )
        -: 6424:{
        -: 6425:    conf->cbc_record_splitting = split;
        -: 6426:}
        -: 6427:#endif
        -: 6428:
    #####: 6429:void mbedtls_ssl_conf_legacy_renegotiation( mbedtls_ssl_config *conf, int allow_legacy )
        -: 6430:{
    #####: 6431:    conf->allow_legacy_renegotiation = allow_legacy;
    #####: 6432:}
        -: 6433:
        -: 6434:#if defined(MBEDTLS_SSL_RENEGOTIATION)
        -: 6435:void mbedtls_ssl_conf_renegotiation( mbedtls_ssl_config *conf, int renegotiation )
        -: 6436:{
        -: 6437:    conf->disable_renegotiation = renegotiation;
        -: 6438:}
        -: 6439:
        -: 6440:void mbedtls_ssl_conf_renegotiation_enforced( mbedtls_ssl_config *conf, int max_records )
        -: 6441:{
        -: 6442:    conf->renego_max_records = max_records;
        -: 6443:}
        -: 6444:
        -: 6445:void mbedtls_ssl_conf_renegotiation_period( mbedtls_ssl_config *conf,
        -: 6446:                                   const unsigned char period[8] )
        -: 6447:{
        -: 6448:    memcpy( conf->renego_period, period, 8 );
        -: 6449:}
        -: 6450:#endif /* MBEDTLS_SSL_RENEGOTIATION */
        -: 6451:
        -: 6452:#if defined(MBEDTLS_SSL_SESSION_TICKETS)
        -: 6453:#if defined(MBEDTLS_SSL_CLI_C)
        -: 6454:void mbedtls_ssl_conf_session_tickets( mbedtls_ssl_config *conf, int use_tickets )
        -: 6455:{
        -: 6456:    conf->session_tickets = use_tickets;
        -: 6457:}
        -: 6458:#endif
        -: 6459:
        -: 6460:#if defined(MBEDTLS_SSL_SRV_C)
        -: 6461:void mbedtls_ssl_conf_session_tickets_cb( mbedtls_ssl_config *conf,
        -: 6462:        mbedtls_ssl_ticket_write_t *f_ticket_write,
        -: 6463:        mbedtls_ssl_ticket_parse_t *f_ticket_parse,
        -: 6464:        void *p_ticket )
        -: 6465:{
        -: 6466:    conf->f_ticket_write = f_ticket_write;
        -: 6467:    conf->f_ticket_parse = f_ticket_parse;
        -: 6468:    conf->p_ticket       = p_ticket;
        -: 6469:}
        -: 6470:#endif
        -: 6471:#endif /* MBEDTLS_SSL_SESSION_TICKETS */
        -: 6472:
        -: 6473:#if defined(MBEDTLS_SSL_EXPORT_KEYS)
        -: 6474:void mbedtls_ssl_conf_export_keys_cb( mbedtls_ssl_config *conf,
        -: 6475:        mbedtls_ssl_export_keys_t *f_export_keys,
        -: 6476:        void *p_export_keys )
        -: 6477:{
        -: 6478:    conf->f_export_keys = f_export_keys;
        -: 6479:    conf->p_export_keys = p_export_keys;
        -: 6480:}
        -: 6481:#endif
        -: 6482:
        -: 6483:/*
        -: 6484: * SSL get accessors
        -: 6485: */
    #####: 6486:size_t mbedtls_ssl_get_bytes_avail( const mbedtls_ssl_context *ssl )
        -: 6487:{
    #####: 6488:    return( ssl->in_offt == NULL ? 0 : ssl->in_msglen );
        -: 6489:}
        -: 6490:
    #####: 6491:int mbedtls_ssl_check_pending( const mbedtls_ssl_context *ssl )
        -: 6492:{
        -: 6493:    /*
        -: 6494:     * Case A: We're currently holding back
        -: 6495:     * a message for further processing.
        -: 6496:     */
        -: 6497:
    #####: 6498:    if( ssl->keep_current_message == 1 )
        -: 6499:    {
    #####: 6500:        MBEDTLS_SSL_DEBUG_MSG( 3, ( "ssl_check_pending: record held back for processing" ) );
    #####: 6501:        return( 1 );
        -: 6502:    }
        -: 6503:
        -: 6504:    /*
        -: 6505:     * Case B: Further records are pending in the current datagram.
        -: 6506:     */
        -: 6507:
        -: 6508:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 6509:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
    #####: 6510:        ssl->in_left > ssl->next_record_offset )
        -: 6511:    {
    #####: 6512:        MBEDTLS_SSL_DEBUG_MSG( 3, ( "ssl_check_pending: more records within current datagram" ) );
    #####: 6513:        return( 1 );
        -: 6514:    }
        -: 6515:#endif /* MBEDTLS_SSL_PROTO_DTLS */
        -: 6516:
        -: 6517:    /*
        -: 6518:     * Case C: A handshake message is being processed.
        -: 6519:     */
        -: 6520:
    #####: 6521:    if( ssl->in_hslen > 0 && ssl->in_hslen < ssl->in_msglen )
        -: 6522:    {
    #####: 6523:        MBEDTLS_SSL_DEBUG_MSG( 3, ( "ssl_check_pending: more handshake messages within current record" ) );
    #####: 6524:        return( 1 );
        -: 6525:    }
        -: 6526:
        -: 6527:    /*
        -: 6528:     * Case D: An application data message is being processed
        -: 6529:     */
    #####: 6530:    if( ssl->in_offt != NULL )
        -: 6531:    {
    #####: 6532:        MBEDTLS_SSL_DEBUG_MSG( 3, ( "ssl_check_pending: application data record is being processed" ) );
    #####: 6533:        return( 1 );
        -: 6534:    }
        -: 6535:
        -: 6536:    /*
        -: 6537:     * In all other cases, the rest of the message can be dropped.
        -: 6538:     * As in ssl_read_record_layer, this needs to be adapted if
        -: 6539:     * we implement support for multiple alerts in single records.
        -: 6540:     */
        -: 6541:
    #####: 6542:    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ssl_check_pending: nothing pending" ) );
    #####: 6543:    return( 0 );
        -: 6544:}
        -: 6545:
    #####: 6546:uint32_t mbedtls_ssl_get_verify_result( const mbedtls_ssl_context *ssl )
        -: 6547:{
    #####: 6548:    if( ssl->session != NULL )
    #####: 6549:        return( ssl->session->verify_result );
        -: 6550:
    #####: 6551:    if( ssl->session_negotiate != NULL )
    #####: 6552:        return( ssl->session_negotiate->verify_result );
        -: 6553:
    #####: 6554:    return( 0xFFFFFFFF );
        -: 6555:}
        -: 6556:
    #####: 6557:const char *mbedtls_ssl_get_ciphersuite( const mbedtls_ssl_context *ssl )
        -: 6558:{
    #####: 6559:    if( ssl == NULL || ssl->session == NULL )
    #####: 6560:        return( NULL );
        -: 6561:
    #####: 6562:    return mbedtls_ssl_get_ciphersuite_name( ssl->session->ciphersuite );
        -: 6563:}
        -: 6564:
    #####: 6565:const char *mbedtls_ssl_get_version( const mbedtls_ssl_context *ssl )
        -: 6566:{
        -: 6567:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 6568:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 6569:    {
    #####: 6570:        switch( ssl->minor_ver )
        -: 6571:        {
    #####: 6572:            case MBEDTLS_SSL_MINOR_VERSION_2:
    #####: 6573:                return( "DTLSv1.0" );
        -: 6574:
    #####: 6575:            case MBEDTLS_SSL_MINOR_VERSION_3:
    #####: 6576:                return( "DTLSv1.2" );
        -: 6577:
    #####: 6578:            default:
    #####: 6579:                return( "unknown (DTLS)" );
        -: 6580:        }
        -: 6581:    }
        -: 6582:#endif
        -: 6583:
    #####: 6584:    switch( ssl->minor_ver )
        -: 6585:    {
    #####: 6586:        case MBEDTLS_SSL_MINOR_VERSION_0:
    #####: 6587:            return( "SSLv3.0" );
        -: 6588:
    #####: 6589:        case MBEDTLS_SSL_MINOR_VERSION_1:
    #####: 6590:            return( "TLSv1.0" );
        -: 6591:
    #####: 6592:        case MBEDTLS_SSL_MINOR_VERSION_2:
    #####: 6593:            return( "TLSv1.1" );
        -: 6594:
    #####: 6595:        case MBEDTLS_SSL_MINOR_VERSION_3:
    #####: 6596:            return( "TLSv1.2" );
        -: 6597:
    #####: 6598:        default:
    #####: 6599:            return( "unknown" );
        -: 6600:    }
        -: 6601:}
        -: 6602:
    #####: 6603:int mbedtls_ssl_get_record_expansion( const mbedtls_ssl_context *ssl )
        -: 6604:{
        -: 6605:    size_t transform_expansion;
    #####: 6606:    const mbedtls_ssl_transform *transform = ssl->transform_out;
        -: 6607:
        -: 6608:#if defined(MBEDTLS_ZLIB_SUPPORT)
        -: 6609:    if( ssl->session_out->compression != MBEDTLS_SSL_COMPRESS_NULL )
        -: 6610:        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
        -: 6611:#endif
        -: 6612:
    #####: 6613:    if( transform == NULL )
    #####: 6614:        return( (int) mbedtls_ssl_hdr_len( ssl ) );
        -: 6615:
    #####: 6616:    switch( mbedtls_cipher_get_cipher_mode( &transform->cipher_ctx_enc ) )
        -: 6617:    {
    #####: 6618:        case MBEDTLS_MODE_GCM:
        -: 6619:        case MBEDTLS_MODE_CCM:
        -: 6620:        case MBEDTLS_MODE_STREAM:
    #####: 6621:            transform_expansion = transform->minlen;
    #####: 6622:            break;
        -: 6623:
    #####: 6624:        case MBEDTLS_MODE_CBC:
    #####: 6625:            transform_expansion = transform->maclen
    #####: 6626:                      + mbedtls_cipher_get_block_size( &transform->cipher_ctx_enc );
    #####: 6627:            break;
        -: 6628:
    #####: 6629:        default:
    #####: 6630:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 6631:            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 6632:    }
        -: 6633:
    #####: 6634:    return( (int)( mbedtls_ssl_hdr_len( ssl ) + transform_expansion ) );
        -: 6635:}
        -: 6636:
        -: 6637:#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
        -: 6638:size_t mbedtls_ssl_get_max_frag_len( const mbedtls_ssl_context *ssl )
        -: 6639:{
        -: 6640:    size_t max_len;
        -: 6641:
        -: 6642:    /*
        -: 6643:     * Assume mfl_code is correct since it was checked when set
        -: 6644:     */
        -: 6645:    max_len = mfl_code_to_length[ssl->conf->mfl_code];
        -: 6646:
        -: 6647:    /*
        -: 6648:     * Check if a smaller max length was negotiated
        -: 6649:     */
        -: 6650:    if( ssl->session_out != NULL &&
        -: 6651:        mfl_code_to_length[ssl->session_out->mfl_code] < max_len )
        -: 6652:    {
        -: 6653:        max_len = mfl_code_to_length[ssl->session_out->mfl_code];
        -: 6654:    }
        -: 6655:
        -: 6656:    return max_len;
        -: 6657:}
        -: 6658:#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
        -: 6659:
        -: 6660:#if defined(MBEDTLS_X509_CRT_PARSE_C)
    #####: 6661:const mbedtls_x509_crt *mbedtls_ssl_get_peer_cert( const mbedtls_ssl_context *ssl )
        -: 6662:{
    #####: 6663:    if( ssl == NULL || ssl->session == NULL )
    #####: 6664:        return( NULL );
        -: 6665:
    #####: 6666:    return( ssl->session->peer_cert );
        -: 6667:}
        -: 6668:#endif /* MBEDTLS_X509_CRT_PARSE_C */
        -: 6669:
        -: 6670:#if defined(MBEDTLS_SSL_CLI_C)
    #####: 6671:int mbedtls_ssl_get_session( const mbedtls_ssl_context *ssl, mbedtls_ssl_session *dst )
        -: 6672:{
    #####: 6673:    if( ssl == NULL ||
    #####: 6674:        dst == NULL ||
    #####: 6675:        ssl->session == NULL ||
    #####: 6676:        ssl->conf->endpoint != MBEDTLS_SSL_IS_CLIENT )
        -: 6677:    {
    #####: 6678:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 6679:    }
        -: 6680:
    #####: 6681:    return( ssl_session_copy( dst, ssl->session ) );
        -: 6682:}
        -: 6683:#endif /* MBEDTLS_SSL_CLI_C */
        -: 6684:
        -: 6685:/*
        -: 6686: * Perform a single step of the SSL handshake
        -: 6687: */
    #####: 6688:int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
        -: 6689:{
    #####: 6690:    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
        -: 6691:
    #####: 6692:    if( ssl == NULL || ssl->conf == NULL )
    #####: 6693:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 6694:
        -: 6695:#if defined(MBEDTLS_SSL_CLI_C)
    #####: 6696:    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    #####: 6697:        ret = mbedtls_ssl_handshake_client_step( ssl );
        -: 6698:#endif
        -: 6699:#if defined(MBEDTLS_SSL_SRV_C)
    #####: 6700:    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
    #####: 6701:        ret = mbedtls_ssl_handshake_server_step( ssl );
        -: 6702:#endif
        -: 6703:
    #####: 6704:    return( ret );
        -: 6705:}
        -: 6706:
        -: 6707:/*
        -: 6708: * Perform the SSL handshake
        -: 6709: */
    #####: 6710:int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
        -: 6711:{
    #####: 6712:    int ret = 0;
        -: 6713:
    #####: 6714:    if( ssl == NULL || ssl->conf == NULL )
    #####: 6715:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 6716:
    #####: 6717:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );
        -: 6718:
    #####: 6719:    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
        -: 6720:    {
    #####: 6721:        ret = mbedtls_ssl_handshake_step( ssl );
        -: 6722:
    #####: 6723:        if( ret != 0 )
    #####: 6724:            break;
        -: 6725:    }
        -: 6726:
    #####: 6727:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );
        -: 6728:
    #####: 6729:    return( ret );
        -: 6730:}
        -: 6731:
        -: 6732:#if defined(MBEDTLS_SSL_RENEGOTIATION)
        -: 6733:#if defined(MBEDTLS_SSL_SRV_C)
        -: 6734:/*
        -: 6735: * Write HelloRequest to request renegotiation on server
        -: 6736: */
        -: 6737:static int ssl_write_hello_request( mbedtls_ssl_context *ssl )
        -: 6738:{
        -: 6739:    int ret;
        -: 6740:
        -: 6741:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write hello request" ) );
        -: 6742:
        -: 6743:    ssl->out_msglen  = 4;
        -: 6744:    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
        -: 6745:    ssl->out_msg[0]  = MBEDTLS_SSL_HS_HELLO_REQUEST;
        -: 6746:
        -: 6747:    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
        -: 6748:    {
        -: 6749:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
        -: 6750:        return( ret );
        -: 6751:    }
        -: 6752:
        -: 6753:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write hello request" ) );
        -: 6754:
        -: 6755:    return( 0 );
        -: 6756:}
        -: 6757:#endif /* MBEDTLS_SSL_SRV_C */
        -: 6758:
        -: 6759:/*
        -: 6760: * Actually renegotiate current connection, triggered by either:
        -: 6761: * - any side: calling mbedtls_ssl_renegotiate(),
        -: 6762: * - client: receiving a HelloRequest during mbedtls_ssl_read(),
        -: 6763: * - server: receiving any handshake message on server during mbedtls_ssl_read() after
        -: 6764: *   the initial handshake is completed.
        -: 6765: * If the handshake doesn't complete due to waiting for I/O, it will continue
        -: 6766: * during the next calls to mbedtls_ssl_renegotiate() or mbedtls_ssl_read() respectively.
        -: 6767: */
        -: 6768:static int ssl_start_renegotiation( mbedtls_ssl_context *ssl )
        -: 6769:{
        -: 6770:    int ret;
        -: 6771:
        -: 6772:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> renegotiate" ) );
        -: 6773:
        -: 6774:    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
        -: 6775:        return( ret );
        -: 6776:
        -: 6777:    /* RFC 6347 4.2.2: "[...] the HelloRequest will have message_seq = 0 and
        -: 6778:     * the ServerHello will have message_seq = 1" */
        -: 6779:#if defined(MBEDTLS_SSL_PROTO_DTLS)
        -: 6780:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
        -: 6781:        ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )
        -: 6782:    {
        -: 6783:        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        -: 6784:            ssl->handshake->out_msg_seq = 1;
        -: 6785:        else
        -: 6786:            ssl->handshake->in_msg_seq = 1;
        -: 6787:    }
        -: 6788:#endif
        -: 6789:
        -: 6790:    ssl->state = MBEDTLS_SSL_HELLO_REQUEST;
        -: 6791:    ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS;
        -: 6792:
        -: 6793:    if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
        -: 6794:    {
        -: 6795:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
        -: 6796:        return( ret );
        -: 6797:    }
        -: 6798:
        -: 6799:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= renegotiate" ) );
        -: 6800:
        -: 6801:    return( 0 );
        -: 6802:}
        -: 6803:
        -: 6804:/*
        -: 6805: * Renegotiate current connection on client,
        -: 6806: * or request renegotiation on server
        -: 6807: */
        -: 6808:int mbedtls_ssl_renegotiate( mbedtls_ssl_context *ssl )
        -: 6809:{
        -: 6810:    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
        -: 6811:
        -: 6812:    if( ssl == NULL || ssl->conf == NULL )
        -: 6813:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 6814:
        -: 6815:#if defined(MBEDTLS_SSL_SRV_C)
        -: 6816:    /* On server, just send the request */
        -: 6817:    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        -: 6818:    {
        -: 6819:        if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
        -: 6820:            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 6821:
        -: 6822:        ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_PENDING;
        -: 6823:
        -: 6824:        /* Did we already try/start sending HelloRequest? */
        -: 6825:        if( ssl->out_left != 0 )
        -: 6826:            return( mbedtls_ssl_flush_output( ssl ) );
        -: 6827:
        -: 6828:        return( ssl_write_hello_request( ssl ) );
        -: 6829:    }
        -: 6830:#endif /* MBEDTLS_SSL_SRV_C */
        -: 6831:
        -: 6832:#if defined(MBEDTLS_SSL_CLI_C)
        -: 6833:    /*
        -: 6834:     * On client, either start the renegotiation process or,
        -: 6835:     * if already in progress, continue the handshake
        -: 6836:     */
        -: 6837:    if( ssl->renego_status != MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
        -: 6838:    {
        -: 6839:        if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
        -: 6840:            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 6841:
        -: 6842:        if( ( ret = ssl_start_renegotiation( ssl ) ) != 0 )
        -: 6843:        {
        -: 6844:            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_start_renegotiation", ret );
        -: 6845:            return( ret );
        -: 6846:        }
        -: 6847:    }
        -: 6848:    else
        -: 6849:    {
        -: 6850:        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
        -: 6851:        {
        -: 6852:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
        -: 6853:            return( ret );
        -: 6854:        }
        -: 6855:    }
        -: 6856:#endif /* MBEDTLS_SSL_CLI_C */
        -: 6857:
        -: 6858:    return( ret );
        -: 6859:}
        -: 6860:
        -: 6861:/*
        -: 6862: * Check record counters and renegotiate if they're above the limit.
        -: 6863: */
        -: 6864:static int ssl_check_ctr_renegotiate( mbedtls_ssl_context *ssl )
        -: 6865:{
        -: 6866:    size_t ep_len = ssl_ep_len( ssl );
        -: 6867:    int in_ctr_cmp;
        -: 6868:    int out_ctr_cmp;
        -: 6869:
        -: 6870:    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER ||
        -: 6871:        ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING ||
        -: 6872:        ssl->conf->disable_renegotiation == MBEDTLS_SSL_RENEGOTIATION_DISABLED )
        -: 6873:    {
        -: 6874:        return( 0 );
        -: 6875:    }
        -: 6876:
        -: 6877:    in_ctr_cmp = memcmp( ssl->in_ctr + ep_len,
        -: 6878:                        ssl->conf->renego_period + ep_len, 8 - ep_len );
        -: 6879:    out_ctr_cmp = memcmp( ssl->out_ctr + ep_len,
        -: 6880:                          ssl->conf->renego_period + ep_len, 8 - ep_len );
        -: 6881:
        -: 6882:    if( in_ctr_cmp <= 0 && out_ctr_cmp <= 0 )
        -: 6883:    {
        -: 6884:        return( 0 );
        -: 6885:    }
        -: 6886:
        -: 6887:    MBEDTLS_SSL_DEBUG_MSG( 1, ( "record counter limit reached: renegotiate" ) );
        -: 6888:    return( mbedtls_ssl_renegotiate( ssl ) );
        -: 6889:}
        -: 6890:#endif /* MBEDTLS_SSL_RENEGOTIATION */
        -: 6891:
        -: 6892:/*
        -: 6893: * Receive application data decrypted from the SSL layer
        -: 6894: */
    #####: 6895:int mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )
        -: 6896:{
        -: 6897:    int ret;
        -: 6898:    size_t n;
        -: 6899:
    #####: 6900:    if( ssl == NULL || ssl->conf == NULL )
    #####: 6901:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 6902:
    #####: 6903:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read" ) );
        -: 6904:
        -: 6905:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 6906:    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 6907:    {
    #####: 6908:        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
    #####: 6909:            return( ret );
        -: 6910:
    #####: 6911:        if( ssl->handshake != NULL &&
    #####: 6912:            ssl->handshake->retransmit_state == MBEDTLS_SSL_RETRANS_SENDING )
        -: 6913:        {
    #####: 6914:            if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )
    #####: 6915:                return( ret );
        -: 6916:        }
        -: 6917:    }
        -: 6918:#endif
        -: 6919:
        -: 6920:    /*
        -: 6921:     * Check if renegotiation is necessary and/or handshake is
        -: 6922:     * in process. If yes, perform/continue, and fall through
        -: 6923:     * if an unexpected packet is received while the client
        -: 6924:     * is waiting for the ServerHello.
        -: 6925:     *
        -: 6926:     * (There is no equivalent to the last condition on
        -: 6927:     *  the server-side as it is not treated as within
        -: 6928:     *  a handshake while waiting for the ClientHello
        -: 6929:     *  after a renegotiation request.)
        -: 6930:     */
        -: 6931:
        -: 6932:#if defined(MBEDTLS_SSL_RENEGOTIATION)
        -: 6933:    ret = ssl_check_ctr_renegotiate( ssl );
        -: 6934:    if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
        -: 6935:        ret != 0 )
        -: 6936:    {
        -: 6937:        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        -: 6938:        return( ret );
        -: 6939:    }
        -: 6940:#endif
        -: 6941:
    #####: 6942:    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
        -: 6943:    {
    #####: 6944:        ret = mbedtls_ssl_handshake( ssl );
    #####: 6945:        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
        -: 6946:            ret != 0 )
        -: 6947:        {
    #####: 6948:            if (ret==MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED)
    #####: 6949:                MBEDTLS_SSL_DEBUG_MSG( 3, ("MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED") );
        -: 6950:            else
    #####: 6951:                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
    #####: 6952:            return( ret );
        -: 6953:        }
        -: 6954:    }
        -: 6955:
        -: 6956:    /* Loop as long as no application data record is available */
    #####: 6957:    while( ssl->in_offt == NULL )
        -: 6958:    {
        -: 6959:        /* Start timer if not already running */
    #####: 6960:        if( ssl->f_get_timer != NULL &&
    #####: 6961:            ssl->f_get_timer( ssl->p_timer ) == -1 )
        -: 6962:        {
    #####: 6963:            ssl_set_timer( ssl, ssl->conf->read_timeout );
        -: 6964:        }
        -: 6965:
    #####: 6966:        if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
        -: 6967:        {
    #####: 6968:            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
    #####: 6969:                return( 0 );
        -: 6970:
    #####: 6971:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
    #####: 6972:            return( ret );
        -: 6973:        }
        -: 6974:
    #####: 6975:        if( ssl->in_msglen  == 0 &&
    #####: 6976:            ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )
        -: 6977:        {
        -: 6978:            /*
        -: 6979:             * OpenSSL sends empty messages to randomize the IV
        -: 6980:             */
    #####: 6981:            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
        -: 6982:            {
    #####: 6983:                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
    #####: 6984:                    return( 0 );
        -: 6985:
    #####: 6986:                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
    #####: 6987:                return( ret );
        -: 6988:            }
        -: 6989:        }
        -: 6990:
    #####: 6991:        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
        -: 6992:        {
    #####: 6993:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received handshake message" ) );
        -: 6994:
        -: 6995:            /*
        -: 6996:             * - For client-side, expect SERVER_HELLO_REQUEST.
        -: 6997:             * - For server-side, expect CLIENT_HELLO.
        -: 6998:             * - Fail (TLS) or silently drop record (DTLS) in other cases.
        -: 6999:             */
        -: 7000:
        -: 7001:#if defined(MBEDTLS_SSL_CLI_C)
    #####: 7002:            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
    #####: 7003:                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
    #####: 7004:                  ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ) )
        -: 7005:            {
    #####: 7006:                MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not HelloRequest)" ) );
        -: 7007:
        -: 7008:                /* With DTLS, drop the packet (probably from last handshake) */
        -: 7009:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 7010:                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 7011:                {
    #####: 7012:                    continue;
        -: 7013:                }
        -: 7014:#endif
    #####: 7015:                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        -: 7016:            }
        -: 7017:#endif /* MBEDTLS_SSL_CLI_C */
        -: 7018:
        -: 7019:#if defined(MBEDTLS_SSL_SRV_C)
    #####: 7020:            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
    #####: 7021:                ssl->in_msg[0] != MBEDTLS_SSL_HS_CLIENT_HELLO )
        -: 7022:            {
    #####: 7023:                MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not ClientHello)" ) );
        -: 7024:
        -: 7025:                /* With DTLS, drop the packet (probably from last handshake) */
        -: 7026:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 7027:                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 7028:                {
    #####: 7029:                    continue;
        -: 7030:                }
        -: 7031:#endif
    #####: 7032:                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        -: 7033:            }
        -: 7034:#endif /* MBEDTLS_SSL_SRV_C */
        -: 7035:
        -: 7036:#if defined(MBEDTLS_SSL_RENEGOTIATION)
        -: 7037:            /* Determine whether renegotiation attempt should be accepted */
        -: 7038:            if( ! ( ssl->conf->disable_renegotiation == MBEDTLS_SSL_RENEGOTIATION_DISABLED ||
        -: 7039:                    ( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
        -: 7040:                      ssl->conf->allow_legacy_renegotiation ==
        -: 7041:                                                   MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION ) ) )
        -: 7042:            {
        -: 7043:                /*
        -: 7044:                 * Accept renegotiation request
        -: 7045:                 */
        -: 7046:
        -: 7047:                /* DTLS clients need to know renego is server-initiated */
        -: 7048:#if defined(MBEDTLS_SSL_PROTO_DTLS)
        -: 7049:                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
        -: 7050:                    ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
        -: 7051:                {
        -: 7052:                    ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_PENDING;
        -: 7053:                }
        -: 7054:#endif
        -: 7055:                ret = ssl_start_renegotiation( ssl );
        -: 7056:                if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
        -: 7057:                    ret != 0 )
        -: 7058:                {
        -: 7059:                    MBEDTLS_SSL_DEBUG_RET( 1, "ssl_start_renegotiation", ret );
        -: 7060:                    return( ret );
        -: 7061:                }
        -: 7062:            }
        -: 7063:            else
        -: 7064:#endif /* MBEDTLS_SSL_RENEGOTIATION */
        -: 7065:            {
        -: 7066:                /*
        -: 7067:                 * Refuse renegotiation
        -: 7068:                 */
        -: 7069:
    #####: 7070:                MBEDTLS_SSL_DEBUG_MSG( 3, ( "refusing renegotiation, sending alert" ) );
        -: 7071:
        -: 7072:#if defined(MBEDTLS_SSL_PROTO_SSL3)
        -: 7073:                if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
        -: 7074:                {
        -: 7075:                    /* SSLv3 does not have a "no_renegotiation" warning, so
        -: 7076:                       we send a fatal alert and abort the connection. */
        -: 7077:                    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 7078:                                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        -: 7079:                    return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        -: 7080:                }
        -: 7081:                else
        -: 7082:#endif /* MBEDTLS_SSL_PROTO_SSL3 */
        -: 7083:#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        -: 7084:    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    #####: 7085:                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
        -: 7086:                {
    #####: 7087:                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
        -: 7088:                                    MBEDTLS_SSL_ALERT_LEVEL_WARNING,
        -: 7089:                                    MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION ) ) != 0 )
        -: 7090:                    {
    #####: 7091:                        return( ret );
        -: 7092:                    }
        -: 7093:                }
        -: 7094:                else
        -: 7095:#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||
        -: 7096:          MBEDTLS_SSL_PROTO_TLS1_2 */
        -: 7097:                {
    #####: 7098:                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    #####: 7099:                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        -: 7100:                }
        -: 7101:            }
        -: 7102:
        -: 7103:            /* At this point, we don't know whether the renegotiation has been
        -: 7104:             * completed or not. The cases to consider are the following:
        -: 7105:             * 1) The renegotiation is complete. In this case, no new record
        -: 7106:             *    has been read yet.
        -: 7107:             * 2) The renegotiation is incomplete because the client received
        -: 7108:             *    an application data record while awaiting the ServerHello.
        -: 7109:             * 3) The renegotiation is incomplete because the client received
        -: 7110:             *    a non-handshake, non-application data message while awaiting
        -: 7111:             *    the ServerHello.
        -: 7112:             * In each of these case, looping will be the proper action:
        -: 7113:             * - For 1), the next iteration will read a new record and check
        -: 7114:             *   if it's application data.
        -: 7115:             * - For 2), the loop condition isn't satisfied as application data
        -: 7116:             *   is present, hence continue is the same as break
        -: 7117:             * - For 3), the loop condition is satisfied and read_record
        -: 7118:             *   will re-deliver the message that was held back by the client
        -: 7119:             *   when expecting the ServerHello.
        -: 7120:             */
    #####: 7121:            continue;
        -: 7122:        }
        -: 7123:#if defined(MBEDTLS_SSL_RENEGOTIATION)
        -: 7124:        else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )
        -: 7125:        {
        -: 7126:            if( ssl->conf->renego_max_records >= 0 )
        -: 7127:            {
        -: 7128:                if( ++ssl->renego_records_seen > ssl->conf->renego_max_records )
        -: 7129:                {
        -: 7130:                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation requested, "
        -: 7131:                                        "but not honored by client" ) );
        -: 7132:                    return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        -: 7133:                }
        -: 7134:            }
        -: 7135:        }
        -: 7136:#endif /* MBEDTLS_SSL_RENEGOTIATION */
        -: 7137:
        -: 7138:        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
    #####: 7139:        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
        -: 7140:        {
    #####: 7141:            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
    #####: 7142:            return( MBEDTLS_ERR_SSL_WANT_READ );
        -: 7143:        }
        -: 7144:
    #####: 7145:        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
        -: 7146:        {
    #####: 7147:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
    #####: 7148:            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        -: 7149:        }
        -: 7150:
    #####: 7151:        ssl->in_offt = ssl->in_msg;
        -: 7152:
        -: 7153:        /* We're going to return something now, cancel timer,
        -: 7154:         * except if handshake (renegotiation) is in progress */
    #####: 7155:        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
    #####: 7156:            ssl_set_timer( ssl, 0 );
        -: 7157:
        -: 7158:#if defined(MBEDTLS_SSL_PROTO_DTLS)
        -: 7159:        /* If we requested renego but received AppData, resend HelloRequest.
        -: 7160:         * Do it now, after setting in_offt, to avoid taking this branch
        -: 7161:         * again if ssl_write_hello_request() returns WANT_WRITE */
        -: 7162:#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_RENEGOTIATION)
        -: 7163:        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
        -: 7164:            ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )
        -: 7165:        {
        -: 7166:            if( ( ret = ssl_resend_hello_request( ssl ) ) != 0 )
        -: 7167:            {
        -: 7168:                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_resend_hello_request", ret );
        -: 7169:                return( ret );
        -: 7170:            }
        -: 7171:        }
        -: 7172:#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
        -: 7173:#endif /* MBEDTLS_SSL_PROTO_DTLS */
        -: 7174:    }
        -: 7175:
    #####: 7176:    n = ( len < ssl->in_msglen )
        -: 7177:        ? len : ssl->in_msglen;
        -: 7178:
    #####: 7179:    memcpy( buf, ssl->in_offt, n );
    #####: 7180:    ssl->in_msglen -= n;
        -: 7181:
    #####: 7182:    if( ssl->in_msglen == 0 )
        -: 7183:    {
        -: 7184:        /* all bytes consumed */
    #####: 7185:        ssl->in_offt = NULL;
    #####: 7186:        ssl->keep_current_message = 0;
        -: 7187:    }
        -: 7188:    else
        -: 7189:    {
        -: 7190:        /* more data available */
    #####: 7191:        ssl->in_offt += n;
        -: 7192:    }
        -: 7193:
    #####: 7194:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );
        -: 7195:
    #####: 7196:    return( (int) n );
        -: 7197:}
        -: 7198:
        -: 7199:/*
        -: 7200: * Send application data to be encrypted by the SSL layer,
        -: 7201: * taking care of max fragment length and buffer size
        -: 7202: */
    #####: 7203:static int ssl_write_real( mbedtls_ssl_context *ssl,
        -: 7204:                           const unsigned char *buf, size_t len )
        -: 7205:{
        -: 7206:    int ret;
        -: 7207:#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
        -: 7208:    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
        -: 7209:#else
    #####: 7210:    size_t max_len = MBEDTLS_SSL_MAX_CONTENT_LEN;
        -: 7211:#endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
    #####: 7212:    if( len > max_len )
        -: 7213:    {
        -: 7214:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 7215:        if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 7216:        {
    #####: 7217:            MBEDTLS_SSL_DEBUG_MSG( 1, ( "fragment larger than the (negotiated) "
        -: 7218:                                "maximum fragment length: %d > %d",
        -: 7219:                                len, max_len ) );
    #####: 7220:            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 7221:        }
        -: 7222:        else
        -: 7223:#endif
    #####: 7224:            len = max_len;
        -: 7225:    }
        -: 7226:
    #####: 7227:    if( ssl->out_left != 0 )
        -: 7228:    {
    #####: 7229:        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
        -: 7230:        {
    #####: 7231:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
    #####: 7232:            return( ret );
        -: 7233:        }
        -: 7234:    }
        -: 7235:    else
        -: 7236:    {
    #####: 7237:        ssl->out_msglen  = len;
    #####: 7238:        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
    #####: 7239:        memcpy( ssl->out_msg, buf, len );
        -: 7240:
    #####: 7241:        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
        -: 7242:        {
    #####: 7243:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
    #####: 7244:            return( ret );
        -: 7245:        }
        -: 7246:    }
        -: 7247:
    #####: 7248:    return( (int) len );
        -: 7249:}
        -: 7250:
        -: 7251:/*
        -: 7252: * Write application data, doing 1/n-1 splitting if necessary.
        -: 7253: *
        -: 7254: * With non-blocking I/O, ssl_write_real() may return WANT_WRITE,
        -: 7255: * then the caller will call us again with the same arguments, so
        -: 7256: * remember whether we already did the split or not.
        -: 7257: */
        -: 7258:#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
        -: 7259:static int ssl_write_split( mbedtls_ssl_context *ssl,
        -: 7260:                            const unsigned char *buf, size_t len )
        -: 7261:{
        -: 7262:    int ret;
        -: 7263:
        -: 7264:    if( ssl->conf->cbc_record_splitting ==
        -: 7265:            MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED ||
        -: 7266:        len <= 1 ||
        -: 7267:        ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_1 ||
        -: 7268:        mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc )
        -: 7269:                                != MBEDTLS_MODE_CBC )
        -: 7270:    {
        -: 7271:        return( ssl_write_real( ssl, buf, len ) );
        -: 7272:    }
        -: 7273:
        -: 7274:    if( ssl->split_done == 0 )
        -: 7275:    {
        -: 7276:        if( ( ret = ssl_write_real( ssl, buf, 1 ) ) <= 0 )
        -: 7277:            return( ret );
        -: 7278:        ssl->split_done = 1;
        -: 7279:    }
        -: 7280:
        -: 7281:    if( ( ret = ssl_write_real( ssl, buf + 1, len - 1 ) ) <= 0 )
        -: 7282:        return( ret );
        -: 7283:    ssl->split_done = 0;
        -: 7284:
        -: 7285:    return( ret + 1 );
        -: 7286:}
        -: 7287:#endif /* MBEDTLS_SSL_CBC_RECORD_SPLITTING */
        -: 7288:
        -: 7289:/*
        -: 7290: * Write application data (public-facing wrapper)
        -: 7291: */
    #####: 7292:int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
        -: 7293:{
        -: 7294:    int ret;
        -: 7295:
    #####: 7296:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
        -: 7297:
    #####: 7298:    if( ssl == NULL || ssl->conf == NULL )
    #####: 7299:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 7300:
        -: 7301:#if defined(MBEDTLS_SSL_RENEGOTIATION)
        -: 7302:    if( ( ret = ssl_check_ctr_renegotiate( ssl ) ) != 0 )
        -: 7303:    {
        -: 7304:        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        -: 7305:        return( ret );
        -: 7306:    }
        -: 7307:#endif
        -: 7308:
    #####: 7309:    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
        -: 7310:    {
    #####: 7311:        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
        -: 7312:        {
    #####: 7313:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
    #####: 7314:            return( ret );
        -: 7315:        }
        -: 7316:    }
        -: 7317:
        -: 7318:#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
        -: 7319:    ret = ssl_write_split( ssl, buf, len );
        -: 7320:#else
    #####: 7321:    ret = ssl_write_real( ssl, buf, len );
        -: 7322:#endif
        -: 7323:
    #####: 7324:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );
        -: 7325:
    #####: 7326:    return( ret );
        -: 7327:}
        -: 7328:
        -: 7329:/*
        -: 7330: * Notify the peer that the connection is being closed
        -: 7331: */
    #####: 7332:int mbedtls_ssl_close_notify( mbedtls_ssl_context *ssl )
        -: 7333:{
        -: 7334:    int ret;
        -: 7335:
    #####: 7336:    if( ssl == NULL || ssl->conf == NULL )
    #####: 7337:        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
        -: 7338:
    #####: 7339:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write close notify" ) );
        -: 7340:
    #####: 7341:    if( ssl->out_left != 0 )
    #####: 7342:        return( mbedtls_ssl_flush_output( ssl ) );
        -: 7343:
    #####: 7344:    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
        -: 7345:    {
    #####: 7346:        if( ( ret = mbedtls_ssl_send_alert_message( ssl,
        -: 7347:                        MBEDTLS_SSL_ALERT_LEVEL_WARNING,
        -: 7348:                        MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY ) ) != 0 )
        -: 7349:        {
    #####: 7350:            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_send_alert_message", ret );
    #####: 7351:            return( ret );
        -: 7352:        }
        -: 7353:    }
        -: 7354:
    #####: 7355:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write close notify" ) );
        -: 7356:
    #####: 7357:    return( 0 );
        -: 7358:}
        -: 7359:
    #####: 7360:void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
        -: 7361:{
    #####: 7362:    if( transform == NULL )
    #####: 7363:        return;
        -: 7364:
        -: 7365:#if defined(MBEDTLS_ZLIB_SUPPORT)
        -: 7366:    deflateEnd( &transform->ctx_deflate );
        -: 7367:    inflateEnd( &transform->ctx_inflate );
        -: 7368:#endif
        -: 7369:
    #####: 7370:    mbedtls_cipher_free( &transform->cipher_ctx_enc );
    #####: 7371:    mbedtls_cipher_free( &transform->cipher_ctx_dec );
        -: 7372:
    #####: 7373:    mbedtls_md_free( &transform->md_ctx_enc );
    #####: 7374:    mbedtls_md_free( &transform->md_ctx_dec );
        -: 7375:
    #####: 7376:    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
        -: 7377:}
        -: 7378:
        -: 7379:#if defined(MBEDTLS_X509_CRT_PARSE_C)
    #####: 7380:static void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
        -: 7381:{
    #####: 7382:    mbedtls_ssl_key_cert *cur = key_cert, *next;
        -: 7383:
    #####: 7384:    while( cur != NULL )
        -: 7385:    {
    #####: 7386:        next = cur->next;
    #####: 7387:        mbedtls_free( cur );
    #####: 7388:        cur = next;
        -: 7389:    }
    #####: 7390:}
        -: 7391:#endif /* MBEDTLS_X509_CRT_PARSE_C */
        -: 7392:
    #####: 7393:void mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake )
        -: 7394:{
    #####: 7395:    if( handshake == NULL )
    #####: 7396:        return;
        -: 7397:
        -: 7398:#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
        -: 7399:    defined(MBEDTLS_SSL_PROTO_TLS1_1)
    #####: 7400:    mbedtls_md5_free(    &handshake->fin_md5  );
    #####: 7401:    mbedtls_sha1_free(   &handshake->fin_sha1 );
        -: 7402:#endif
        -: 7403:#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        -: 7404:#if defined(MBEDTLS_SHA256_C)
    #####: 7405:    mbedtls_sha256_free(   &handshake->fin_sha256    );
        -: 7406:#endif
        -: 7407:#if defined(MBEDTLS_SHA512_C)
    #####: 7408:    mbedtls_sha512_free(   &handshake->fin_sha512    );
        -: 7409:#endif
        -: 7410:#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
        -: 7411:
        -: 7412:#if defined(MBEDTLS_DHM_C)
        -: 7413:    mbedtls_dhm_free( &handshake->dhm_ctx );
        -: 7414:#endif
        -: 7415:#if defined(MBEDTLS_ECDH_C)
        -: 7416:    mbedtls_ecdh_free( &handshake->ecdh_ctx );
        -: 7417:#endif
        -: 7418:#if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
        -: 7419:    mbedtls_ecjpake_free( &handshake->ecjpake_ctx );
        -: 7420:#if defined(MBEDTLS_SSL_CLI_C)
        -: 7421:    mbedtls_free( handshake->ecjpake_cache );
        -: 7422:    handshake->ecjpake_cache = NULL;
        -: 7423:    handshake->ecjpake_cache_len = 0;
        -: 7424:#endif
        -: 7425:#endif
        -: 7426:
        -: 7427:#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
        -: 7428:    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
        -: 7429:    /* explicit void pointer cast for buggy MS compiler */
        -: 7430:    mbedtls_free( (void *) handshake->curves );
        -: 7431:#endif
        -: 7432:
        -: 7433:#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    #####: 7434:    if( handshake->psk != NULL )
        -: 7435:    {
    #####: 7436:        mbedtls_platform_zeroize( handshake->psk, handshake->psk_len );
    #####: 7437:        mbedtls_free( handshake->psk );
        -: 7438:    }
        -: 7439:#endif
        -: 7440:
        -: 7441:#if defined(MBEDTLS_X509_CRT_PARSE_C) && \
        -: 7442:    defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
        -: 7443:    /*
        -: 7444:     * Free only the linked list wrapper, not the keys themselves
        -: 7445:     * since the belong to the SNI callback
        -: 7446:     */
    #####: 7447:    if( handshake->sni_key_cert != NULL )
        -: 7448:    {
    #####: 7449:        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;
        -: 7450:
    #####: 7451:        while( cur != NULL )
        -: 7452:        {
    #####: 7453:            next = cur->next;
    #####: 7454:            mbedtls_free( cur );
    #####: 7455:            cur = next;
        -: 7456:        }
        -: 7457:    }
        -: 7458:#endif /* MBEDTLS_X509_CRT_PARSE_C && MBEDTLS_SSL_SERVER_NAME_INDICATION */
        -: 7459:
        -: 7460:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 7461:    mbedtls_free( handshake->verify_cookie );
    #####: 7462:    mbedtls_free( handshake->hs_msg );
    #####: 7463:    ssl_flight_free( handshake->flight );
        -: 7464:#endif
        -: 7465:
    #####: 7466:    mbedtls_platform_zeroize( handshake,
        -: 7467:                              sizeof( mbedtls_ssl_handshake_params ) );
        -: 7468:}
        -: 7469:
    #####: 7470:void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
        -: 7471:{
    #####: 7472:    if( session == NULL )
    #####: 7473:        return;
        -: 7474:
        -: 7475:#if defined(MBEDTLS_X509_CRT_PARSE_C)
    #####: 7476:    if( session->peer_cert != NULL )
        -: 7477:    {
    #####: 7478:        mbedtls_x509_crt_free( session->peer_cert );
    #####: 7479:        mbedtls_free( session->peer_cert );
        -: 7480:    }
        -: 7481:#endif
        -: 7482:
        -: 7483:#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
        -: 7484:    mbedtls_free( session->ticket );
        -: 7485:#endif
        -: 7486:
    #####: 7487:    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
        -: 7488:}
        -: 7489:
        -: 7490:/*
        -: 7491: * Free an SSL context
        -: 7492: */
    #####: 7493:void mbedtls_ssl_free( mbedtls_ssl_context *ssl )
        -: 7494:{
    #####: 7495:    if( ssl == NULL )
    #####: 7496:        return;
        -: 7497:
    #####: 7498:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );
        -: 7499:
    #####: 7500:    if( ssl->out_buf != NULL )
        -: 7501:    {
    #####: 7502:        mbedtls_platform_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
    #####: 7503:        mbedtls_free( ssl->out_buf );
        -: 7504:    }
        -: 7505:
    #####: 7506:    if( ssl->in_buf != NULL )
        -: 7507:    {
    #####: 7508:        mbedtls_platform_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
    #####: 7509:        mbedtls_free( ssl->in_buf );
        -: 7510:    }
        -: 7511:
        -: 7512:#if defined(MBEDTLS_ZLIB_SUPPORT)
        -: 7513:    if( ssl->compress_buf != NULL )
        -: 7514:    {
        -: 7515:        mbedtls_platform_zeroize( ssl->compress_buf, MBEDTLS_SSL_BUFFER_LEN );
        -: 7516:        mbedtls_free( ssl->compress_buf );
        -: 7517:    }
        -: 7518:#endif
        -: 7519:
    #####: 7520:    if( ssl->transform )
        -: 7521:    {
    #####: 7522:        mbedtls_ssl_transform_free( ssl->transform );
    #####: 7523:        mbedtls_free( ssl->transform );
        -: 7524:    }
        -: 7525:
    #####: 7526:    if( ssl->handshake )
        -: 7527:    {
    #####: 7528:        mbedtls_ssl_handshake_free( ssl->handshake );
    #####: 7529:        mbedtls_ssl_transform_free( ssl->transform_negotiate );
    #####: 7530:        mbedtls_ssl_session_free( ssl->session_negotiate );
        -: 7531:
    #####: 7532:        mbedtls_free( ssl->handshake );
    #####: 7533:        mbedtls_free( ssl->transform_negotiate );
    #####: 7534:        mbedtls_free( ssl->session_negotiate );
        -: 7535:    }
        -: 7536:
    #####: 7537:    if( ssl->session )
        -: 7538:    {
    #####: 7539:        mbedtls_ssl_session_free( ssl->session );
    #####: 7540:        mbedtls_free( ssl->session );
        -: 7541:    }
        -: 7542:
        -: 7543:#if defined(MBEDTLS_X509_CRT_PARSE_C)
    #####: 7544:    if( ssl->hostname != NULL )
        -: 7545:    {
    #####: 7546:        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
    #####: 7547:        mbedtls_free( ssl->hostname );
        -: 7548:    }
        -: 7549:#endif
        -: 7550:
        -: 7551:#if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
        -: 7552:    if( mbedtls_ssl_hw_record_finish != NULL )
        -: 7553:    {
        -: 7554:        MBEDTLS_SSL_DEBUG_MSG( 2, ( "going for mbedtls_ssl_hw_record_finish()" ) );
        -: 7555:        mbedtls_ssl_hw_record_finish( ssl );
        -: 7556:    }
        -: 7557:#endif
        -: 7558:
        -: 7559:#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)
    #####: 7560:    mbedtls_free( ssl->cli_id );
        -: 7561:#endif
        -: 7562:
    #####: 7563:    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );
        -: 7564:
        -: 7565:    /* Actually clear after last debug message */
    #####: 7566:    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
        -: 7567:}
        -: 7568:
        -: 7569:/*
        -: 7570: * Initialze mbedtls_ssl_config
        -: 7571: */
    #####: 7572:void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
        -: 7573:{
    #####: 7574:    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
    #####: 7575:}
        -: 7576:
        -: 7577:#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
        -: 7578:static int ssl_preset_default_hashes[] = {
        -: 7579:#if defined(MBEDTLS_SHA512_C)
        -: 7580:    MBEDTLS_MD_SHA512,
        -: 7581:    MBEDTLS_MD_SHA384,
        -: 7582:#endif
        -: 7583:#if defined(MBEDTLS_SHA256_C)
        -: 7584:    MBEDTLS_MD_SHA256,
        -: 7585:    MBEDTLS_MD_SHA224,
        -: 7586:#endif
        -: 7587:#if defined(MBEDTLS_SHA1_C) && defined(MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_KEY_EXCHANGE)
        -: 7588:    MBEDTLS_MD_SHA1,
        -: 7589:#endif
        -: 7590:    MBEDTLS_MD_NONE
        -: 7591:};
        -: 7592:#endif
        -: 7593:
        -: 7594:static int ssl_preset_suiteb_ciphersuites[] = {
        -: 7595:    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
        -: 7596:    MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
        -: 7597:    0
        -: 7598:};
        -: 7599:
        -: 7600:#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
        -: 7601:static int ssl_preset_suiteb_hashes[] = {
        -: 7602:    MBEDTLS_MD_SHA256,
        -: 7603:    MBEDTLS_MD_SHA384,
        -: 7604:    MBEDTLS_MD_NONE
        -: 7605:};
        -: 7606:#endif
        -: 7607:
        -: 7608:#if defined(MBEDTLS_ECP_C)
        -: 7609:static mbedtls_ecp_group_id ssl_preset_suiteb_curves[] = {
        -: 7610:    MBEDTLS_ECP_DP_SECP256R1,
        -: 7611:    MBEDTLS_ECP_DP_SECP384R1,
        -: 7612:    MBEDTLS_ECP_DP_NONE
        -: 7613:};
        -: 7614:#endif
        -: 7615:
        -: 7616:/*
        -: 7617: * Load default in mbedtls_ssl_config
        -: 7618: */
    #####: 7619:int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
        -: 7620:                                 int endpoint, int transport, int preset )
        -: 7621:{
        -: 7622:#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_SRV_C)
        -: 7623:    int ret;
        -: 7624:#endif
        -: 7625:
        -: 7626:    /* Use the functions here so that they are covered in tests,
        -: 7627:     * but otherwise access member directly for efficiency */
    #####: 7628:    mbedtls_ssl_conf_endpoint( conf, endpoint );
    #####: 7629:    mbedtls_ssl_conf_transport( conf, transport );
        -: 7630:
        -: 7631:    /*
        -: 7632:     * Things that are common to all presets
        -: 7633:     */
        -: 7634:#if defined(MBEDTLS_SSL_CLI_C)
    #####: 7635:    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
        -: 7636:    {
    #####: 7637:        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
        -: 7638:#if defined(MBEDTLS_SSL_SESSION_TICKETS)
        -: 7639:        conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;
        -: 7640:#endif
        -: 7641:    }
        -: 7642:#endif
        -: 7643:
        -: 7644:#if defined(MBEDTLS_ARC4_C)
        -: 7645:    conf->arc4_disabled = MBEDTLS_SSL_ARC4_DISABLED;
        -: 7646:#endif
        -: 7647:
        -: 7648:#if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
        -: 7649:    conf->encrypt_then_mac = MBEDTLS_SSL_ETM_ENABLED;
        -: 7650:#endif
        -: 7651:
        -: 7652:#if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)
        -: 7653:    conf->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;
        -: 7654:#endif
        -: 7655:
        -: 7656:#if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
        -: 7657:    conf->cbc_record_splitting = MBEDTLS_SSL_CBC_RECORD_SPLITTING_ENABLED;
        -: 7658:#endif
        -: 7659:
        -: 7660:#if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)
    #####: 7661:    conf->f_cookie_write = ssl_cookie_write_dummy;
    #####: 7662:    conf->f_cookie_check = ssl_cookie_check_dummy;
        -: 7663:#endif
        -: 7664:
        -: 7665:#if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
        -: 7666:    conf->anti_replay = MBEDTLS_SSL_ANTI_REPLAY_ENABLED;
        -: 7667:#endif
        -: 7668:
        -: 7669:#if defined(MBEDTLS_SSL_SRV_C)
    #####: 7670:    conf->cert_req_ca_list = MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED;
        -: 7671:#endif
        -: 7672:
        -: 7673:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 7674:    conf->hs_timeout_min = MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MIN;
    #####: 7675:    conf->hs_timeout_max = MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MAX;
        -: 7676:#endif
        -: 7677:
        -: 7678:#if defined(MBEDTLS_SSL_RENEGOTIATION)
        -: 7679:    conf->renego_max_records = MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT;
        -: 7680:    memset( conf->renego_period,     0x00, 2 );
        -: 7681:    memset( conf->renego_period + 2, 0xFF, 6 );
        -: 7682:#endif
        -: 7683:
        -: 7684:#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_SRV_C)
        -: 7685:            if( endpoint == MBEDTLS_SSL_IS_SERVER )
        -: 7686:            {
        -: 7687:                const unsigned char dhm_p[] =
        -: 7688:                    MBEDTLS_DHM_RFC3526_MODP_2048_P_BIN;
        -: 7689:                const unsigned char dhm_g[] =
        -: 7690:                    MBEDTLS_DHM_RFC3526_MODP_2048_G_BIN;
        -: 7691:
        -: 7692:                if ( ( ret = mbedtls_ssl_conf_dh_param_bin( conf,
        -: 7693:                                               dhm_p, sizeof( dhm_p ),
        -: 7694:                                               dhm_g, sizeof( dhm_g ) ) ) != 0 )
        -: 7695:                {
        -: 7696:                    return( ret );
        -: 7697:                }
        -: 7698:            }
        -: 7699:#endif
        -: 7700:
        -: 7701:    /*
        -: 7702:     * Preset-specific defaults
        -: 7703:     */
    #####: 7704:    switch( preset )
        -: 7705:    {
        -: 7706:        /*
        -: 7707:         * NSA Suite B
        -: 7708:         */
    #####: 7709:        case MBEDTLS_SSL_PRESET_SUITEB:
    #####: 7710:            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
    #####: 7711:            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
    #####: 7712:            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
    #####: 7713:            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
        -: 7714:
    #####: 7715:            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
    #####: 7716:            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
    #####: 7717:            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
    #####: 7718:            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
        -: 7719:                                   ssl_preset_suiteb_ciphersuites;
        -: 7720:
        -: 7721:#if defined(MBEDTLS_X509_CRT_PARSE_C)
    #####: 7722:            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
        -: 7723:#endif
        -: 7724:
        -: 7725:#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
        -: 7726:            conf->sig_hashes = ssl_preset_suiteb_hashes;
        -: 7727:#endif
        -: 7728:
        -: 7729:#if defined(MBEDTLS_ECP_C)
        -: 7730:            conf->curve_list = ssl_preset_suiteb_curves;
        -: 7731:#endif
    #####: 7732:            break;
        -: 7733:
        -: 7734:        /*
        -: 7735:         * Default
        -: 7736:         */
    #####: 7737:        default:
    #####: 7738:            conf->min_major_ver = ( MBEDTLS_SSL_MIN_MAJOR_VERSION >
        -: 7739:                                    MBEDTLS_SSL_MIN_VALID_MAJOR_VERSION ) ?
        -: 7740:                                    MBEDTLS_SSL_MIN_MAJOR_VERSION :
        -: 7741:                                    MBEDTLS_SSL_MIN_VALID_MAJOR_VERSION;
    #####: 7742:            conf->min_minor_ver = ( MBEDTLS_SSL_MIN_MINOR_VERSION >
        -: 7743:                                    MBEDTLS_SSL_MIN_VALID_MINOR_VERSION ) ?
        -: 7744:                                    MBEDTLS_SSL_MIN_MINOR_VERSION :
        -: 7745:                                    MBEDTLS_SSL_MIN_VALID_MINOR_VERSION;
    #####: 7746:            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
    #####: 7747:            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
        -: 7748:
        -: 7749:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 7750:            if( transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
    #####: 7751:                conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_2;
        -: 7752:#endif
        -: 7753:
    #####: 7754:            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
    #####: 7755:            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
    #####: 7756:            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
    #####: 7757:            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
    #####: 7758:                                   mbedtls_ssl_list_ciphersuites();
        -: 7759:
        -: 7760:#if defined(MBEDTLS_X509_CRT_PARSE_C)
    #####: 7761:            conf->cert_profile = &mbedtls_x509_crt_profile_default;
        -: 7762:#endif
        -: 7763:
        -: 7764:#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
        -: 7765:            conf->sig_hashes = ssl_preset_default_hashes;
        -: 7766:#endif
        -: 7767:
        -: 7768:#if defined(MBEDTLS_ECP_C)
        -: 7769:            conf->curve_list = mbedtls_ecp_grp_id_list();
        -: 7770:#endif
        -: 7771:
        -: 7772:#if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_CLI_C)
        -: 7773:            conf->dhm_min_bitlen = 1024;
        -: 7774:#endif
        -: 7775:    }
        -: 7776:
    #####: 7777:    return( 0 );
        -: 7778:}
        -: 7779:
        -: 7780:/*
        -: 7781: * Free mbedtls_ssl_config
        -: 7782: */
    #####: 7783:void mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
        -: 7784:{
        -: 7785:#if defined(MBEDTLS_DHM_C)
        -: 7786:    mbedtls_mpi_free( &conf->dhm_P );
        -: 7787:    mbedtls_mpi_free( &conf->dhm_G );
        -: 7788:#endif
        -: 7789:
        -: 7790:#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    #####: 7791:    if( conf->psk != NULL )
        -: 7792:    {
    #####: 7793:        mbedtls_platform_zeroize( conf->psk, conf->psk_len );
    #####: 7794:        mbedtls_free( conf->psk );
    #####: 7795:        conf->psk = NULL;
    #####: 7796:        conf->psk_len = 0;
        -: 7797:    }
        -: 7798:
    #####: 7799:    if( conf->psk_identity != NULL )
        -: 7800:    {
    #####: 7801:        mbedtls_platform_zeroize( conf->psk_identity, conf->psk_identity_len );
    #####: 7802:        mbedtls_free( conf->psk_identity );
    #####: 7803:        conf->psk_identity = NULL;
    #####: 7804:        conf->psk_identity_len = 0;
        -: 7805:    }
        -: 7806:#endif
        -: 7807:
        -: 7808:#if defined(MBEDTLS_X509_CRT_PARSE_C)
    #####: 7809:    ssl_key_cert_free( conf->key_cert );
        -: 7810:#endif
        -: 7811:
    #####: 7812:    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
    #####: 7813:}
        -: 7814:
        -: 7815:#if defined(MBEDTLS_PK_C) && \
        -: 7816:    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
        -: 7817:/*
        -: 7818: * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
        -: 7819: */
    #####: 7820:unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
        -: 7821:{
        -: 7822:#if defined(MBEDTLS_RSA_C)
    #####: 7823:    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
    #####: 7824:        return( MBEDTLS_SSL_SIG_RSA );
        -: 7825:#endif
        -: 7826:#if defined(MBEDTLS_ECDSA_C)
        -: 7827:    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        -: 7828:        return( MBEDTLS_SSL_SIG_ECDSA );
        -: 7829:#endif
    #####: 7830:    return( MBEDTLS_SSL_SIG_ANON );
        -: 7831:}
        -: 7832:
    #####: 7833:unsigned char mbedtls_ssl_sig_from_pk_alg( mbedtls_pk_type_t type )
        -: 7834:{
    #####: 7835:    switch( type ) {
    #####: 7836:        case MBEDTLS_PK_RSA:
    #####: 7837:            return( MBEDTLS_SSL_SIG_RSA );
    #####: 7838:        case MBEDTLS_PK_ECDSA:
        -: 7839:        case MBEDTLS_PK_ECKEY:
    #####: 7840:            return( MBEDTLS_SSL_SIG_ECDSA );
    #####: 7841:        default:
    #####: 7842:            return( MBEDTLS_SSL_SIG_ANON );
        -: 7843:    }
        -: 7844:}
        -: 7845:
    #####: 7846:mbedtls_pk_type_t mbedtls_ssl_pk_alg_from_sig( unsigned char sig )
        -: 7847:{
    #####: 7848:    switch( sig )
        -: 7849:    {
        -: 7850:#if defined(MBEDTLS_RSA_C)
    #####: 7851:        case MBEDTLS_SSL_SIG_RSA:
    #####: 7852:            return( MBEDTLS_PK_RSA );
        -: 7853:#endif
        -: 7854:#if defined(MBEDTLS_ECDSA_C)
        -: 7855:        case MBEDTLS_SSL_SIG_ECDSA:
        -: 7856:            return( MBEDTLS_PK_ECDSA );
        -: 7857:#endif
    #####: 7858:        default:
    #####: 7859:            return( MBEDTLS_PK_NONE );
        -: 7860:    }
        -: 7861:}
        -: 7862:#endif /* MBEDTLS_PK_C && ( MBEDTLS_RSA_C || MBEDTLS_ECDSA_C ) */
        -: 7863:
        -: 7864:#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
        -: 7865:    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
        -: 7866:
        -: 7867:/* Find an entry in a signature-hash set matching a given hash algorithm. */
        -: 7868:mbedtls_md_type_t mbedtls_ssl_sig_hash_set_find( mbedtls_ssl_sig_hash_set_t *set,
        -: 7869:                                                 mbedtls_pk_type_t sig_alg )
        -: 7870:{
        -: 7871:    switch( sig_alg )
        -: 7872:    {
        -: 7873:        case MBEDTLS_PK_RSA:
        -: 7874:            return( set->rsa );
        -: 7875:        case MBEDTLS_PK_ECDSA:
        -: 7876:            return( set->ecdsa );
        -: 7877:        default:
        -: 7878:            return( MBEDTLS_MD_NONE );
        -: 7879:    }
        -: 7880:}
        -: 7881:
        -: 7882:/* Add a signature-hash-pair to a signature-hash set */
        -: 7883:void mbedtls_ssl_sig_hash_set_add( mbedtls_ssl_sig_hash_set_t *set,
        -: 7884:                                   mbedtls_pk_type_t sig_alg,
        -: 7885:                                   mbedtls_md_type_t md_alg )
        -: 7886:{
        -: 7887:    switch( sig_alg )
        -: 7888:    {
        -: 7889:        case MBEDTLS_PK_RSA:
        -: 7890:            if( set->rsa == MBEDTLS_MD_NONE )
        -: 7891:                set->rsa = md_alg;
        -: 7892:            break;
        -: 7893:
        -: 7894:        case MBEDTLS_PK_ECDSA:
        -: 7895:            if( set->ecdsa == MBEDTLS_MD_NONE )
        -: 7896:                set->ecdsa = md_alg;
        -: 7897:            break;
        -: 7898:
        -: 7899:        default:
        -: 7900:            break;
        -: 7901:    }
        -: 7902:}
        -: 7903:
        -: 7904:/* Allow exactly one hash algorithm for each signature. */
        -: 7905:void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
        -: 7906:                                          mbedtls_md_type_t md_alg )
        -: 7907:{
        -: 7908:    set->rsa   = md_alg;
        -: 7909:    set->ecdsa = md_alg;
        -: 7910:}
        -: 7911:
        -: 7912:#endif /* MBEDTLS_SSL_PROTO_TLS1_2) &&
        -: 7913:          MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */
        -: 7914:
        -: 7915:/*
        -: 7916: * Convert from MBEDTLS_SSL_HASH_XXX to MBEDTLS_MD_XXX
        -: 7917: */
    #####: 7918:mbedtls_md_type_t mbedtls_ssl_md_alg_from_hash( unsigned char hash )
        -: 7919:{
    #####: 7920:    switch( hash )
        -: 7921:    {
        -: 7922:#if defined(MBEDTLS_MD5_C)
    #####: 7923:        case MBEDTLS_SSL_HASH_MD5:
    #####: 7924:            return( MBEDTLS_MD_MD5 );
        -: 7925:#endif
        -: 7926:#if defined(MBEDTLS_SHA1_C)
    #####: 7927:        case MBEDTLS_SSL_HASH_SHA1:
    #####: 7928:            return( MBEDTLS_MD_SHA1 );
        -: 7929:#endif
        -: 7930:#if defined(MBEDTLS_SHA256_C)
    #####: 7931:        case MBEDTLS_SSL_HASH_SHA224:
    #####: 7932:            return( MBEDTLS_MD_SHA224 );
    #####: 7933:        case MBEDTLS_SSL_HASH_SHA256:
    #####: 7934:            return( MBEDTLS_MD_SHA256 );
        -: 7935:#endif
        -: 7936:#if defined(MBEDTLS_SHA512_C)
    #####: 7937:        case MBEDTLS_SSL_HASH_SHA384:
    #####: 7938:            return( MBEDTLS_MD_SHA384 );
    #####: 7939:        case MBEDTLS_SSL_HASH_SHA512:
    #####: 7940:            return( MBEDTLS_MD_SHA512 );
        -: 7941:#endif
    #####: 7942:        default:
    #####: 7943:            return( MBEDTLS_MD_NONE );
        -: 7944:    }
        -: 7945:}
        -: 7946:
        -: 7947:/*
        -: 7948: * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
        -: 7949: */
    #####: 7950:unsigned char mbedtls_ssl_hash_from_md_alg( int md )
        -: 7951:{
    #####: 7952:    switch( md )
        -: 7953:    {
        -: 7954:#if defined(MBEDTLS_MD5_C)
    #####: 7955:        case MBEDTLS_MD_MD5:
    #####: 7956:            return( MBEDTLS_SSL_HASH_MD5 );
        -: 7957:#endif
        -: 7958:#if defined(MBEDTLS_SHA1_C)
    #####: 7959:        case MBEDTLS_MD_SHA1:
    #####: 7960:            return( MBEDTLS_SSL_HASH_SHA1 );
        -: 7961:#endif
        -: 7962:#if defined(MBEDTLS_SHA256_C)
    #####: 7963:        case MBEDTLS_MD_SHA224:
    #####: 7964:            return( MBEDTLS_SSL_HASH_SHA224 );
    #####: 7965:        case MBEDTLS_MD_SHA256:
    #####: 7966:            return( MBEDTLS_SSL_HASH_SHA256 );
        -: 7967:#endif
        -: 7968:#if defined(MBEDTLS_SHA512_C)
    #####: 7969:        case MBEDTLS_MD_SHA384:
    #####: 7970:            return( MBEDTLS_SSL_HASH_SHA384 );
    #####: 7971:        case MBEDTLS_MD_SHA512:
    #####: 7972:            return( MBEDTLS_SSL_HASH_SHA512 );
        -: 7973:#endif
    #####: 7974:        default:
    #####: 7975:            return( MBEDTLS_SSL_HASH_NONE );
        -: 7976:    }
        -: 7977:}
        -: 7978:
        -: 7979:#if defined(MBEDTLS_ECP_C)
        -: 7980:/*
        -: 7981: * Check if a curve proposed by the peer is in our list.
        -: 7982: * Return 0 if we're willing to use it, -1 otherwise.
        -: 7983: */
        -: 7984:int mbedtls_ssl_check_curve( const mbedtls_ssl_context *ssl, mbedtls_ecp_group_id grp_id )
        -: 7985:{
        -: 7986:    const mbedtls_ecp_group_id *gid;
        -: 7987:
        -: 7988:    if( ssl->conf->curve_list == NULL )
        -: 7989:        return( -1 );
        -: 7990:
        -: 7991:    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
        -: 7992:        if( *gid == grp_id )
        -: 7993:            return( 0 );
        -: 7994:
        -: 7995:    return( -1 );
        -: 7996:}
        -: 7997:#endif /* MBEDTLS_ECP_C */
        -: 7998:
        -: 7999:#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
        -: 8000:/*
        -: 8001: * Check if a hash proposed by the peer is in our list.
        -: 8002: * Return 0 if we're willing to use it, -1 otherwise.
        -: 8003: */
        -: 8004:int mbedtls_ssl_check_sig_hash( const mbedtls_ssl_context *ssl,
        -: 8005:                                mbedtls_md_type_t md )
        -: 8006:{
        -: 8007:    const int *cur;
        -: 8008:
        -: 8009:    if( ssl->conf->sig_hashes == NULL )
        -: 8010:        return( -1 );
        -: 8011:
        -: 8012:    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
        -: 8013:        if( *cur == (int) md )
        -: 8014:            return( 0 );
        -: 8015:
        -: 8016:    return( -1 );
        -: 8017:}
        -: 8018:#endif /* MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */
        -: 8019:
        -: 8020:#if defined(MBEDTLS_X509_CRT_PARSE_C)
    #####: 8021:int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
        -: 8022:                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
        -: 8023:                          int cert_endpoint,
        -: 8024:                          uint32_t *flags )
        -: 8025:{
    #####: 8026:    int ret = 0;
        -: 8027:#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
        -: 8028:    int usage = 0;
        -: 8029:#endif
        -: 8030:#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
        -: 8031:    const char *ext_oid;
        -: 8032:    size_t ext_len;
        -: 8033:#endif
        -: 8034:
        -: 8035:#if !defined(MBEDTLS_X509_CHECK_KEY_USAGE) &&          \
        -: 8036:    !defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
        -: 8037:    ((void) cert);
        -: 8038:    ((void) cert_endpoint);
        -: 8039:    ((void) flags);
        -: 8040:#endif
        -: 8041:
        -: 8042:#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
        -: 8043:    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
        -: 8044:    {
        -: 8045:        /* Server part of the key exchange */
        -: 8046:        switch( ciphersuite->key_exchange )
        -: 8047:        {
        -: 8048:            case MBEDTLS_KEY_EXCHANGE_RSA:
        -: 8049:            case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
        -: 8050:                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
        -: 8051:                break;
        -: 8052:
        -: 8053:            case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
        -: 8054:            case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        -: 8055:            case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
        -: 8056:                usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
        -: 8057:                break;
        -: 8058:
        -: 8059:            case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        -: 8060:            case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
        -: 8061:                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
        -: 8062:                break;
        -: 8063:
        -: 8064:            /* Don't use default: we want warnings when adding new values */
        -: 8065:            case MBEDTLS_KEY_EXCHANGE_NONE:
        -: 8066:            case MBEDTLS_KEY_EXCHANGE_PSK:
        -: 8067:            case MBEDTLS_KEY_EXCHANGE_DHE_PSK:
        -: 8068:            case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:
        -: 8069:            case MBEDTLS_KEY_EXCHANGE_ECJPAKE:
        -: 8070:                usage = 0;
        -: 8071:        }
        -: 8072:    }
        -: 8073:    else
        -: 8074:    {
        -: 8075:        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        -: 8076:        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
        -: 8077:    }
        -: 8078:
        -: 8079:    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
        -: 8080:    {
        -: 8081:        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
        -: 8082:        ret = -1;
        -: 8083:    }
        -: 8084:#else
        -: 8085:    ((void) ciphersuite);
        -: 8086:#endif /* MBEDTLS_X509_CHECK_KEY_USAGE */
        -: 8087:
        -: 8088:#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
        -: 8089:    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
        -: 8090:    {
        -: 8091:        ext_oid = MBEDTLS_OID_SERVER_AUTH;
        -: 8092:        ext_len = MBEDTLS_OID_SIZE( MBEDTLS_OID_SERVER_AUTH );
        -: 8093:    }
        -: 8094:    else
        -: 8095:    {
        -: 8096:        ext_oid = MBEDTLS_OID_CLIENT_AUTH;
        -: 8097:        ext_len = MBEDTLS_OID_SIZE( MBEDTLS_OID_CLIENT_AUTH );
        -: 8098:    }
        -: 8099:
        -: 8100:    if( mbedtls_x509_crt_check_extended_key_usage( cert, ext_oid, ext_len ) != 0 )
        -: 8101:    {
        -: 8102:        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
        -: 8103:        ret = -1;
        -: 8104:    }
        -: 8105:#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */
        -: 8106:
    #####: 8107:    return( ret );
        -: 8108:}
        -: 8109:#endif /* MBEDTLS_X509_CRT_PARSE_C */
        -: 8110:
        -: 8111:/*
        -: 8112: * Convert version numbers to/from wire format
        -: 8113: * and, for DTLS, to/from TLS equivalent.
        -: 8114: *
        -: 8115: * For TLS this is the identity.
        -: 8116: * For DTLS, use 1's complement (v -> 255 - v, and then map as follows:
        -: 8117: * 1.0 <-> 3.2      (DTLS 1.0 is based on TLS 1.1)
        -: 8118: * 1.x <-> 3.x+1    for x != 0 (DTLS 1.2 based on TLS 1.2)
        -: 8119: */
    #####: 8120:void mbedtls_ssl_write_version( int major, int minor, int transport,
        -: 8121:                        unsigned char ver[2] )
        -: 8122:{
        -: 8123:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 8124:    if( transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 8125:    {
    #####: 8126:        if( minor == MBEDTLS_SSL_MINOR_VERSION_2 )
    #####: 8127:            --minor; /* DTLS 1.0 stored as TLS 1.1 internally */
        -: 8128:
    #####: 8129:        ver[0] = (unsigned char)( 255 - ( major - 2 ) );
    #####: 8130:        ver[1] = (unsigned char)( 255 - ( minor - 1 ) );
        -: 8131:    }
        -: 8132:    else
        -: 8133:#else
        -: 8134:    ((void) transport);
        -: 8135:#endif
        -: 8136:    {
    #####: 8137:        ver[0] = (unsigned char) major;
    #####: 8138:        ver[1] = (unsigned char) minor;
        -: 8139:    }
    #####: 8140:}
        -: 8141:
    #####: 8142:void mbedtls_ssl_read_version( int *major, int *minor, int transport,
        -: 8143:                       const unsigned char ver[2] )
        -: 8144:{
        -: 8145:#if defined(MBEDTLS_SSL_PROTO_DTLS)
    #####: 8146:    if( transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        -: 8147:    {
    #####: 8148:        *major = 255 - ver[0] + 2;
    #####: 8149:        *minor = 255 - ver[1] + 1;
        -: 8150:
    #####: 8151:        if( *minor == MBEDTLS_SSL_MINOR_VERSION_1 )
    #####: 8152:            ++*minor; /* DTLS 1.0 stored as TLS 1.1 internally */
        -: 8153:    }
        -: 8154:    else
        -: 8155:#else
        -: 8156:    ((void) transport);
        -: 8157:#endif
        -: 8158:    {
    #####: 8159:        *major = ver[0];
    #####: 8160:        *minor = ver[1];
        -: 8161:    }
    #####: 8162:}
        -: 8163:
    #####: 8164:int mbedtls_ssl_set_calc_verify_md( mbedtls_ssl_context *ssl, int md )
        -: 8165:{
        -: 8166:#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    #####: 8167:    if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
    #####: 8168:        return MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH;
        -: 8169:
    #####: 8170:    switch( md )
        -: 8171:    {
        -: 8172:#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)
        -: 8173:#if defined(MBEDTLS_MD5_C)
    #####: 8174:        case MBEDTLS_SSL_HASH_MD5:
    #####: 8175:            return MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH;
        -: 8176:#endif
        -: 8177:#if defined(MBEDTLS_SHA1_C)
    #####: 8178:        case MBEDTLS_SSL_HASH_SHA1:
    #####: 8179:            ssl->handshake->calc_verify = ssl_calc_verify_tls;
    #####: 8180:            break;
        -: 8181:#endif
        -: 8182:#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */
        -: 8183:#if defined(MBEDTLS_SHA512_C)
    #####: 8184:        case MBEDTLS_SSL_HASH_SHA384:
    #####: 8185:            ssl->handshake->calc_verify = ssl_calc_verify_tls_sha384;
    #####: 8186:            break;
        -: 8187:#endif
        -: 8188:#if defined(MBEDTLS_SHA256_C)
    #####: 8189:        case MBEDTLS_SSL_HASH_SHA256:
    #####: 8190:            ssl->handshake->calc_verify = ssl_calc_verify_tls_sha256;
    #####: 8191:            break;
        -: 8192:#endif
    #####: 8193:        default:
    #####: 8194:            return MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH;
        -: 8195:    }
        -: 8196:
    #####: 8197:    return 0;
        -: 8198:#else /* !MBEDTLS_SSL_PROTO_TLS1_2 */
        -: 8199:    (void) ssl;
        -: 8200:    (void) md;
        -: 8201:
        -: 8202:    return MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH;
        -: 8203:#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
        -: 8204:}
        -: 8205:
        -: 8206:#if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
        -: 8207:    defined(MBEDTLS_SSL_PROTO_TLS1_1)
    #####: 8208:int mbedtls_ssl_get_key_exchange_md_ssl_tls( mbedtls_ssl_context *ssl,
        -: 8209:                                        unsigned char *output,
        -: 8210:                                        unsigned char *data, size_t data_len )
        -: 8211:{
    #####: 8212:    int ret = 0;
        -: 8213:    mbedtls_md5_context mbedtls_md5;
        -: 8214:    mbedtls_sha1_context mbedtls_sha1;
        -: 8215:
    #####: 8216:    mbedtls_md5_init( &mbedtls_md5 );
    #####: 8217:    mbedtls_sha1_init( &mbedtls_sha1 );
        -: 8218:
        -: 8219:    /*
        -: 8220:     * digitally-signed struct {
        -: 8221:     *     opaque md5_hash[16];
        -: 8222:     *     opaque sha_hash[20];
        -: 8223:     * };
        -: 8224:     *
        -: 8225:     * md5_hash
        -: 8226:     *     MD5(ClientHello.random + ServerHello.random
        -: 8227:     *                            + ServerParams);
        -: 8228:     * sha_hash
        -: 8229:     *     SHA(ClientHello.random + ServerHello.random
        -: 8230:     *                            + ServerParams);
        -: 8231:     */
    #####: 8232:    if( ( ret = mbedtls_md5_starts_ret( &mbedtls_md5 ) ) != 0 )
        -: 8233:    {
    #####: 8234:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md5_starts_ret", ret );
    #####: 8235:        goto exit;
        -: 8236:    }
    #####: 8237:    if( ( ret = mbedtls_md5_update_ret( &mbedtls_md5,
    #####: 8238:                                        ssl->handshake->randbytes, 64 ) ) != 0 )
        -: 8239:    {
    #####: 8240:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md5_update_ret", ret );
    #####: 8241:        goto exit;
        -: 8242:    }
    #####: 8243:    if( ( ret = mbedtls_md5_update_ret( &mbedtls_md5, data, data_len ) ) != 0 )
        -: 8244:    {
    #####: 8245:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md5_update_ret", ret );
    #####: 8246:        goto exit;
        -: 8247:    }
    #####: 8248:    if( ( ret = mbedtls_md5_finish_ret( &mbedtls_md5, output ) ) != 0 )
        -: 8249:    {
    #####: 8250:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md5_finish_ret", ret );
    #####: 8251:        goto exit;
        -: 8252:    }
        -: 8253:
    #####: 8254:    if( ( ret = mbedtls_sha1_starts_ret( &mbedtls_sha1 ) ) != 0 )
        -: 8255:    {
    #####: 8256:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_sha1_starts_ret", ret );
    #####: 8257:        goto exit;
        -: 8258:    }
    #####: 8259:    if( ( ret = mbedtls_sha1_update_ret( &mbedtls_sha1,
    #####: 8260:                                         ssl->handshake->randbytes, 64 ) ) != 0 )
        -: 8261:    {
    #####: 8262:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_sha1_update_ret", ret );
    #####: 8263:        goto exit;
        -: 8264:    }
    #####: 8265:    if( ( ret = mbedtls_sha1_update_ret( &mbedtls_sha1, data,
        -: 8266:                                         data_len ) ) != 0 )
        -: 8267:    {
    #####: 8268:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_sha1_update_ret", ret );
    #####: 8269:        goto exit;
        -: 8270:    }
    #####: 8271:    if( ( ret = mbedtls_sha1_finish_ret( &mbedtls_sha1,
        -: 8272:                                         output + 16 ) ) != 0 )
        -: 8273:    {
    #####: 8274:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_sha1_finish_ret", ret );
    #####: 8275:        goto exit;
        -: 8276:    }
        -: 8277:
    #####: 8278:exit:
    #####: 8279:    mbedtls_md5_free( &mbedtls_md5 );
    #####: 8280:    mbedtls_sha1_free( &mbedtls_sha1 );
        -: 8281:
    #####: 8282:    if( ret != 0 )
    #####: 8283:        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 8284:                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        -: 8285:
    #####: 8286:    return( ret );
        -: 8287:
        -: 8288:}
        -: 8289:#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
        -: 8290:          MBEDTLS_SSL_PROTO_TLS1_1 */
        -: 8291:
        -: 8292:#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        -: 8293:    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    #####: 8294:int mbedtls_ssl_get_key_exchange_md_tls1_2( mbedtls_ssl_context *ssl,
        -: 8295:                                       unsigned char *output,
        -: 8296:                                       unsigned char *data, size_t data_len,
        -: 8297:                                       mbedtls_md_type_t md_alg )
        -: 8298:{
    #####: 8299:    int ret = 0;
        -: 8300:    mbedtls_md_context_t ctx;
    #####: 8301:    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
        -: 8302:
    #####: 8303:    mbedtls_md_init( &ctx );
        -: 8304:
        -: 8305:    /*
        -: 8306:     * digitally-signed struct {
        -: 8307:     *     opaque client_random[32];
        -: 8308:     *     opaque server_random[32];
        -: 8309:     *     ServerDHParams params;
        -: 8310:     * };
        -: 8311:     */
    #####: 8312:    if( ( ret = mbedtls_md_setup( &ctx, md_info, 0 ) ) != 0 )
        -: 8313:    {
    #####: 8314:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
    #####: 8315:        goto exit;
        -: 8316:    }
    #####: 8317:    if( ( ret = mbedtls_md_starts( &ctx ) ) != 0 )
        -: 8318:    {
    #####: 8319:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_starts", ret );
    #####: 8320:        goto exit;
        -: 8321:    }
    #####: 8322:    if( ( ret = mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 ) ) != 0 )
        -: 8323:    {
    #####: 8324:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
    #####: 8325:        goto exit;
        -: 8326:    }
    #####: 8327:    if( ( ret = mbedtls_md_update( &ctx, data, data_len ) ) != 0 )
        -: 8328:    {
    #####: 8329:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
    #####: 8330:        goto exit;
        -: 8331:    }
    #####: 8332:    if( ( ret = mbedtls_md_finish( &ctx, output ) ) != 0 )
        -: 8333:    {
    #####: 8334:        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_finish", ret );
    #####: 8335:        goto exit;
        -: 8336:    }
        -: 8337:
    #####: 8338:exit:
    #####: 8339:    mbedtls_md_free( &ctx );
        -: 8340:
    #####: 8341:    if( ret != 0 )
    #####: 8342:        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
        -: 8343:                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        -: 8344:
    #####: 8345:    return( ret );
        -: 8346:}
        -: 8347:#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
        -: 8348:          MBEDTLS_SSL_PROTO_TLS1_2 */
        -: 8349:
        -: 8350:#endif /* MBEDTLS_SSL_TLS_C */
