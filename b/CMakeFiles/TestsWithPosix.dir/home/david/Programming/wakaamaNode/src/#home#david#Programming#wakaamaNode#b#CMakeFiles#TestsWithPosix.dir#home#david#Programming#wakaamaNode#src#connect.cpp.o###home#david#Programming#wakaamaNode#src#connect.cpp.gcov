        -:    0:Source:/home/david/Programming/wakaamaNode/src/connect.cpp
        -:    0:Graph:/home/david/Programming/wakaamaNode/b/CMakeFiles/TestsWithPosix.dir/home/david/Programming/wakaamaNode/src/connect.cpp.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#include "lwm2m/connect.h"
        -:    2:#include "lwm2m/c_connect.h"
        -:    3:#include "internal.h"
        -:    4:#include "wakaama/internals.h"
        -:    5:#include "lwm2m/debug.h"
        -:    6:#include "lwm2m/network.h"
        -:    7:#include "network/network_common.h"
        -:    8:
    #####:    9:LwM2MConnect::LwM2MConnect(const char * endpointName) : lwm2m_client_context_t{} {
    #####:   10:    lwm2m_client_init(this, endpointName);
    #####:   11:}
        -:   12:
    #####:   13:LwM2MConnect::~LwM2MConnect() { lwm2m_client_close (this); }
        -:   14:
    #####:   15:int LwM2MConnect::process(struct timeval* next_event) { return lwm2m_process (&this->context, next_event); }
        -:   16:
    #####:   17:void LwM2MConnect::watch_and_reconnect(struct timeval* next_event, int reconnectTime) {
    #####:   18:    lwm2m_watch_and_reconnect(&this->context, next_event, reconnectTime);
    #####:   19:}
        -:   20:
    #####:   21:int LwM2MConnect::block_wait(struct timeval next_event) { return lwm2m_block_wait (&this->context,next_event); }
        -:   22:
        -:   23:
    #####:   24:bool LwM2MConnect::add_server(uint16_t shortServerID,
    #####:   25:                             const char* uri, uint32_t lifetime, bool storing) { return lwm2m_add_server (&this->context, shortServerID, uri, lifetime, storing); }
        -:   26:
        -:   27:
        -:   28:#ifdef LWM2M_WITH_DTLS
    #####:   29:bool LwM2MConnect::use_dtls_psk(uint16_t shortServerID, const char* publicId,
    #####:   30:                               const char* psk, unsigned short pskLen) { return lwm2m_use_dtls_psk(&this->context,shortServerID,publicId,psk,pskLen); }
        -:   31:#endif
        -:   32:
        -:   33://bool security_use_certificate(uint16_t shortServerID,
        -:   34://      const char* certificates, unsigned short certificatesLen) { return lwm2m_security_use_certificate(this,shortServerID,certificates,certificatesLen); }
        -:   35:
    #####:   36:bool LwM2MConnect::unregister_server(uint16_t security_instance_id) { return lwm2m_unregister_server(&this->context, security_instance_id); }
        -:   37:
    #####:   38:void LwM2MConnect::remove_unregistered_servers() { lwm2m_remove_unregistered_servers(&this->context); }
        -:   39:
    #####:   40:const char* LwM2MConnect::get_server_uri(uint16_t shortServerID) { return lwm2m_get_server_uri(&this->context, shortServerID); }
        -:   41:
    #####:   42:bool LwM2MConnect::is_connected() { return lwm2m_is_connected(&this->context); }
        -:   43:
    #####:   44:int LwM2MConnect::socket_count() { return ((network_t*)context.userData)->open_listen_sockets;}
