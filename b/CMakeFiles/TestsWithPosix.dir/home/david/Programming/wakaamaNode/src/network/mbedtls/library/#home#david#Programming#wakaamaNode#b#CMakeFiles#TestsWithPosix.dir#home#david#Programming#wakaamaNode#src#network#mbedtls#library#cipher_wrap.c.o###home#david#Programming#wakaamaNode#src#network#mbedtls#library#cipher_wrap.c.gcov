        -:    0:Source:/home/david/Programming/wakaamaNode/src/network/mbedtls/library/cipher_wrap.c
        -:    0:Graph:/home/david/Programming/wakaamaNode/b/CMakeFiles/TestsWithPosix.dir/home/david/Programming/wakaamaNode/src/network/mbedtls/library/cipher_wrap.c.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/**
        -:    2: * \file cipher_wrap.c
        -:    3: *
        -:    4: * \brief Generic cipher wrapper for mbed TLS
        -:    5: *
        -:    6: * \author Adriaan de Jong <dejong@fox-it.com>
        -:    7: *
        -:    8: *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
        -:    9: *  SPDX-License-Identifier: Apache-2.0
        -:   10: *
        -:   11: *  Licensed under the Apache License, Version 2.0 (the "License"); you may
        -:   12: *  not use this file except in compliance with the License.
        -:   13: *  You may obtain a copy of the License at
        -:   14: *
        -:   15: *  http://www.apache.org/licenses/LICENSE-2.0
        -:   16: *
        -:   17: *  Unless required by applicable law or agreed to in writing, software
        -:   18: *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
        -:   19: *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   20: *  See the License for the specific language governing permissions and
        -:   21: *  limitations under the License.
        -:   22: *
        -:   23: *  This file is part of mbed TLS (https://tls.mbed.org)
        -:   24: */
        -:   25:
        -:   26:#if !defined(MBEDTLS_CONFIG_FILE)
        -:   27:#include "mbedtls/config.h"
        -:   28:#else
        -:   29:#include MBEDTLS_CONFIG_FILE
        -:   30:#endif
        -:   31:
        -:   32:#if defined(MBEDTLS_CIPHER_C)
        -:   33:
        -:   34:#include "mbedtls/cipher_internal.h"
        -:   35:
        -:   36:#if defined(MBEDTLS_AES_C)
        -:   37:#include "mbedtls/aes.h"
        -:   38:#endif
        -:   39:
        -:   40:#if defined(MBEDTLS_ARC4_C)
        -:   41:#include "mbedtls/arc4.h"
        -:   42:#endif
        -:   43:
        -:   44:#if defined(MBEDTLS_CAMELLIA_C)
        -:   45:#include "mbedtls/camellia.h"
        -:   46:#endif
        -:   47:
        -:   48:#if defined(MBEDTLS_ARIA_C)
        -:   49:#include "mbedtls/aria.h"
        -:   50:#endif
        -:   51:
        -:   52:#if defined(MBEDTLS_DES_C)
        -:   53:#include "mbedtls/des.h"
        -:   54:#endif
        -:   55:
        -:   56:#if defined(MBEDTLS_BLOWFISH_C)
        -:   57:#include "mbedtls/blowfish.h"
        -:   58:#endif
        -:   59:
        -:   60:#if defined(MBEDTLS_GCM_C)
        -:   61:#include "mbedtls/gcm.h"
        -:   62:#endif
        -:   63:
        -:   64:#if defined(MBEDTLS_CCM_C)
        -:   65:#include "mbedtls/ccm.h"
        -:   66:#endif
        -:   67:
        -:   68:#if defined(MBEDTLS_CIPHER_NULL_CIPHER)
        -:   69:#include <string.h>
        -:   70:#endif
        -:   71:
        -:   72:#if defined(MBEDTLS_PLATFORM_C)
        -:   73:#include "mbedtls/platform.h"
        -:   74:#else
        -:   75:#include <stdlib.h>
        -:   76:#define mbedtls_calloc    calloc
        -:   77:#define mbedtls_free       free
        -:   78:#endif
        -:   79:
        -:   80:#if defined(MBEDTLS_GCM_C)
        -:   81:/* shared by all GCM ciphers */
        -:   82:static void *gcm_ctx_alloc( void )
        -:   83:{
        -:   84:    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
        -:   85:
        -:   86:    if( ctx != NULL )
        -:   87:        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
        -:   88:
        -:   89:    return( ctx );
        -:   90:}
        -:   91:
        -:   92:static void gcm_ctx_free( void *ctx )
        -:   93:{
        -:   94:    mbedtls_gcm_free( ctx );
        -:   95:    mbedtls_free( ctx );
        -:   96:}
        -:   97:#endif /* MBEDTLS_GCM_C */
        -:   98:
        -:   99:#if defined(MBEDTLS_CCM_C)
        -:  100:/* shared by all CCM ciphers */
        -:  101:static void *ccm_ctx_alloc( void )
        -:  102:{
        -:  103:    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ccm_context ) );
        -:  104:
        -:  105:    if( ctx != NULL )
        -:  106:        mbedtls_ccm_init( (mbedtls_ccm_context *) ctx );
        -:  107:
        -:  108:    return( ctx );
        -:  109:}
        -:  110:
        -:  111:static void ccm_ctx_free( void *ctx )
        -:  112:{
        -:  113:    mbedtls_ccm_free( ctx );
        -:  114:    mbedtls_free( ctx );
        -:  115:}
        -:  116:#endif /* MBEDTLS_CCM_C */
        -:  117:
        -:  118:#if defined(MBEDTLS_AES_C)
        -:  119:
    #####:  120:static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        -:  121:        const unsigned char *input, unsigned char *output )
        -:  122:{
    #####:  123:    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
        -:  124:}
        -:  125:
        -:  126:#if defined(MBEDTLS_CIPHER_MODE_CBC)
    #####:  127:static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        -:  128:        unsigned char *iv, const unsigned char *input, unsigned char *output )
        -:  129:{
    #####:  130:    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
        -:  131:                          output );
        -:  132:}
        -:  133:#endif /* MBEDTLS_CIPHER_MODE_CBC */
        -:  134:
        -:  135:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -:  136:static int aes_crypt_cfb128_wrap( void *ctx, mbedtls_operation_t operation,
        -:  137:        size_t length, size_t *iv_off, unsigned char *iv,
        -:  138:        const unsigned char *input, unsigned char *output )
        -:  139:{
        -:  140:    return mbedtls_aes_crypt_cfb128( (mbedtls_aes_context *) ctx, operation, length, iv_off, iv,
        -:  141:                             input, output );
        -:  142:}
        -:  143:#endif /* MBEDTLS_CIPHER_MODE_CFB */
        -:  144:
        -:  145:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -:  146:static int aes_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,
        -:  147:        unsigned char *nonce_counter, unsigned char *stream_block,
        -:  148:        const unsigned char *input, unsigned char *output )
        -:  149:{
        -:  150:    return mbedtls_aes_crypt_ctr( (mbedtls_aes_context *) ctx, length, nc_off, nonce_counter,
        -:  151:                          stream_block, input, output );
        -:  152:}
        -:  153:#endif /* MBEDTLS_CIPHER_MODE_CTR */
        -:  154:
    #####:  155:static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
        -:  156:                                unsigned int key_bitlen )
        -:  157:{
    #####:  158:    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
        -:  159:}
        -:  160:
    #####:  161:static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
        -:  162:                                unsigned int key_bitlen )
        -:  163:{
    #####:  164:    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
        -:  165:}
        -:  166:
    #####:  167:static void * aes_ctx_alloc( void )
        -:  168:{
    #####:  169:    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
        -:  170:
    #####:  171:    if( aes == NULL )
    #####:  172:        return( NULL );
        -:  173:
    #####:  174:    mbedtls_aes_init( aes );
        -:  175:
    #####:  176:    return( aes );
        -:  177:}
        -:  178:
    #####:  179:static void aes_ctx_free( void *ctx )
        -:  180:{
    #####:  181:    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    #####:  182:    mbedtls_free( ctx );
    #####:  183:}
        -:  184:
        -:  185:static const mbedtls_cipher_base_t aes_info = {
        -:  186:    MBEDTLS_CIPHER_ID_AES,
        -:  187:    aes_crypt_ecb_wrap,
        -:  188:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -:  189:    aes_crypt_cbc_wrap,
        -:  190:#endif
        -:  191:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -:  192:    aes_crypt_cfb128_wrap,
        -:  193:#endif
        -:  194:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -:  195:    aes_crypt_ctr_wrap,
        -:  196:#endif
        -:  197:#if defined(MBEDTLS_CIPHER_MODE_STREAM)
        -:  198:    NULL,
        -:  199:#endif
        -:  200:    aes_setkey_enc_wrap,
        -:  201:    aes_setkey_dec_wrap,
        -:  202:    aes_ctx_alloc,
        -:  203:    aes_ctx_free
        -:  204:};
        -:  205:
        -:  206:static const mbedtls_cipher_info_t aes_128_ecb_info = {
        -:  207:    MBEDTLS_CIPHER_AES_128_ECB,
        -:  208:    MBEDTLS_MODE_ECB,
        -:  209:    128,
        -:  210:    "AES-128-ECB",
        -:  211:    16,
        -:  212:    0,
        -:  213:    16,
        -:  214:    &aes_info
        -:  215:};
        -:  216:
        -:  217:static const mbedtls_cipher_info_t aes_192_ecb_info = {
        -:  218:    MBEDTLS_CIPHER_AES_192_ECB,
        -:  219:    MBEDTLS_MODE_ECB,
        -:  220:    192,
        -:  221:    "AES-192-ECB",
        -:  222:    16,
        -:  223:    0,
        -:  224:    16,
        -:  225:    &aes_info
        -:  226:};
        -:  227:
        -:  228:static const mbedtls_cipher_info_t aes_256_ecb_info = {
        -:  229:    MBEDTLS_CIPHER_AES_256_ECB,
        -:  230:    MBEDTLS_MODE_ECB,
        -:  231:    256,
        -:  232:    "AES-256-ECB",
        -:  233:    16,
        -:  234:    0,
        -:  235:    16,
        -:  236:    &aes_info
        -:  237:};
        -:  238:
        -:  239:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -:  240:static const mbedtls_cipher_info_t aes_128_cbc_info = {
        -:  241:    MBEDTLS_CIPHER_AES_128_CBC,
        -:  242:    MBEDTLS_MODE_CBC,
        -:  243:    128,
        -:  244:    "AES-128-CBC",
        -:  245:    16,
        -:  246:    0,
        -:  247:    16,
        -:  248:    &aes_info
        -:  249:};
        -:  250:
        -:  251:static const mbedtls_cipher_info_t aes_192_cbc_info = {
        -:  252:    MBEDTLS_CIPHER_AES_192_CBC,
        -:  253:    MBEDTLS_MODE_CBC,
        -:  254:    192,
        -:  255:    "AES-192-CBC",
        -:  256:    16,
        -:  257:    0,
        -:  258:    16,
        -:  259:    &aes_info
        -:  260:};
        -:  261:
        -:  262:static const mbedtls_cipher_info_t aes_256_cbc_info = {
        -:  263:    MBEDTLS_CIPHER_AES_256_CBC,
        -:  264:    MBEDTLS_MODE_CBC,
        -:  265:    256,
        -:  266:    "AES-256-CBC",
        -:  267:    16,
        -:  268:    0,
        -:  269:    16,
        -:  270:    &aes_info
        -:  271:};
        -:  272:#endif /* MBEDTLS_CIPHER_MODE_CBC */
        -:  273:
        -:  274:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -:  275:static const mbedtls_cipher_info_t aes_128_cfb128_info = {
        -:  276:    MBEDTLS_CIPHER_AES_128_CFB128,
        -:  277:    MBEDTLS_MODE_CFB,
        -:  278:    128,
        -:  279:    "AES-128-CFB128",
        -:  280:    16,
        -:  281:    0,
        -:  282:    16,
        -:  283:    &aes_info
        -:  284:};
        -:  285:
        -:  286:static const mbedtls_cipher_info_t aes_192_cfb128_info = {
        -:  287:    MBEDTLS_CIPHER_AES_192_CFB128,
        -:  288:    MBEDTLS_MODE_CFB,
        -:  289:    192,
        -:  290:    "AES-192-CFB128",
        -:  291:    16,
        -:  292:    0,
        -:  293:    16,
        -:  294:    &aes_info
        -:  295:};
        -:  296:
        -:  297:static const mbedtls_cipher_info_t aes_256_cfb128_info = {
        -:  298:    MBEDTLS_CIPHER_AES_256_CFB128,
        -:  299:    MBEDTLS_MODE_CFB,
        -:  300:    256,
        -:  301:    "AES-256-CFB128",
        -:  302:    16,
        -:  303:    0,
        -:  304:    16,
        -:  305:    &aes_info
        -:  306:};
        -:  307:#endif /* MBEDTLS_CIPHER_MODE_CFB */
        -:  308:
        -:  309:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -:  310:static const mbedtls_cipher_info_t aes_128_ctr_info = {
        -:  311:    MBEDTLS_CIPHER_AES_128_CTR,
        -:  312:    MBEDTLS_MODE_CTR,
        -:  313:    128,
        -:  314:    "AES-128-CTR",
        -:  315:    16,
        -:  316:    0,
        -:  317:    16,
        -:  318:    &aes_info
        -:  319:};
        -:  320:
        -:  321:static const mbedtls_cipher_info_t aes_192_ctr_info = {
        -:  322:    MBEDTLS_CIPHER_AES_192_CTR,
        -:  323:    MBEDTLS_MODE_CTR,
        -:  324:    192,
        -:  325:    "AES-192-CTR",
        -:  326:    16,
        -:  327:    0,
        -:  328:    16,
        -:  329:    &aes_info
        -:  330:};
        -:  331:
        -:  332:static const mbedtls_cipher_info_t aes_256_ctr_info = {
        -:  333:    MBEDTLS_CIPHER_AES_256_CTR,
        -:  334:    MBEDTLS_MODE_CTR,
        -:  335:    256,
        -:  336:    "AES-256-CTR",
        -:  337:    16,
        -:  338:    0,
        -:  339:    16,
        -:  340:    &aes_info
        -:  341:};
        -:  342:#endif /* MBEDTLS_CIPHER_MODE_CTR */
        -:  343:
        -:  344:#if defined(MBEDTLS_GCM_C)
        -:  345:static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
        -:  346:                                unsigned int key_bitlen )
        -:  347:{
        -:  348:    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
        -:  349:                     key, key_bitlen );
        -:  350:}
        -:  351:
        -:  352:static const mbedtls_cipher_base_t gcm_aes_info = {
        -:  353:    MBEDTLS_CIPHER_ID_AES,
        -:  354:    NULL,
        -:  355:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -:  356:    NULL,
        -:  357:#endif
        -:  358:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -:  359:    NULL,
        -:  360:#endif
        -:  361:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -:  362:    NULL,
        -:  363:#endif
        -:  364:#if defined(MBEDTLS_CIPHER_MODE_STREAM)
        -:  365:    NULL,
        -:  366:#endif
        -:  367:    gcm_aes_setkey_wrap,
        -:  368:    gcm_aes_setkey_wrap,
        -:  369:    gcm_ctx_alloc,
        -:  370:    gcm_ctx_free,
        -:  371:};
        -:  372:
        -:  373:static const mbedtls_cipher_info_t aes_128_gcm_info = {
        -:  374:    MBEDTLS_CIPHER_AES_128_GCM,
        -:  375:    MBEDTLS_MODE_GCM,
        -:  376:    128,
        -:  377:    "AES-128-GCM",
        -:  378:    12,
        -:  379:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -:  380:    16,
        -:  381:    &gcm_aes_info
        -:  382:};
        -:  383:
        -:  384:static const mbedtls_cipher_info_t aes_192_gcm_info = {
        -:  385:    MBEDTLS_CIPHER_AES_192_GCM,
        -:  386:    MBEDTLS_MODE_GCM,
        -:  387:    192,
        -:  388:    "AES-192-GCM",
        -:  389:    12,
        -:  390:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -:  391:    16,
        -:  392:    &gcm_aes_info
        -:  393:};
        -:  394:
        -:  395:static const mbedtls_cipher_info_t aes_256_gcm_info = {
        -:  396:    MBEDTLS_CIPHER_AES_256_GCM,
        -:  397:    MBEDTLS_MODE_GCM,
        -:  398:    256,
        -:  399:    "AES-256-GCM",
        -:  400:    12,
        -:  401:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -:  402:    16,
        -:  403:    &gcm_aes_info
        -:  404:};
        -:  405:#endif /* MBEDTLS_GCM_C */
        -:  406:
        -:  407:#if defined(MBEDTLS_CCM_C)
        -:  408:static int ccm_aes_setkey_wrap( void *ctx, const unsigned char *key,
        -:  409:                                unsigned int key_bitlen )
        -:  410:{
        -:  411:    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
        -:  412:                     key, key_bitlen );
        -:  413:}
        -:  414:
        -:  415:static const mbedtls_cipher_base_t ccm_aes_info = {
        -:  416:    MBEDTLS_CIPHER_ID_AES,
        -:  417:    NULL,
        -:  418:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -:  419:    NULL,
        -:  420:#endif
        -:  421:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -:  422:    NULL,
        -:  423:#endif
        -:  424:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -:  425:    NULL,
        -:  426:#endif
        -:  427:#if defined(MBEDTLS_CIPHER_MODE_STREAM)
        -:  428:    NULL,
        -:  429:#endif
        -:  430:    ccm_aes_setkey_wrap,
        -:  431:    ccm_aes_setkey_wrap,
        -:  432:    ccm_ctx_alloc,
        -:  433:    ccm_ctx_free,
        -:  434:};
        -:  435:
        -:  436:static const mbedtls_cipher_info_t aes_128_ccm_info = {
        -:  437:    MBEDTLS_CIPHER_AES_128_CCM,
        -:  438:    MBEDTLS_MODE_CCM,
        -:  439:    128,
        -:  440:    "AES-128-CCM",
        -:  441:    12,
        -:  442:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -:  443:    16,
        -:  444:    &ccm_aes_info
        -:  445:};
        -:  446:
        -:  447:static const mbedtls_cipher_info_t aes_192_ccm_info = {
        -:  448:    MBEDTLS_CIPHER_AES_192_CCM,
        -:  449:    MBEDTLS_MODE_CCM,
        -:  450:    192,
        -:  451:    "AES-192-CCM",
        -:  452:    12,
        -:  453:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -:  454:    16,
        -:  455:    &ccm_aes_info
        -:  456:};
        -:  457:
        -:  458:static const mbedtls_cipher_info_t aes_256_ccm_info = {
        -:  459:    MBEDTLS_CIPHER_AES_256_CCM,
        -:  460:    MBEDTLS_MODE_CCM,
        -:  461:    256,
        -:  462:    "AES-256-CCM",
        -:  463:    12,
        -:  464:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -:  465:    16,
        -:  466:    &ccm_aes_info
        -:  467:};
        -:  468:#endif /* MBEDTLS_CCM_C */
        -:  469:
        -:  470:#endif /* MBEDTLS_AES_C */
        -:  471:
        -:  472:#if defined(MBEDTLS_CAMELLIA_C)
        -:  473:
        -:  474:static int camellia_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        -:  475:        const unsigned char *input, unsigned char *output )
        -:  476:{
        -:  477:    return mbedtls_camellia_crypt_ecb( (mbedtls_camellia_context *) ctx, operation, input,
        -:  478:                               output );
        -:  479:}
        -:  480:
        -:  481:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -:  482:static int camellia_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation,
        -:  483:        size_t length, unsigned char *iv,
        -:  484:        const unsigned char *input, unsigned char *output )
        -:  485:{
        -:  486:    return mbedtls_camellia_crypt_cbc( (mbedtls_camellia_context *) ctx, operation, length, iv,
        -:  487:                               input, output );
        -:  488:}
        -:  489:#endif /* MBEDTLS_CIPHER_MODE_CBC */
        -:  490:
        -:  491:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -:  492:static int camellia_crypt_cfb128_wrap( void *ctx, mbedtls_operation_t operation,
        -:  493:        size_t length, size_t *iv_off, unsigned char *iv,
        -:  494:        const unsigned char *input, unsigned char *output )
        -:  495:{
        -:  496:    return mbedtls_camellia_crypt_cfb128( (mbedtls_camellia_context *) ctx, operation, length,
        -:  497:                                  iv_off, iv, input, output );
        -:  498:}
        -:  499:#endif /* MBEDTLS_CIPHER_MODE_CFB */
        -:  500:
        -:  501:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -:  502:static int camellia_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,
        -:  503:        unsigned char *nonce_counter, unsigned char *stream_block,
        -:  504:        const unsigned char *input, unsigned char *output )
        -:  505:{
        -:  506:    return mbedtls_camellia_crypt_ctr( (mbedtls_camellia_context *) ctx, length, nc_off,
        -:  507:                               nonce_counter, stream_block, input, output );
        -:  508:}
        -:  509:#endif /* MBEDTLS_CIPHER_MODE_CTR */
        -:  510:
        -:  511:static int camellia_setkey_dec_wrap( void *ctx, const unsigned char *key,
        -:  512:                                     unsigned int key_bitlen )
        -:  513:{
        -:  514:    return mbedtls_camellia_setkey_dec( (mbedtls_camellia_context *) ctx, key, key_bitlen );
        -:  515:}
        -:  516:
        -:  517:static int camellia_setkey_enc_wrap( void *ctx, const unsigned char *key,
        -:  518:                                     unsigned int key_bitlen )
        -:  519:{
        -:  520:    return mbedtls_camellia_setkey_enc( (mbedtls_camellia_context *) ctx, key, key_bitlen );
        -:  521:}
        -:  522:
        -:  523:static void * camellia_ctx_alloc( void )
        -:  524:{
        -:  525:    mbedtls_camellia_context *ctx;
        -:  526:    ctx = mbedtls_calloc( 1, sizeof( mbedtls_camellia_context ) );
        -:  527:
        -:  528:    if( ctx == NULL )
        -:  529:        return( NULL );
        -:  530:
        -:  531:    mbedtls_camellia_init( ctx );
        -:  532:
        -:  533:    return( ctx );
        -:  534:}
        -:  535:
        -:  536:static void camellia_ctx_free( void *ctx )
        -:  537:{
        -:  538:    mbedtls_camellia_free( (mbedtls_camellia_context *) ctx );
        -:  539:    mbedtls_free( ctx );
        -:  540:}
        -:  541:
        -:  542:static const mbedtls_cipher_base_t camellia_info = {
        -:  543:    MBEDTLS_CIPHER_ID_CAMELLIA,
        -:  544:    camellia_crypt_ecb_wrap,
        -:  545:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -:  546:    camellia_crypt_cbc_wrap,
        -:  547:#endif
        -:  548:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -:  549:    camellia_crypt_cfb128_wrap,
        -:  550:#endif
        -:  551:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -:  552:    camellia_crypt_ctr_wrap,
        -:  553:#endif
        -:  554:#if defined(MBEDTLS_CIPHER_MODE_STREAM)
        -:  555:    NULL,
        -:  556:#endif
        -:  557:    camellia_setkey_enc_wrap,
        -:  558:    camellia_setkey_dec_wrap,
        -:  559:    camellia_ctx_alloc,
        -:  560:    camellia_ctx_free
        -:  561:};
        -:  562:
        -:  563:static const mbedtls_cipher_info_t camellia_128_ecb_info = {
        -:  564:    MBEDTLS_CIPHER_CAMELLIA_128_ECB,
        -:  565:    MBEDTLS_MODE_ECB,
        -:  566:    128,
        -:  567:    "CAMELLIA-128-ECB",
        -:  568:    16,
        -:  569:    0,
        -:  570:    16,
        -:  571:    &camellia_info
        -:  572:};
        -:  573:
        -:  574:static const mbedtls_cipher_info_t camellia_192_ecb_info = {
        -:  575:    MBEDTLS_CIPHER_CAMELLIA_192_ECB,
        -:  576:    MBEDTLS_MODE_ECB,
        -:  577:    192,
        -:  578:    "CAMELLIA-192-ECB",
        -:  579:    16,
        -:  580:    0,
        -:  581:    16,
        -:  582:    &camellia_info
        -:  583:};
        -:  584:
        -:  585:static const mbedtls_cipher_info_t camellia_256_ecb_info = {
        -:  586:    MBEDTLS_CIPHER_CAMELLIA_256_ECB,
        -:  587:    MBEDTLS_MODE_ECB,
        -:  588:    256,
        -:  589:    "CAMELLIA-256-ECB",
        -:  590:    16,
        -:  591:    0,
        -:  592:    16,
        -:  593:    &camellia_info
        -:  594:};
        -:  595:
        -:  596:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -:  597:static const mbedtls_cipher_info_t camellia_128_cbc_info = {
        -:  598:    MBEDTLS_CIPHER_CAMELLIA_128_CBC,
        -:  599:    MBEDTLS_MODE_CBC,
        -:  600:    128,
        -:  601:    "CAMELLIA-128-CBC",
        -:  602:    16,
        -:  603:    0,
        -:  604:    16,
        -:  605:    &camellia_info
        -:  606:};
        -:  607:
        -:  608:static const mbedtls_cipher_info_t camellia_192_cbc_info = {
        -:  609:    MBEDTLS_CIPHER_CAMELLIA_192_CBC,
        -:  610:    MBEDTLS_MODE_CBC,
        -:  611:    192,
        -:  612:    "CAMELLIA-192-CBC",
        -:  613:    16,
        -:  614:    0,
        -:  615:    16,
        -:  616:    &camellia_info
        -:  617:};
        -:  618:
        -:  619:static const mbedtls_cipher_info_t camellia_256_cbc_info = {
        -:  620:    MBEDTLS_CIPHER_CAMELLIA_256_CBC,
        -:  621:    MBEDTLS_MODE_CBC,
        -:  622:    256,
        -:  623:    "CAMELLIA-256-CBC",
        -:  624:    16,
        -:  625:    0,
        -:  626:    16,
        -:  627:    &camellia_info
        -:  628:};
        -:  629:#endif /* MBEDTLS_CIPHER_MODE_CBC */
        -:  630:
        -:  631:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -:  632:static const mbedtls_cipher_info_t camellia_128_cfb128_info = {
        -:  633:    MBEDTLS_CIPHER_CAMELLIA_128_CFB128,
        -:  634:    MBEDTLS_MODE_CFB,
        -:  635:    128,
        -:  636:    "CAMELLIA-128-CFB128",
        -:  637:    16,
        -:  638:    0,
        -:  639:    16,
        -:  640:    &camellia_info
        -:  641:};
        -:  642:
        -:  643:static const mbedtls_cipher_info_t camellia_192_cfb128_info = {
        -:  644:    MBEDTLS_CIPHER_CAMELLIA_192_CFB128,
        -:  645:    MBEDTLS_MODE_CFB,
        -:  646:    192,
        -:  647:    "CAMELLIA-192-CFB128",
        -:  648:    16,
        -:  649:    0,
        -:  650:    16,
        -:  651:    &camellia_info
        -:  652:};
        -:  653:
        -:  654:static const mbedtls_cipher_info_t camellia_256_cfb128_info = {
        -:  655:    MBEDTLS_CIPHER_CAMELLIA_256_CFB128,
        -:  656:    MBEDTLS_MODE_CFB,
        -:  657:    256,
        -:  658:    "CAMELLIA-256-CFB128",
        -:  659:    16,
        -:  660:    0,
        -:  661:    16,
        -:  662:    &camellia_info
        -:  663:};
        -:  664:#endif /* MBEDTLS_CIPHER_MODE_CFB */
        -:  665:
        -:  666:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -:  667:static const mbedtls_cipher_info_t camellia_128_ctr_info = {
        -:  668:    MBEDTLS_CIPHER_CAMELLIA_128_CTR,
        -:  669:    MBEDTLS_MODE_CTR,
        -:  670:    128,
        -:  671:    "CAMELLIA-128-CTR",
        -:  672:    16,
        -:  673:    0,
        -:  674:    16,
        -:  675:    &camellia_info
        -:  676:};
        -:  677:
        -:  678:static const mbedtls_cipher_info_t camellia_192_ctr_info = {
        -:  679:    MBEDTLS_CIPHER_CAMELLIA_192_CTR,
        -:  680:    MBEDTLS_MODE_CTR,
        -:  681:    192,
        -:  682:    "CAMELLIA-192-CTR",
        -:  683:    16,
        -:  684:    0,
        -:  685:    16,
        -:  686:    &camellia_info
        -:  687:};
        -:  688:
        -:  689:static const mbedtls_cipher_info_t camellia_256_ctr_info = {
        -:  690:    MBEDTLS_CIPHER_CAMELLIA_256_CTR,
        -:  691:    MBEDTLS_MODE_CTR,
        -:  692:    256,
        -:  693:    "CAMELLIA-256-CTR",
        -:  694:    16,
        -:  695:    0,
        -:  696:    16,
        -:  697:    &camellia_info
        -:  698:};
        -:  699:#endif /* MBEDTLS_CIPHER_MODE_CTR */
        -:  700:
        -:  701:#if defined(MBEDTLS_GCM_C)
        -:  702:static int gcm_camellia_setkey_wrap( void *ctx, const unsigned char *key,
        -:  703:                                     unsigned int key_bitlen )
        -:  704:{
        -:  705:    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
        -:  706:                     key, key_bitlen );
        -:  707:}
        -:  708:
        -:  709:static const mbedtls_cipher_base_t gcm_camellia_info = {
        -:  710:    MBEDTLS_CIPHER_ID_CAMELLIA,
        -:  711:    NULL,
        -:  712:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -:  713:    NULL,
        -:  714:#endif
        -:  715:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -:  716:    NULL,
        -:  717:#endif
        -:  718:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -:  719:    NULL,
        -:  720:#endif
        -:  721:#if defined(MBEDTLS_CIPHER_MODE_STREAM)
        -:  722:    NULL,
        -:  723:#endif
        -:  724:    gcm_camellia_setkey_wrap,
        -:  725:    gcm_camellia_setkey_wrap,
        -:  726:    gcm_ctx_alloc,
        -:  727:    gcm_ctx_free,
        -:  728:};
        -:  729:
        -:  730:static const mbedtls_cipher_info_t camellia_128_gcm_info = {
        -:  731:    MBEDTLS_CIPHER_CAMELLIA_128_GCM,
        -:  732:    MBEDTLS_MODE_GCM,
        -:  733:    128,
        -:  734:    "CAMELLIA-128-GCM",
        -:  735:    12,
        -:  736:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -:  737:    16,
        -:  738:    &gcm_camellia_info
        -:  739:};
        -:  740:
        -:  741:static const mbedtls_cipher_info_t camellia_192_gcm_info = {
        -:  742:    MBEDTLS_CIPHER_CAMELLIA_192_GCM,
        -:  743:    MBEDTLS_MODE_GCM,
        -:  744:    192,
        -:  745:    "CAMELLIA-192-GCM",
        -:  746:    12,
        -:  747:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -:  748:    16,
        -:  749:    &gcm_camellia_info
        -:  750:};
        -:  751:
        -:  752:static const mbedtls_cipher_info_t camellia_256_gcm_info = {
        -:  753:    MBEDTLS_CIPHER_CAMELLIA_256_GCM,
        -:  754:    MBEDTLS_MODE_GCM,
        -:  755:    256,
        -:  756:    "CAMELLIA-256-GCM",
        -:  757:    12,
        -:  758:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -:  759:    16,
        -:  760:    &gcm_camellia_info
        -:  761:};
        -:  762:#endif /* MBEDTLS_GCM_C */
        -:  763:
        -:  764:#if defined(MBEDTLS_CCM_C)
        -:  765:static int ccm_camellia_setkey_wrap( void *ctx, const unsigned char *key,
        -:  766:                                     unsigned int key_bitlen )
        -:  767:{
        -:  768:    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
        -:  769:                     key, key_bitlen );
        -:  770:}
        -:  771:
        -:  772:static const mbedtls_cipher_base_t ccm_camellia_info = {
        -:  773:    MBEDTLS_CIPHER_ID_CAMELLIA,
        -:  774:    NULL,
        -:  775:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -:  776:    NULL,
        -:  777:#endif
        -:  778:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -:  779:    NULL,
        -:  780:#endif
        -:  781:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -:  782:    NULL,
        -:  783:#endif
        -:  784:#if defined(MBEDTLS_CIPHER_MODE_STREAM)
        -:  785:    NULL,
        -:  786:#endif
        -:  787:    ccm_camellia_setkey_wrap,
        -:  788:    ccm_camellia_setkey_wrap,
        -:  789:    ccm_ctx_alloc,
        -:  790:    ccm_ctx_free,
        -:  791:};
        -:  792:
        -:  793:static const mbedtls_cipher_info_t camellia_128_ccm_info = {
        -:  794:    MBEDTLS_CIPHER_CAMELLIA_128_CCM,
        -:  795:    MBEDTLS_MODE_CCM,
        -:  796:    128,
        -:  797:    "CAMELLIA-128-CCM",
        -:  798:    12,
        -:  799:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -:  800:    16,
        -:  801:    &ccm_camellia_info
        -:  802:};
        -:  803:
        -:  804:static const mbedtls_cipher_info_t camellia_192_ccm_info = {
        -:  805:    MBEDTLS_CIPHER_CAMELLIA_192_CCM,
        -:  806:    MBEDTLS_MODE_CCM,
        -:  807:    192,
        -:  808:    "CAMELLIA-192-CCM",
        -:  809:    12,
        -:  810:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -:  811:    16,
        -:  812:    &ccm_camellia_info
        -:  813:};
        -:  814:
        -:  815:static const mbedtls_cipher_info_t camellia_256_ccm_info = {
        -:  816:    MBEDTLS_CIPHER_CAMELLIA_256_CCM,
        -:  817:    MBEDTLS_MODE_CCM,
        -:  818:    256,
        -:  819:    "CAMELLIA-256-CCM",
        -:  820:    12,
        -:  821:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -:  822:    16,
        -:  823:    &ccm_camellia_info
        -:  824:};
        -:  825:#endif /* MBEDTLS_CCM_C */
        -:  826:
        -:  827:#endif /* MBEDTLS_CAMELLIA_C */
        -:  828:
        -:  829:#if defined(MBEDTLS_ARIA_C)
        -:  830:
        -:  831:static int aria_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        -:  832:        const unsigned char *input, unsigned char *output )
        -:  833:{
        -:  834:    (void) operation;
        -:  835:    return mbedtls_aria_crypt_ecb( (mbedtls_aria_context *) ctx, input,
        -:  836:                               output );
        -:  837:}
        -:  838:
        -:  839:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -:  840:static int aria_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation,
        -:  841:        size_t length, unsigned char *iv,
        -:  842:        const unsigned char *input, unsigned char *output )
        -:  843:{
        -:  844:    return mbedtls_aria_crypt_cbc( (mbedtls_aria_context *) ctx, operation, length, iv,
        -:  845:                               input, output );
        -:  846:}
        -:  847:#endif /* MBEDTLS_CIPHER_MODE_CBC */
        -:  848:
        -:  849:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -:  850:static int aria_crypt_cfb128_wrap( void *ctx, mbedtls_operation_t operation,
        -:  851:        size_t length, size_t *iv_off, unsigned char *iv,
        -:  852:        const unsigned char *input, unsigned char *output )
        -:  853:{
        -:  854:    return mbedtls_aria_crypt_cfb128( (mbedtls_aria_context *) ctx, operation, length,
        -:  855:                                  iv_off, iv, input, output );
        -:  856:}
        -:  857:#endif /* MBEDTLS_CIPHER_MODE_CFB */
        -:  858:
        -:  859:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -:  860:static int aria_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,
        -:  861:        unsigned char *nonce_counter, unsigned char *stream_block,
        -:  862:        const unsigned char *input, unsigned char *output )
        -:  863:{
        -:  864:    return mbedtls_aria_crypt_ctr( (mbedtls_aria_context *) ctx, length, nc_off,
        -:  865:                               nonce_counter, stream_block, input, output );
        -:  866:}
        -:  867:#endif /* MBEDTLS_CIPHER_MODE_CTR */
        -:  868:
        -:  869:static int aria_setkey_dec_wrap( void *ctx, const unsigned char *key,
        -:  870:                                     unsigned int key_bitlen )
        -:  871:{
        -:  872:    return mbedtls_aria_setkey_dec( (mbedtls_aria_context *) ctx, key, key_bitlen );
        -:  873:}
        -:  874:
        -:  875:static int aria_setkey_enc_wrap( void *ctx, const unsigned char *key,
        -:  876:                                     unsigned int key_bitlen )
        -:  877:{
        -:  878:    return mbedtls_aria_setkey_enc( (mbedtls_aria_context *) ctx, key, key_bitlen );
        -:  879:}
        -:  880:
        -:  881:static void * aria_ctx_alloc( void )
        -:  882:{
        -:  883:    mbedtls_aria_context *ctx;
        -:  884:    ctx = mbedtls_calloc( 1, sizeof( mbedtls_aria_context ) );
        -:  885:
        -:  886:    if( ctx == NULL )
        -:  887:        return( NULL );
        -:  888:
        -:  889:    mbedtls_aria_init( ctx );
        -:  890:
        -:  891:    return( ctx );
        -:  892:}
        -:  893:
        -:  894:static void aria_ctx_free( void *ctx )
        -:  895:{
        -:  896:    mbedtls_aria_free( (mbedtls_aria_context *) ctx );
        -:  897:    mbedtls_free( ctx );
        -:  898:}
        -:  899:
        -:  900:static const mbedtls_cipher_base_t aria_info = {
        -:  901:    MBEDTLS_CIPHER_ID_ARIA,
        -:  902:    aria_crypt_ecb_wrap,
        -:  903:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -:  904:    aria_crypt_cbc_wrap,
        -:  905:#endif
        -:  906:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -:  907:    aria_crypt_cfb128_wrap,
        -:  908:#endif
        -:  909:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -:  910:    aria_crypt_ctr_wrap,
        -:  911:#endif
        -:  912:#if defined(MBEDTLS_CIPHER_MODE_STREAM)
        -:  913:    NULL,
        -:  914:#endif
        -:  915:    aria_setkey_enc_wrap,
        -:  916:    aria_setkey_dec_wrap,
        -:  917:    aria_ctx_alloc,
        -:  918:    aria_ctx_free
        -:  919:};
        -:  920:
        -:  921:static const mbedtls_cipher_info_t aria_128_ecb_info = {
        -:  922:    MBEDTLS_CIPHER_ARIA_128_ECB,
        -:  923:    MBEDTLS_MODE_ECB,
        -:  924:    128,
        -:  925:    "ARIA-128-ECB",
        -:  926:    16,
        -:  927:    0,
        -:  928:    16,
        -:  929:    &aria_info
        -:  930:};
        -:  931:
        -:  932:static const mbedtls_cipher_info_t aria_192_ecb_info = {
        -:  933:    MBEDTLS_CIPHER_ARIA_192_ECB,
        -:  934:    MBEDTLS_MODE_ECB,
        -:  935:    192,
        -:  936:    "ARIA-192-ECB",
        -:  937:    16,
        -:  938:    0,
        -:  939:    16,
        -:  940:    &aria_info
        -:  941:};
        -:  942:
        -:  943:static const mbedtls_cipher_info_t aria_256_ecb_info = {
        -:  944:    MBEDTLS_CIPHER_ARIA_256_ECB,
        -:  945:    MBEDTLS_MODE_ECB,
        -:  946:    256,
        -:  947:    "ARIA-256-ECB",
        -:  948:    16,
        -:  949:    0,
        -:  950:    16,
        -:  951:    &aria_info
        -:  952:};
        -:  953:
        -:  954:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -:  955:static const mbedtls_cipher_info_t aria_128_cbc_info = {
        -:  956:    MBEDTLS_CIPHER_ARIA_128_CBC,
        -:  957:    MBEDTLS_MODE_CBC,
        -:  958:    128,
        -:  959:    "ARIA-128-CBC",
        -:  960:    16,
        -:  961:    0,
        -:  962:    16,
        -:  963:    &aria_info
        -:  964:};
        -:  965:
        -:  966:static const mbedtls_cipher_info_t aria_192_cbc_info = {
        -:  967:    MBEDTLS_CIPHER_ARIA_192_CBC,
        -:  968:    MBEDTLS_MODE_CBC,
        -:  969:    192,
        -:  970:    "ARIA-192-CBC",
        -:  971:    16,
        -:  972:    0,
        -:  973:    16,
        -:  974:    &aria_info
        -:  975:};
        -:  976:
        -:  977:static const mbedtls_cipher_info_t aria_256_cbc_info = {
        -:  978:    MBEDTLS_CIPHER_ARIA_256_CBC,
        -:  979:    MBEDTLS_MODE_CBC,
        -:  980:    256,
        -:  981:    "ARIA-256-CBC",
        -:  982:    16,
        -:  983:    0,
        -:  984:    16,
        -:  985:    &aria_info
        -:  986:};
        -:  987:#endif /* MBEDTLS_CIPHER_MODE_CBC */
        -:  988:
        -:  989:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -:  990:static const mbedtls_cipher_info_t aria_128_cfb128_info = {
        -:  991:    MBEDTLS_CIPHER_ARIA_128_CFB128,
        -:  992:    MBEDTLS_MODE_CFB,
        -:  993:    128,
        -:  994:    "ARIA-128-CFB128",
        -:  995:    16,
        -:  996:    0,
        -:  997:    16,
        -:  998:    &aria_info
        -:  999:};
        -: 1000:
        -: 1001:static const mbedtls_cipher_info_t aria_192_cfb128_info = {
        -: 1002:    MBEDTLS_CIPHER_ARIA_192_CFB128,
        -: 1003:    MBEDTLS_MODE_CFB,
        -: 1004:    192,
        -: 1005:    "ARIA-192-CFB128",
        -: 1006:    16,
        -: 1007:    0,
        -: 1008:    16,
        -: 1009:    &aria_info
        -: 1010:};
        -: 1011:
        -: 1012:static const mbedtls_cipher_info_t aria_256_cfb128_info = {
        -: 1013:    MBEDTLS_CIPHER_ARIA_256_CFB128,
        -: 1014:    MBEDTLS_MODE_CFB,
        -: 1015:    256,
        -: 1016:    "ARIA-256-CFB128",
        -: 1017:    16,
        -: 1018:    0,
        -: 1019:    16,
        -: 1020:    &aria_info
        -: 1021:};
        -: 1022:#endif /* MBEDTLS_CIPHER_MODE_CFB */
        -: 1023:
        -: 1024:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -: 1025:static const mbedtls_cipher_info_t aria_128_ctr_info = {
        -: 1026:    MBEDTLS_CIPHER_ARIA_128_CTR,
        -: 1027:    MBEDTLS_MODE_CTR,
        -: 1028:    128,
        -: 1029:    "ARIA-128-CTR",
        -: 1030:    16,
        -: 1031:    0,
        -: 1032:    16,
        -: 1033:    &aria_info
        -: 1034:};
        -: 1035:
        -: 1036:static const mbedtls_cipher_info_t aria_192_ctr_info = {
        -: 1037:    MBEDTLS_CIPHER_ARIA_192_CTR,
        -: 1038:    MBEDTLS_MODE_CTR,
        -: 1039:    192,
        -: 1040:    "ARIA-192-CTR",
        -: 1041:    16,
        -: 1042:    0,
        -: 1043:    16,
        -: 1044:    &aria_info
        -: 1045:};
        -: 1046:
        -: 1047:static const mbedtls_cipher_info_t aria_256_ctr_info = {
        -: 1048:    MBEDTLS_CIPHER_ARIA_256_CTR,
        -: 1049:    MBEDTLS_MODE_CTR,
        -: 1050:    256,
        -: 1051:    "ARIA-256-CTR",
        -: 1052:    16,
        -: 1053:    0,
        -: 1054:    16,
        -: 1055:    &aria_info
        -: 1056:};
        -: 1057:#endif /* MBEDTLS_CIPHER_MODE_CTR */
        -: 1058:
        -: 1059:#if defined(MBEDTLS_GCM_C)
        -: 1060:static int gcm_aria_setkey_wrap( void *ctx, const unsigned char *key,
        -: 1061:                                     unsigned int key_bitlen )
        -: 1062:{
        -: 1063:    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_ARIA,
        -: 1064:                     key, key_bitlen );
        -: 1065:}
        -: 1066:
        -: 1067:static const mbedtls_cipher_base_t gcm_aria_info = {
        -: 1068:    MBEDTLS_CIPHER_ID_ARIA,
        -: 1069:    NULL,
        -: 1070:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1071:    NULL,
        -: 1072:#endif
        -: 1073:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -: 1074:    NULL,
        -: 1075:#endif
        -: 1076:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -: 1077:    NULL,
        -: 1078:#endif
        -: 1079:#if defined(MBEDTLS_CIPHER_MODE_STREAM)
        -: 1080:    NULL,
        -: 1081:#endif
        -: 1082:    gcm_aria_setkey_wrap,
        -: 1083:    gcm_aria_setkey_wrap,
        -: 1084:    gcm_ctx_alloc,
        -: 1085:    gcm_ctx_free,
        -: 1086:};
        -: 1087:
        -: 1088:static const mbedtls_cipher_info_t aria_128_gcm_info = {
        -: 1089:    MBEDTLS_CIPHER_ARIA_128_GCM,
        -: 1090:    MBEDTLS_MODE_GCM,
        -: 1091:    128,
        -: 1092:    "ARIA-128-GCM",
        -: 1093:    12,
        -: 1094:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -: 1095:    16,
        -: 1096:    &gcm_aria_info
        -: 1097:};
        -: 1098:
        -: 1099:static const mbedtls_cipher_info_t aria_192_gcm_info = {
        -: 1100:    MBEDTLS_CIPHER_ARIA_192_GCM,
        -: 1101:    MBEDTLS_MODE_GCM,
        -: 1102:    192,
        -: 1103:    "ARIA-192-GCM",
        -: 1104:    12,
        -: 1105:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -: 1106:    16,
        -: 1107:    &gcm_aria_info
        -: 1108:};
        -: 1109:
        -: 1110:static const mbedtls_cipher_info_t aria_256_gcm_info = {
        -: 1111:    MBEDTLS_CIPHER_ARIA_256_GCM,
        -: 1112:    MBEDTLS_MODE_GCM,
        -: 1113:    256,
        -: 1114:    "ARIA-256-GCM",
        -: 1115:    12,
        -: 1116:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -: 1117:    16,
        -: 1118:    &gcm_aria_info
        -: 1119:};
        -: 1120:#endif /* MBEDTLS_GCM_C */
        -: 1121:
        -: 1122:#if defined(MBEDTLS_CCM_C)
        -: 1123:static int ccm_aria_setkey_wrap( void *ctx, const unsigned char *key,
        -: 1124:                                     unsigned int key_bitlen )
        -: 1125:{
        -: 1126:    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_ARIA,
        -: 1127:                     key, key_bitlen );
        -: 1128:}
        -: 1129:
        -: 1130:static const mbedtls_cipher_base_t ccm_aria_info = {
        -: 1131:    MBEDTLS_CIPHER_ID_ARIA,
        -: 1132:    NULL,
        -: 1133:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1134:    NULL,
        -: 1135:#endif
        -: 1136:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -: 1137:    NULL,
        -: 1138:#endif
        -: 1139:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -: 1140:    NULL,
        -: 1141:#endif
        -: 1142:#if defined(MBEDTLS_CIPHER_MODE_STREAM)
        -: 1143:    NULL,
        -: 1144:#endif
        -: 1145:    ccm_aria_setkey_wrap,
        -: 1146:    ccm_aria_setkey_wrap,
        -: 1147:    ccm_ctx_alloc,
        -: 1148:    ccm_ctx_free,
        -: 1149:};
        -: 1150:
        -: 1151:static const mbedtls_cipher_info_t aria_128_ccm_info = {
        -: 1152:    MBEDTLS_CIPHER_ARIA_128_CCM,
        -: 1153:    MBEDTLS_MODE_CCM,
        -: 1154:    128,
        -: 1155:    "ARIA-128-CCM",
        -: 1156:    12,
        -: 1157:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -: 1158:    16,
        -: 1159:    &ccm_aria_info
        -: 1160:};
        -: 1161:
        -: 1162:static const mbedtls_cipher_info_t aria_192_ccm_info = {
        -: 1163:    MBEDTLS_CIPHER_ARIA_192_CCM,
        -: 1164:    MBEDTLS_MODE_CCM,
        -: 1165:    192,
        -: 1166:    "ARIA-192-CCM",
        -: 1167:    12,
        -: 1168:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -: 1169:    16,
        -: 1170:    &ccm_aria_info
        -: 1171:};
        -: 1172:
        -: 1173:static const mbedtls_cipher_info_t aria_256_ccm_info = {
        -: 1174:    MBEDTLS_CIPHER_ARIA_256_CCM,
        -: 1175:    MBEDTLS_MODE_CCM,
        -: 1176:    256,
        -: 1177:    "ARIA-256-CCM",
        -: 1178:    12,
        -: 1179:    MBEDTLS_CIPHER_VARIABLE_IV_LEN,
        -: 1180:    16,
        -: 1181:    &ccm_aria_info
        -: 1182:};
        -: 1183:#endif /* MBEDTLS_CCM_C */
        -: 1184:
        -: 1185:#endif /* MBEDTLS_ARIA_C */
        -: 1186:
        -: 1187:#if defined(MBEDTLS_DES_C)
        -: 1188:
        -: 1189:static int des_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        -: 1190:        const unsigned char *input, unsigned char *output )
        -: 1191:{
        -: 1192:    ((void) operation);
        -: 1193:    return mbedtls_des_crypt_ecb( (mbedtls_des_context *) ctx, input, output );
        -: 1194:}
        -: 1195:
        -: 1196:static int des3_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        -: 1197:        const unsigned char *input, unsigned char *output )
        -: 1198:{
        -: 1199:    ((void) operation);
        -: 1200:    return mbedtls_des3_crypt_ecb( (mbedtls_des3_context *) ctx, input, output );
        -: 1201:}
        -: 1202:
        -: 1203:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1204:static int des_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        -: 1205:        unsigned char *iv, const unsigned char *input, unsigned char *output )
        -: 1206:{
        -: 1207:    return mbedtls_des_crypt_cbc( (mbedtls_des_context *) ctx, operation, length, iv, input,
        -: 1208:                          output );
        -: 1209:}
        -: 1210:#endif /* MBEDTLS_CIPHER_MODE_CBC */
        -: 1211:
        -: 1212:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1213:static int des3_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        -: 1214:        unsigned char *iv, const unsigned char *input, unsigned char *output )
        -: 1215:{
        -: 1216:    return mbedtls_des3_crypt_cbc( (mbedtls_des3_context *) ctx, operation, length, iv, input,
        -: 1217:                           output );
        -: 1218:}
        -: 1219:#endif /* MBEDTLS_CIPHER_MODE_CBC */
        -: 1220:
        -: 1221:static int des_setkey_dec_wrap( void *ctx, const unsigned char *key,
        -: 1222:                                unsigned int key_bitlen )
        -: 1223:{
        -: 1224:    ((void) key_bitlen);
        -: 1225:
        -: 1226:    return mbedtls_des_setkey_dec( (mbedtls_des_context *) ctx, key );
        -: 1227:}
        -: 1228:
        -: 1229:static int des_setkey_enc_wrap( void *ctx, const unsigned char *key,
        -: 1230:                                unsigned int key_bitlen )
        -: 1231:{
        -: 1232:    ((void) key_bitlen);
        -: 1233:
        -: 1234:    return mbedtls_des_setkey_enc( (mbedtls_des_context *) ctx, key );
        -: 1235:}
        -: 1236:
        -: 1237:static int des3_set2key_dec_wrap( void *ctx, const unsigned char *key,
        -: 1238:                                  unsigned int key_bitlen )
        -: 1239:{
        -: 1240:    ((void) key_bitlen);
        -: 1241:
        -: 1242:    return mbedtls_des3_set2key_dec( (mbedtls_des3_context *) ctx, key );
        -: 1243:}
        -: 1244:
        -: 1245:static int des3_set2key_enc_wrap( void *ctx, const unsigned char *key,
        -: 1246:                                  unsigned int key_bitlen )
        -: 1247:{
        -: 1248:    ((void) key_bitlen);
        -: 1249:
        -: 1250:    return mbedtls_des3_set2key_enc( (mbedtls_des3_context *) ctx, key );
        -: 1251:}
        -: 1252:
        -: 1253:static int des3_set3key_dec_wrap( void *ctx, const unsigned char *key,
        -: 1254:                                  unsigned int key_bitlen )
        -: 1255:{
        -: 1256:    ((void) key_bitlen);
        -: 1257:
        -: 1258:    return mbedtls_des3_set3key_dec( (mbedtls_des3_context *) ctx, key );
        -: 1259:}
        -: 1260:
        -: 1261:static int des3_set3key_enc_wrap( void *ctx, const unsigned char *key,
        -: 1262:                                  unsigned int key_bitlen )
        -: 1263:{
        -: 1264:    ((void) key_bitlen);
        -: 1265:
        -: 1266:    return mbedtls_des3_set3key_enc( (mbedtls_des3_context *) ctx, key );
        -: 1267:}
        -: 1268:
        -: 1269:static void * des_ctx_alloc( void )
        -: 1270:{
        -: 1271:    mbedtls_des_context *des = mbedtls_calloc( 1, sizeof( mbedtls_des_context ) );
        -: 1272:
        -: 1273:    if( des == NULL )
        -: 1274:        return( NULL );
        -: 1275:
        -: 1276:    mbedtls_des_init( des );
        -: 1277:
        -: 1278:    return( des );
        -: 1279:}
        -: 1280:
        -: 1281:static void des_ctx_free( void *ctx )
        -: 1282:{
        -: 1283:    mbedtls_des_free( (mbedtls_des_context *) ctx );
        -: 1284:    mbedtls_free( ctx );
        -: 1285:}
        -: 1286:
        -: 1287:static void * des3_ctx_alloc( void )
        -: 1288:{
        -: 1289:    mbedtls_des3_context *des3;
        -: 1290:    des3 = mbedtls_calloc( 1, sizeof( mbedtls_des3_context ) );
        -: 1291:
        -: 1292:    if( des3 == NULL )
        -: 1293:        return( NULL );
        -: 1294:
        -: 1295:    mbedtls_des3_init( des3 );
        -: 1296:
        -: 1297:    return( des3 );
        -: 1298:}
        -: 1299:
        -: 1300:static void des3_ctx_free( void *ctx )
        -: 1301:{
        -: 1302:    mbedtls_des3_free( (mbedtls_des3_context *) ctx );
        -: 1303:    mbedtls_free( ctx );
        -: 1304:}
        -: 1305:
        -: 1306:static const mbedtls_cipher_base_t des_info = {
        -: 1307:    MBEDTLS_CIPHER_ID_DES,
        -: 1308:    des_crypt_ecb_wrap,
        -: 1309:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1310:    des_crypt_cbc_wrap,
        -: 1311:#endif
        -: 1312:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -: 1313:    NULL,
        -: 1314:#endif
        -: 1315:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -: 1316:    NULL,
        -: 1317:#endif
        -: 1318:#if defined(MBEDTLS_CIPHER_MODE_STREAM)
        -: 1319:    NULL,
        -: 1320:#endif
        -: 1321:    des_setkey_enc_wrap,
        -: 1322:    des_setkey_dec_wrap,
        -: 1323:    des_ctx_alloc,
        -: 1324:    des_ctx_free
        -: 1325:};
        -: 1326:
        -: 1327:static const mbedtls_cipher_info_t des_ecb_info = {
        -: 1328:    MBEDTLS_CIPHER_DES_ECB,
        -: 1329:    MBEDTLS_MODE_ECB,
        -: 1330:    MBEDTLS_KEY_LENGTH_DES,
        -: 1331:    "DES-ECB",
        -: 1332:    8,
        -: 1333:    0,
        -: 1334:    8,
        -: 1335:    &des_info
        -: 1336:};
        -: 1337:
        -: 1338:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1339:static const mbedtls_cipher_info_t des_cbc_info = {
        -: 1340:    MBEDTLS_CIPHER_DES_CBC,
        -: 1341:    MBEDTLS_MODE_CBC,
        -: 1342:    MBEDTLS_KEY_LENGTH_DES,
        -: 1343:    "DES-CBC",
        -: 1344:    8,
        -: 1345:    0,
        -: 1346:    8,
        -: 1347:    &des_info
        -: 1348:};
        -: 1349:#endif /* MBEDTLS_CIPHER_MODE_CBC */
        -: 1350:
        -: 1351:static const mbedtls_cipher_base_t des_ede_info = {
        -: 1352:    MBEDTLS_CIPHER_ID_DES,
        -: 1353:    des3_crypt_ecb_wrap,
        -: 1354:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1355:    des3_crypt_cbc_wrap,
        -: 1356:#endif
        -: 1357:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -: 1358:    NULL,
        -: 1359:#endif
        -: 1360:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -: 1361:    NULL,
        -: 1362:#endif
        -: 1363:#if defined(MBEDTLS_CIPHER_MODE_STREAM)
        -: 1364:    NULL,
        -: 1365:#endif
        -: 1366:    des3_set2key_enc_wrap,
        -: 1367:    des3_set2key_dec_wrap,
        -: 1368:    des3_ctx_alloc,
        -: 1369:    des3_ctx_free
        -: 1370:};
        -: 1371:
        -: 1372:static const mbedtls_cipher_info_t des_ede_ecb_info = {
        -: 1373:    MBEDTLS_CIPHER_DES_EDE_ECB,
        -: 1374:    MBEDTLS_MODE_ECB,
        -: 1375:    MBEDTLS_KEY_LENGTH_DES_EDE,
        -: 1376:    "DES-EDE-ECB",
        -: 1377:    8,
        -: 1378:    0,
        -: 1379:    8,
        -: 1380:    &des_ede_info
        -: 1381:};
        -: 1382:
        -: 1383:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1384:static const mbedtls_cipher_info_t des_ede_cbc_info = {
        -: 1385:    MBEDTLS_CIPHER_DES_EDE_CBC,
        -: 1386:    MBEDTLS_MODE_CBC,
        -: 1387:    MBEDTLS_KEY_LENGTH_DES_EDE,
        -: 1388:    "DES-EDE-CBC",
        -: 1389:    8,
        -: 1390:    0,
        -: 1391:    8,
        -: 1392:    &des_ede_info
        -: 1393:};
        -: 1394:#endif /* MBEDTLS_CIPHER_MODE_CBC */
        -: 1395:
        -: 1396:static const mbedtls_cipher_base_t des_ede3_info = {
        -: 1397:    MBEDTLS_CIPHER_ID_3DES,
        -: 1398:    des3_crypt_ecb_wrap,
        -: 1399:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1400:    des3_crypt_cbc_wrap,
        -: 1401:#endif
        -: 1402:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -: 1403:    NULL,
        -: 1404:#endif
        -: 1405:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -: 1406:    NULL,
        -: 1407:#endif
        -: 1408:#if defined(MBEDTLS_CIPHER_MODE_STREAM)
        -: 1409:    NULL,
        -: 1410:#endif
        -: 1411:    des3_set3key_enc_wrap,
        -: 1412:    des3_set3key_dec_wrap,
        -: 1413:    des3_ctx_alloc,
        -: 1414:    des3_ctx_free
        -: 1415:};
        -: 1416:
        -: 1417:static const mbedtls_cipher_info_t des_ede3_ecb_info = {
        -: 1418:    MBEDTLS_CIPHER_DES_EDE3_ECB,
        -: 1419:    MBEDTLS_MODE_ECB,
        -: 1420:    MBEDTLS_KEY_LENGTH_DES_EDE3,
        -: 1421:    "DES-EDE3-ECB",
        -: 1422:    8,
        -: 1423:    0,
        -: 1424:    8,
        -: 1425:    &des_ede3_info
        -: 1426:};
        -: 1427:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1428:static const mbedtls_cipher_info_t des_ede3_cbc_info = {
        -: 1429:    MBEDTLS_CIPHER_DES_EDE3_CBC,
        -: 1430:    MBEDTLS_MODE_CBC,
        -: 1431:    MBEDTLS_KEY_LENGTH_DES_EDE3,
        -: 1432:    "DES-EDE3-CBC",
        -: 1433:    8,
        -: 1434:    0,
        -: 1435:    8,
        -: 1436:    &des_ede3_info
        -: 1437:};
        -: 1438:#endif /* MBEDTLS_CIPHER_MODE_CBC */
        -: 1439:#endif /* MBEDTLS_DES_C */
        -: 1440:
        -: 1441:#if defined(MBEDTLS_BLOWFISH_C)
        -: 1442:
        -: 1443:static int blowfish_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        -: 1444:        const unsigned char *input, unsigned char *output )
        -: 1445:{
        -: 1446:    return mbedtls_blowfish_crypt_ecb( (mbedtls_blowfish_context *) ctx, operation, input,
        -: 1447:                               output );
        -: 1448:}
        -: 1449:
        -: 1450:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1451:static int blowfish_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation,
        -: 1452:        size_t length, unsigned char *iv, const unsigned char *input,
        -: 1453:        unsigned char *output )
        -: 1454:{
        -: 1455:    return mbedtls_blowfish_crypt_cbc( (mbedtls_blowfish_context *) ctx, operation, length, iv,
        -: 1456:                               input, output );
        -: 1457:}
        -: 1458:#endif /* MBEDTLS_CIPHER_MODE_CBC */
        -: 1459:
        -: 1460:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -: 1461:static int blowfish_crypt_cfb64_wrap( void *ctx, mbedtls_operation_t operation,
        -: 1462:        size_t length, size_t *iv_off, unsigned char *iv,
        -: 1463:        const unsigned char *input, unsigned char *output )
        -: 1464:{
        -: 1465:    return mbedtls_blowfish_crypt_cfb64( (mbedtls_blowfish_context *) ctx, operation, length,
        -: 1466:                                 iv_off, iv, input, output );
        -: 1467:}
        -: 1468:#endif /* MBEDTLS_CIPHER_MODE_CFB */
        -: 1469:
        -: 1470:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -: 1471:static int blowfish_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,
        -: 1472:        unsigned char *nonce_counter, unsigned char *stream_block,
        -: 1473:        const unsigned char *input, unsigned char *output )
        -: 1474:{
        -: 1475:    return mbedtls_blowfish_crypt_ctr( (mbedtls_blowfish_context *) ctx, length, nc_off,
        -: 1476:                               nonce_counter, stream_block, input, output );
        -: 1477:}
        -: 1478:#endif /* MBEDTLS_CIPHER_MODE_CTR */
        -: 1479:
        -: 1480:static int blowfish_setkey_wrap( void *ctx, const unsigned char *key,
        -: 1481:                                 unsigned int key_bitlen )
        -: 1482:{
        -: 1483:    return mbedtls_blowfish_setkey( (mbedtls_blowfish_context *) ctx, key, key_bitlen );
        -: 1484:}
        -: 1485:
        -: 1486:static void * blowfish_ctx_alloc( void )
        -: 1487:{
        -: 1488:    mbedtls_blowfish_context *ctx;
        -: 1489:    ctx = mbedtls_calloc( 1, sizeof( mbedtls_blowfish_context ) );
        -: 1490:
        -: 1491:    if( ctx == NULL )
        -: 1492:        return( NULL );
        -: 1493:
        -: 1494:    mbedtls_blowfish_init( ctx );
        -: 1495:
        -: 1496:    return( ctx );
        -: 1497:}
        -: 1498:
        -: 1499:static void blowfish_ctx_free( void *ctx )
        -: 1500:{
        -: 1501:    mbedtls_blowfish_free( (mbedtls_blowfish_context *) ctx );
        -: 1502:    mbedtls_free( ctx );
        -: 1503:}
        -: 1504:
        -: 1505:static const mbedtls_cipher_base_t blowfish_info = {
        -: 1506:    MBEDTLS_CIPHER_ID_BLOWFISH,
        -: 1507:    blowfish_crypt_ecb_wrap,
        -: 1508:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1509:    blowfish_crypt_cbc_wrap,
        -: 1510:#endif
        -: 1511:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -: 1512:    blowfish_crypt_cfb64_wrap,
        -: 1513:#endif
        -: 1514:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -: 1515:    blowfish_crypt_ctr_wrap,
        -: 1516:#endif
        -: 1517:#if defined(MBEDTLS_CIPHER_MODE_STREAM)
        -: 1518:    NULL,
        -: 1519:#endif
        -: 1520:    blowfish_setkey_wrap,
        -: 1521:    blowfish_setkey_wrap,
        -: 1522:    blowfish_ctx_alloc,
        -: 1523:    blowfish_ctx_free
        -: 1524:};
        -: 1525:
        -: 1526:static const mbedtls_cipher_info_t blowfish_ecb_info = {
        -: 1527:    MBEDTLS_CIPHER_BLOWFISH_ECB,
        -: 1528:    MBEDTLS_MODE_ECB,
        -: 1529:    128,
        -: 1530:    "BLOWFISH-ECB",
        -: 1531:    8,
        -: 1532:    MBEDTLS_CIPHER_VARIABLE_KEY_LEN,
        -: 1533:    8,
        -: 1534:    &blowfish_info
        -: 1535:};
        -: 1536:
        -: 1537:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1538:static const mbedtls_cipher_info_t blowfish_cbc_info = {
        -: 1539:    MBEDTLS_CIPHER_BLOWFISH_CBC,
        -: 1540:    MBEDTLS_MODE_CBC,
        -: 1541:    128,
        -: 1542:    "BLOWFISH-CBC",
        -: 1543:    8,
        -: 1544:    MBEDTLS_CIPHER_VARIABLE_KEY_LEN,
        -: 1545:    8,
        -: 1546:    &blowfish_info
        -: 1547:};
        -: 1548:#endif /* MBEDTLS_CIPHER_MODE_CBC */
        -: 1549:
        -: 1550:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -: 1551:static const mbedtls_cipher_info_t blowfish_cfb64_info = {
        -: 1552:    MBEDTLS_CIPHER_BLOWFISH_CFB64,
        -: 1553:    MBEDTLS_MODE_CFB,
        -: 1554:    128,
        -: 1555:    "BLOWFISH-CFB64",
        -: 1556:    8,
        -: 1557:    MBEDTLS_CIPHER_VARIABLE_KEY_LEN,
        -: 1558:    8,
        -: 1559:    &blowfish_info
        -: 1560:};
        -: 1561:#endif /* MBEDTLS_CIPHER_MODE_CFB */
        -: 1562:
        -: 1563:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -: 1564:static const mbedtls_cipher_info_t blowfish_ctr_info = {
        -: 1565:    MBEDTLS_CIPHER_BLOWFISH_CTR,
        -: 1566:    MBEDTLS_MODE_CTR,
        -: 1567:    128,
        -: 1568:    "BLOWFISH-CTR",
        -: 1569:    8,
        -: 1570:    MBEDTLS_CIPHER_VARIABLE_KEY_LEN,
        -: 1571:    8,
        -: 1572:    &blowfish_info
        -: 1573:};
        -: 1574:#endif /* MBEDTLS_CIPHER_MODE_CTR */
        -: 1575:#endif /* MBEDTLS_BLOWFISH_C */
        -: 1576:
        -: 1577:#if defined(MBEDTLS_ARC4_C)
        -: 1578:static int arc4_crypt_stream_wrap( void *ctx, size_t length,
        -: 1579:                                   const unsigned char *input,
        -: 1580:                                   unsigned char *output )
        -: 1581:{
        -: 1582:    return( mbedtls_arc4_crypt( (mbedtls_arc4_context *) ctx, length, input, output ) );
        -: 1583:}
        -: 1584:
        -: 1585:static int arc4_setkey_wrap( void *ctx, const unsigned char *key,
        -: 1586:                             unsigned int key_bitlen )
        -: 1587:{
        -: 1588:    /* we get key_bitlen in bits, arc4 expects it in bytes */
        -: 1589:    if( key_bitlen % 8 != 0 )
        -: 1590:        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
        -: 1591:
        -: 1592:    mbedtls_arc4_setup( (mbedtls_arc4_context *) ctx, key, key_bitlen / 8 );
        -: 1593:    return( 0 );
        -: 1594:}
        -: 1595:
        -: 1596:static void * arc4_ctx_alloc( void )
        -: 1597:{
        -: 1598:    mbedtls_arc4_context *ctx;
        -: 1599:    ctx = mbedtls_calloc( 1, sizeof( mbedtls_arc4_context ) );
        -: 1600:
        -: 1601:    if( ctx == NULL )
        -: 1602:        return( NULL );
        -: 1603:
        -: 1604:    mbedtls_arc4_init( ctx );
        -: 1605:
        -: 1606:    return( ctx );
        -: 1607:}
        -: 1608:
        -: 1609:static void arc4_ctx_free( void *ctx )
        -: 1610:{
        -: 1611:    mbedtls_arc4_free( (mbedtls_arc4_context *) ctx );
        -: 1612:    mbedtls_free( ctx );
        -: 1613:}
        -: 1614:
        -: 1615:static const mbedtls_cipher_base_t arc4_base_info = {
        -: 1616:    MBEDTLS_CIPHER_ID_ARC4,
        -: 1617:    NULL,
        -: 1618:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1619:    NULL,
        -: 1620:#endif
        -: 1621:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -: 1622:    NULL,
        -: 1623:#endif
        -: 1624:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -: 1625:    NULL,
        -: 1626:#endif
        -: 1627:#if defined(MBEDTLS_CIPHER_MODE_STREAM)
        -: 1628:    arc4_crypt_stream_wrap,
        -: 1629:#endif
        -: 1630:    arc4_setkey_wrap,
        -: 1631:    arc4_setkey_wrap,
        -: 1632:    arc4_ctx_alloc,
        -: 1633:    arc4_ctx_free
        -: 1634:};
        -: 1635:
        -: 1636:static const mbedtls_cipher_info_t arc4_128_info = {
        -: 1637:    MBEDTLS_CIPHER_ARC4_128,
        -: 1638:    MBEDTLS_MODE_STREAM,
        -: 1639:    128,
        -: 1640:    "ARC4-128",
        -: 1641:    0,
        -: 1642:    0,
        -: 1643:    1,
        -: 1644:    &arc4_base_info
        -: 1645:};
        -: 1646:#endif /* MBEDTLS_ARC4_C */
        -: 1647:
        -: 1648:#if defined(MBEDTLS_CIPHER_NULL_CIPHER)
        -: 1649:static int null_crypt_stream( void *ctx, size_t length,
        -: 1650:                              const unsigned char *input,
        -: 1651:                              unsigned char *output )
        -: 1652:{
        -: 1653:    ((void) ctx);
        -: 1654:    memmove( output, input, length );
        -: 1655:    return( 0 );
        -: 1656:}
        -: 1657:
        -: 1658:static int null_setkey( void *ctx, const unsigned char *key,
        -: 1659:                        unsigned int key_bitlen )
        -: 1660:{
        -: 1661:    ((void) ctx);
        -: 1662:    ((void) key);
        -: 1663:    ((void) key_bitlen);
        -: 1664:
        -: 1665:    return( 0 );
        -: 1666:}
        -: 1667:
        -: 1668:static void * null_ctx_alloc( void )
        -: 1669:{
        -: 1670:    return( (void *) 1 );
        -: 1671:}
        -: 1672:
        -: 1673:static void null_ctx_free( void *ctx )
        -: 1674:{
        -: 1675:    ((void) ctx);
        -: 1676:}
        -: 1677:
        -: 1678:static const mbedtls_cipher_base_t null_base_info = {
        -: 1679:    MBEDTLS_CIPHER_ID_NULL,
        -: 1680:    NULL,
        -: 1681:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1682:    NULL,
        -: 1683:#endif
        -: 1684:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -: 1685:    NULL,
        -: 1686:#endif
        -: 1687:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -: 1688:    NULL,
        -: 1689:#endif
        -: 1690:#if defined(MBEDTLS_CIPHER_MODE_STREAM)
        -: 1691:    null_crypt_stream,
        -: 1692:#endif
        -: 1693:    null_setkey,
        -: 1694:    null_setkey,
        -: 1695:    null_ctx_alloc,
        -: 1696:    null_ctx_free
        -: 1697:};
        -: 1698:
        -: 1699:static const mbedtls_cipher_info_t null_cipher_info = {
        -: 1700:    MBEDTLS_CIPHER_NULL,
        -: 1701:    MBEDTLS_MODE_STREAM,
        -: 1702:    0,
        -: 1703:    "NULL",
        -: 1704:    0,
        -: 1705:    0,
        -: 1706:    1,
        -: 1707:    &null_base_info
        -: 1708:};
        -: 1709:#endif /* defined(MBEDTLS_CIPHER_NULL_CIPHER) */
        -: 1710:
        -: 1711:const mbedtls_cipher_definition_t mbedtls_cipher_definitions[] =
        -: 1712:{
        -: 1713:#if defined(MBEDTLS_AES_C)
        -: 1714:    { MBEDTLS_CIPHER_AES_128_ECB,          &aes_128_ecb_info },
        -: 1715:    { MBEDTLS_CIPHER_AES_192_ECB,          &aes_192_ecb_info },
        -: 1716:    { MBEDTLS_CIPHER_AES_256_ECB,          &aes_256_ecb_info },
        -: 1717:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1718:    { MBEDTLS_CIPHER_AES_128_CBC,          &aes_128_cbc_info },
        -: 1719:    { MBEDTLS_CIPHER_AES_192_CBC,          &aes_192_cbc_info },
        -: 1720:    { MBEDTLS_CIPHER_AES_256_CBC,          &aes_256_cbc_info },
        -: 1721:#endif
        -: 1722:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -: 1723:    { MBEDTLS_CIPHER_AES_128_CFB128,       &aes_128_cfb128_info },
        -: 1724:    { MBEDTLS_CIPHER_AES_192_CFB128,       &aes_192_cfb128_info },
        -: 1725:    { MBEDTLS_CIPHER_AES_256_CFB128,       &aes_256_cfb128_info },
        -: 1726:#endif
        -: 1727:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -: 1728:    { MBEDTLS_CIPHER_AES_128_CTR,          &aes_128_ctr_info },
        -: 1729:    { MBEDTLS_CIPHER_AES_192_CTR,          &aes_192_ctr_info },
        -: 1730:    { MBEDTLS_CIPHER_AES_256_CTR,          &aes_256_ctr_info },
        -: 1731:#endif
        -: 1732:#if defined(MBEDTLS_GCM_C)
        -: 1733:    { MBEDTLS_CIPHER_AES_128_GCM,          &aes_128_gcm_info },
        -: 1734:    { MBEDTLS_CIPHER_AES_192_GCM,          &aes_192_gcm_info },
        -: 1735:    { MBEDTLS_CIPHER_AES_256_GCM,          &aes_256_gcm_info },
        -: 1736:#endif
        -: 1737:#if defined(MBEDTLS_CCM_C)
        -: 1738:    { MBEDTLS_CIPHER_AES_128_CCM,          &aes_128_ccm_info },
        -: 1739:    { MBEDTLS_CIPHER_AES_192_CCM,          &aes_192_ccm_info },
        -: 1740:    { MBEDTLS_CIPHER_AES_256_CCM,          &aes_256_ccm_info },
        -: 1741:#endif
        -: 1742:#endif /* MBEDTLS_AES_C */
        -: 1743:
        -: 1744:#if defined(MBEDTLS_ARC4_C)
        -: 1745:    { MBEDTLS_CIPHER_ARC4_128,             &arc4_128_info },
        -: 1746:#endif
        -: 1747:
        -: 1748:#if defined(MBEDTLS_BLOWFISH_C)
        -: 1749:    { MBEDTLS_CIPHER_BLOWFISH_ECB,         &blowfish_ecb_info },
        -: 1750:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1751:    { MBEDTLS_CIPHER_BLOWFISH_CBC,         &blowfish_cbc_info },
        -: 1752:#endif
        -: 1753:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -: 1754:    { MBEDTLS_CIPHER_BLOWFISH_CFB64,       &blowfish_cfb64_info },
        -: 1755:#endif
        -: 1756:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -: 1757:    { MBEDTLS_CIPHER_BLOWFISH_CTR,         &blowfish_ctr_info },
        -: 1758:#endif
        -: 1759:#endif /* MBEDTLS_BLOWFISH_C */
        -: 1760:
        -: 1761:#if defined(MBEDTLS_CAMELLIA_C)
        -: 1762:    { MBEDTLS_CIPHER_CAMELLIA_128_ECB,     &camellia_128_ecb_info },
        -: 1763:    { MBEDTLS_CIPHER_CAMELLIA_192_ECB,     &camellia_192_ecb_info },
        -: 1764:    { MBEDTLS_CIPHER_CAMELLIA_256_ECB,     &camellia_256_ecb_info },
        -: 1765:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1766:    { MBEDTLS_CIPHER_CAMELLIA_128_CBC,     &camellia_128_cbc_info },
        -: 1767:    { MBEDTLS_CIPHER_CAMELLIA_192_CBC,     &camellia_192_cbc_info },
        -: 1768:    { MBEDTLS_CIPHER_CAMELLIA_256_CBC,     &camellia_256_cbc_info },
        -: 1769:#endif
        -: 1770:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -: 1771:    { MBEDTLS_CIPHER_CAMELLIA_128_CFB128,  &camellia_128_cfb128_info },
        -: 1772:    { MBEDTLS_CIPHER_CAMELLIA_192_CFB128,  &camellia_192_cfb128_info },
        -: 1773:    { MBEDTLS_CIPHER_CAMELLIA_256_CFB128,  &camellia_256_cfb128_info },
        -: 1774:#endif
        -: 1775:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -: 1776:    { MBEDTLS_CIPHER_CAMELLIA_128_CTR,     &camellia_128_ctr_info },
        -: 1777:    { MBEDTLS_CIPHER_CAMELLIA_192_CTR,     &camellia_192_ctr_info },
        -: 1778:    { MBEDTLS_CIPHER_CAMELLIA_256_CTR,     &camellia_256_ctr_info },
        -: 1779:#endif
        -: 1780:#if defined(MBEDTLS_GCM_C)
        -: 1781:    { MBEDTLS_CIPHER_CAMELLIA_128_GCM,     &camellia_128_gcm_info },
        -: 1782:    { MBEDTLS_CIPHER_CAMELLIA_192_GCM,     &camellia_192_gcm_info },
        -: 1783:    { MBEDTLS_CIPHER_CAMELLIA_256_GCM,     &camellia_256_gcm_info },
        -: 1784:#endif
        -: 1785:#if defined(MBEDTLS_CCM_C)
        -: 1786:    { MBEDTLS_CIPHER_CAMELLIA_128_CCM,     &camellia_128_ccm_info },
        -: 1787:    { MBEDTLS_CIPHER_CAMELLIA_192_CCM,     &camellia_192_ccm_info },
        -: 1788:    { MBEDTLS_CIPHER_CAMELLIA_256_CCM,     &camellia_256_ccm_info },
        -: 1789:#endif
        -: 1790:#endif /* MBEDTLS_CAMELLIA_C */
        -: 1791:
        -: 1792:#if defined(MBEDTLS_ARIA_C)
        -: 1793:    { MBEDTLS_CIPHER_ARIA_128_ECB,     &aria_128_ecb_info },
        -: 1794:    { MBEDTLS_CIPHER_ARIA_192_ECB,     &aria_192_ecb_info },
        -: 1795:    { MBEDTLS_CIPHER_ARIA_256_ECB,     &aria_256_ecb_info },
        -: 1796:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1797:    { MBEDTLS_CIPHER_ARIA_128_CBC,     &aria_128_cbc_info },
        -: 1798:    { MBEDTLS_CIPHER_ARIA_192_CBC,     &aria_192_cbc_info },
        -: 1799:    { MBEDTLS_CIPHER_ARIA_256_CBC,     &aria_256_cbc_info },
        -: 1800:#endif
        -: 1801:#if defined(MBEDTLS_CIPHER_MODE_CFB)
        -: 1802:    { MBEDTLS_CIPHER_ARIA_128_CFB128,  &aria_128_cfb128_info },
        -: 1803:    { MBEDTLS_CIPHER_ARIA_192_CFB128,  &aria_192_cfb128_info },
        -: 1804:    { MBEDTLS_CIPHER_ARIA_256_CFB128,  &aria_256_cfb128_info },
        -: 1805:#endif
        -: 1806:#if defined(MBEDTLS_CIPHER_MODE_CTR)
        -: 1807:    { MBEDTLS_CIPHER_ARIA_128_CTR,     &aria_128_ctr_info },
        -: 1808:    { MBEDTLS_CIPHER_ARIA_192_CTR,     &aria_192_ctr_info },
        -: 1809:    { MBEDTLS_CIPHER_ARIA_256_CTR,     &aria_256_ctr_info },
        -: 1810:#endif
        -: 1811:#if defined(MBEDTLS_GCM_C)
        -: 1812:    { MBEDTLS_CIPHER_ARIA_128_GCM,     &aria_128_gcm_info },
        -: 1813:    { MBEDTLS_CIPHER_ARIA_192_GCM,     &aria_192_gcm_info },
        -: 1814:    { MBEDTLS_CIPHER_ARIA_256_GCM,     &aria_256_gcm_info },
        -: 1815:#endif
        -: 1816:#if defined(MBEDTLS_CCM_C)
        -: 1817:    { MBEDTLS_CIPHER_ARIA_128_CCM,     &aria_128_ccm_info },
        -: 1818:    { MBEDTLS_CIPHER_ARIA_192_CCM,     &aria_192_ccm_info },
        -: 1819:    { MBEDTLS_CIPHER_ARIA_256_CCM,     &aria_256_ccm_info },
        -: 1820:#endif
        -: 1821:#endif /* MBEDTLS_ARIA_C */
        -: 1822:
        -: 1823:#if defined(MBEDTLS_DES_C)
        -: 1824:    { MBEDTLS_CIPHER_DES_ECB,              &des_ecb_info },
        -: 1825:    { MBEDTLS_CIPHER_DES_EDE_ECB,          &des_ede_ecb_info },
        -: 1826:    { MBEDTLS_CIPHER_DES_EDE3_ECB,         &des_ede3_ecb_info },
        -: 1827:#if defined(MBEDTLS_CIPHER_MODE_CBC)
        -: 1828:    { MBEDTLS_CIPHER_DES_CBC,              &des_cbc_info },
        -: 1829:    { MBEDTLS_CIPHER_DES_EDE_CBC,          &des_ede_cbc_info },
        -: 1830:    { MBEDTLS_CIPHER_DES_EDE3_CBC,         &des_ede3_cbc_info },
        -: 1831:#endif
        -: 1832:#endif /* MBEDTLS_DES_C */
        -: 1833:
        -: 1834:#if defined(MBEDTLS_CIPHER_NULL_CIPHER)
        -: 1835:    { MBEDTLS_CIPHER_NULL,                 &null_cipher_info },
        -: 1836:#endif /* MBEDTLS_CIPHER_NULL_CIPHER */
        -: 1837:
        -: 1838:    { MBEDTLS_CIPHER_NONE, NULL }
        -: 1839:};
        -: 1840:
        -: 1841:#define NUM_CIPHERS sizeof mbedtls_cipher_definitions / sizeof mbedtls_cipher_definitions[0]
        -: 1842:int mbedtls_cipher_supported[NUM_CIPHERS];
        -: 1843:
        -: 1844:#endif /* MBEDTLS_CIPHER_C */
