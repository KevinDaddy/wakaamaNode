        -:    0:Source:/home/david/Programming/wakaamaNode/src/wakaama/discover.c
        -:    0:Graph:/home/david/Programming/wakaamaNode/b/CMakeFiles/TestsWithPosix.dir/home/david/Programming/wakaamaNode/src/wakaama/discover.c.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*******************************************************************************
        -:    2:*
        -:    3:* Copyright (c) 2015 Intel Corporation and others.
        -:    4:* All rights reserved. This program and the accompanying materials
        -:    5:* are made available under the terms of the Eclipse Public License v1.0
        -:    6:* and Eclipse Distribution License v1.0 which accompany this distribution.
        -:    7:*
        -:    8:* The Eclipse Public License is available at
        -:    9:*    http://www.eclipse.org/legal/epl-v10.html
        -:   10:* The Eclipse Distribution License is available at
        -:   11:*    http://www.eclipse.org/org/documents/edl-v10.php.
        -:   12:*
        -:   13:* Contributors:
        -:   14:*    David Navarro, Intel Corporation - initial API and implementation
        -:   15:*
        -:   16:*******************************************************************************/
        -:   17:
        -:   18:
        -:   19:#include "internals.h"
        -:   20:
        -:   21:#define PRV_LINK_BUFFER_SIZE  1024
        -:   22:
        -:   23:
        -:   24:#define PRV_CONCAT_STR(buf, len, index, str, str_len)    \
        -:   25:    {                                                    \
        -:   26:        if ((len)-(index) < (str_len)) return -1;        \
        -:   27:        memcpy((buf)+(index), (str), (str_len));         \
        -:   28:        (index) += (str_len);                            \
        -:   29:    }
        -:   30:
        -:   31:
        -:   32:#ifdef LWM2M_CLIENT_MODE
        -:   33:
    #####:   34:static lwm2m_attributes_t * prv_findAttributes(lwm2m_context_t * contextP,
        -:   35:                                               lwm2m_uri_t * uriP,
        -:   36:                                               lwm2m_server_t * serverP)
        -:   37:{
        -:   38:    lwm2m_observed_t * observedP;
        -:   39:    lwm2m_watcher_t * watcherP;
        -:   40:    lwm2m_attributes_t * paramP;
        -:   41:
    #####:   42:    paramP = NULL;
        -:   43:
    #####:   44:    if (contextP == NULL) return NULL;
    #####:   45:    if (serverP == NULL) return NULL;
        -:   46:
    #####:   47:    observedP = observe_findByUri(contextP, uriP);
    #####:   48:    if (observedP == NULL || observedP->watcherList == NULL) return NULL;
        -:   49:
    #####:   50:    for (watcherP = observedP->watcherList; watcherP != NULL; watcherP = watcherP->next)
        -:   51:    {
    #####:   52:        if (watcherP->server == serverP)
        -:   53:        {
    #####:   54:            paramP = watcherP->parameters;
        -:   55:        }
        -:   56:    }
        -:   57:
    #####:   58:    return paramP;
        -:   59:}
        -:   60:
    #####:   61:static int prv_serializeAttributes(lwm2m_context_t * contextP,
        -:   62:                                   lwm2m_uri_t * uriP,
        -:   63:                                   lwm2m_server_t * serverP,
        -:   64:                                   lwm2m_attributes_t * objectParamP,
        -:   65:                                   uint8_t * buffer,
        -:   66:                                   size_t uriLen,
        -:   67:                                   size_t bufferLen)
        -:   68:{
        -:   69:    int head;
        -:   70:    int res;
        -:   71:    lwm2m_attributes_t * paramP;
        -:   72:
    #####:   73:    head = 0;
        -:   74:
    #####:   75:    paramP = prv_findAttributes(contextP, uriP, serverP);
    #####:   76:    if (paramP == NULL) paramP = objectParamP;
        -:   77:
    #####:   78:    if (paramP != NULL)
        -:   79:    {
    #####:   80:        head = uriLen;
        -:   81:
    #####:   82:        if (paramP->toSet & LWM2M_ATTR_FLAG_MIN_PERIOD)
        -:   83:        {
    #####:   84:            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
    #####:   85:            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_MIN_PERIOD_STR, ATTR_MIN_PERIOD_LEN);
        -:   86:
    #####:   87:            res = utils_intToText(paramP->minPeriod, buffer + head, bufferLen - head);
    #####:   88:            if (res <= 0) return -1;
    #####:   89:            head += res;
        -:   90:        }
    #####:   91:        else if (objectParamP->toSet & LWM2M_ATTR_FLAG_MIN_PERIOD)
        -:   92:        {
    #####:   93:            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
    #####:   94:            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_MIN_PERIOD_STR, ATTR_MIN_PERIOD_LEN);
        -:   95:
    #####:   96:            res = utils_intToText(objectParamP->minPeriod, buffer + head, bufferLen - head);
    #####:   97:            if (res <= 0) return -1;
    #####:   98:            head += res;
        -:   99:        }
        -:  100:
    #####:  101:        if (paramP->toSet & LWM2M_ATTR_FLAG_MAX_PERIOD)
        -:  102:        {
    #####:  103:            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
    #####:  104:            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_MAX_PERIOD_STR, ATTR_MAX_PERIOD_LEN);
        -:  105:
    #####:  106:            res = utils_intToText(paramP->maxPeriod, buffer + head, bufferLen - head);
    #####:  107:            if (res <= 0) return -1;
    #####:  108:            head += res;
        -:  109:        }
    #####:  110:        else if (objectParamP->toSet & LWM2M_ATTR_FLAG_MAX_PERIOD)
        -:  111:        {
    #####:  112:            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
    #####:  113:            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_MAX_PERIOD_STR, ATTR_MAX_PERIOD_LEN);
        -:  114:
    #####:  115:            res = utils_intToText(objectParamP->maxPeriod, buffer + head, bufferLen - head);
    #####:  116:            if (res <= 0) return -1;
    #####:  117:            head += res;
        -:  118:        }
        -:  119:
    #####:  120:        if (paramP->toSet & LWM2M_ATTR_FLAG_GREATER_THAN)
        -:  121:        {
    #####:  122:            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
    #####:  123:            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_GREATER_THAN_STR, ATTR_GREATER_THAN_LEN);
        -:  124:
    #####:  125:            res = utils_floatToText(paramP->greaterThan, buffer + head, bufferLen - head);
    #####:  126:            if (res <= 0) return -1;
    #####:  127:            head += res;
        -:  128:        }
    #####:  129:        if (paramP->toSet & LWM2M_ATTR_FLAG_LESS_THAN)
        -:  130:        {
    #####:  131:            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
    #####:  132:            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_LESS_THAN_STR, ATTR_LESS_THAN_LEN);
        -:  133:
    #####:  134:            res = utils_floatToText(paramP->lessThan, buffer + head, bufferLen - head);
    #####:  135:            if (res <= 0) return -1;
    #####:  136:            head += res;
        -:  137:        }
    #####:  138:        if (paramP->toSet & LWM2M_ATTR_FLAG_STEP)
        -:  139:        {
    #####:  140:            PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ATTR_SEPARATOR, LINK_ATTR_SEPARATOR_SIZE);
    #####:  141:            PRV_CONCAT_STR(buffer, bufferLen, head, ATTR_STEP_STR, ATTR_STEP_LEN);
        -:  142:
    #####:  143:            res = utils_floatToText(paramP->step, buffer + head, bufferLen - head);
    #####:  144:            if (res <= 0) return -1;
    #####:  145:            head += res;
        -:  146:        }
    #####:  147:        PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ITEM_ATTR_END, LINK_ITEM_ATTR_END_SIZE);
        -:  148:    }
        -:  149:
    #####:  150:    if (head > 0) head -= uriLen + 1;
        -:  151:
    #####:  152:    return head;
        -:  153:}
        -:  154:
    #####:  155:static int prv_serializeLinkData(lwm2m_context_t * contextP,
        -:  156:                                 lwm2m_data_t * tlvP,
        -:  157:                                 lwm2m_server_t * serverP,
        -:  158:                                 lwm2m_attributes_t * objectParamP,
        -:  159:                                 lwm2m_uri_t * parentUriP,
        -:  160:                                 uint8_t * parentUriStr,
        -:  161:                                 size_t parentUriLen,
        -:  162:                                 uint8_t * buffer,
        -:  163:                                 size_t bufferLen)
        -:  164:{
        -:  165:    int head;
        -:  166:    int res;
        -:  167:    lwm2m_uri_t uri;
        -:  168:
    #####:  169:    head = 0;
        -:  170:
    #####:  171:    switch (tlvP->type)
        -:  172:    {
    #####:  173:    case LWM2M_TYPE_UNDEFINED:
        -:  174:    case LWM2M_TYPE_STRING:
        -:  175:    case LWM2M_TYPE_OPAQUE:
        -:  176:    case LWM2M_TYPE_INTEGER:
        -:  177:    case LWM2M_TYPE_FLOAT:
        -:  178:    case LWM2M_TYPE_BOOLEAN:
        -:  179:    case LWM2M_TYPE_OBJECT_LINK:
        -:  180:    case LWM2M_TYPE_MULTIPLE_RESOURCE:
    #####:  181:        if (bufferLen < LINK_ITEM_START_SIZE) return -1;
    #####:  182:        memcpy(buffer + head, LINK_ITEM_START, LINK_ITEM_START_SIZE);
    #####:  183:        head = LINK_ITEM_START_SIZE;
        -:  184:
    #####:  185:        if (parentUriLen > 0)
        -:  186:        {
    #####:  187:            if (bufferLen - head < parentUriLen) return -1;
    #####:  188:            memcpy(buffer + head, parentUriStr, parentUriLen);
    #####:  189:            head += parentUriLen;
        -:  190:        }
        -:  191:
    #####:  192:        if (bufferLen - head < LINK_URI_SEPARATOR_SIZE) return -1;
    #####:  193:        memcpy(buffer + head, LINK_URI_SEPARATOR, LINK_URI_SEPARATOR_SIZE);
    #####:  194:        head += LINK_URI_SEPARATOR_SIZE;
        -:  195:
    #####:  196:        res = utils_intToText(tlvP->id, buffer + head, bufferLen - head);
    #####:  197:        if (res <= 0) return -1;
    #####:  198:        head += res;
        -:  199:
    #####:  200:        if (tlvP->type == LWM2M_TYPE_MULTIPLE_RESOURCE)
        -:  201:        {
    #####:  202:            if (bufferLen - head < LINK_ITEM_DIM_START_SIZE) return -1;
    #####:  203:            memcpy(buffer + head, LINK_ITEM_DIM_START, LINK_ITEM_DIM_START_SIZE);
    #####:  204:            head += LINK_ITEM_DIM_START_SIZE;
        -:  205:
    #####:  206:            res = utils_intToText(tlvP->value.asChildren.count, buffer + head, bufferLen - head);
    #####:  207:            if (res <= 0) return -1;
    #####:  208:            head += res;
        -:  209:
    #####:  210:            if (bufferLen - head < LINK_ITEM_ATTR_END_SIZE) return -1;
    #####:  211:            memcpy(buffer + head, LINK_ITEM_ATTR_END, LINK_ITEM_ATTR_END_SIZE);
    #####:  212:            head += LINK_ITEM_ATTR_END_SIZE;
        -:  213:        }
        -:  214:        else
        -:  215:        {
    #####:  216:            if (bufferLen - head < LINK_ITEM_END_SIZE) return -1;
    #####:  217:            memcpy(buffer + head, LINK_ITEM_END, LINK_ITEM_END_SIZE);
    #####:  218:            head += LINK_ITEM_END_SIZE;
        -:  219:        }
        -:  220:
    #####:  221:        if (serverP != NULL)
        -:  222:        {
    #####:  223:            memcpy(&uri, parentUriP, sizeof(lwm2m_uri_t));
    #####:  224:            uri.resourceId = tlvP->id;
    #####:  225:            uri.flag |= LWM2M_URI_FLAG_RESOURCE_ID;
    #####:  226:            res = prv_serializeAttributes(contextP, &uri, serverP, objectParamP, buffer, head - 1, bufferLen);
    #####:  227:            if (res < 0) return -1;    // careful, 0 is valid
    #####:  228:            if (res > 0) head += res;
        -:  229:        }
    #####:  230:        break;
        -:  231:
    #####:  232:    case LWM2M_TYPE_OBJECT_INSTANCE:
        -:  233:    {
        -:  234:        uint8_t uriStr[URI_MAX_STRING_LEN];
        -:  235:        size_t uriLen;
        -:  236:        size_t index;
        -:  237:
    #####:  238:        if (parentUriLen > 0)
        -:  239:        {
    #####:  240:            if (URI_MAX_STRING_LEN < parentUriLen) return -1;
    #####:  241:            memcpy(uriStr, parentUriStr, parentUriLen);
    #####:  242:            uriLen = parentUriLen;
        -:  243:        }
        -:  244:        else
        -:  245:        {
    #####:  246:            uriLen = 0;
        -:  247:        }
        -:  248:
    #####:  249:        if (URI_MAX_STRING_LEN - uriLen < LINK_URI_SEPARATOR_SIZE) return -1;
    #####:  250:        memcpy(uriStr + uriLen, LINK_URI_SEPARATOR, LINK_URI_SEPARATOR_SIZE);
    #####:  251:        uriLen += LINK_URI_SEPARATOR_SIZE;
        -:  252:
    #####:  253:        res = utils_intToText(tlvP->id, uriStr + uriLen, URI_MAX_STRING_LEN - uriLen);
    #####:  254:        if (res <= 0) return -1;
    #####:  255:        uriLen += res;
        -:  256:
    #####:  257:        memcpy(&uri, parentUriP, sizeof(lwm2m_uri_t));
    #####:  258:        uri.instanceId = tlvP->id;
    #####:  259:        uri.flag |= LWM2M_URI_FLAG_INSTANCE_ID;
        -:  260:
    #####:  261:        head = 0;
    #####:  262:        PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ITEM_START, LINK_ITEM_START_SIZE);
    #####:  263:        PRV_CONCAT_STR(buffer, bufferLen, head, uriStr, uriLen);
    #####:  264:        PRV_CONCAT_STR(buffer, bufferLen, head, LINK_ITEM_END, LINK_ITEM_END_SIZE);
    #####:  265:        if (serverP != NULL)
        -:  266:        {
    #####:  267:            res = prv_serializeAttributes(contextP, &uri, serverP, NULL, buffer, head - 1, bufferLen);
    #####:  268:            if (res < 0) return -1;    // careful, 0 is valid
    #####:  269:            if (res == 0) head = 0;    // rewind
    #####:  270:            else head += res;
        -:  271:        }
    #####:  272:        for (index = 0; index < tlvP->value.asChildren.count; index++)
        -:  273:        {
    #####:  274:            res = prv_serializeLinkData(contextP, tlvP->value.asChildren.array + index, serverP, objectParamP, &uri, uriStr, uriLen, buffer + head, bufferLen - head);
    #####:  275:            if (res < 0) return -1;
    #####:  276:            head += res;
        -:  277:        }
        -:  278:    }
    #####:  279:    break;
        -:  280:
    #####:  281:    case LWM2M_TYPE_OBJECT:
        -:  282:    default:
    #####:  283:        return -1;
        -:  284:    }
        -:  285:
    #####:  286:    return head;
        -:  287:}
        -:  288:
    #####:  289:int discover_serialize(lwm2m_context_t * contextP,
        -:  290:                       lwm2m_uri_t * uriP,
        -:  291:                       lwm2m_server_t * serverP,
        -:  292:                       int size,
        -:  293:                       lwm2m_data_t * dataP,
        -:  294:                       uint8_t ** bufferP)
        -:  295:{
        -:  296:    uint8_t bufferLink[PRV_LINK_BUFFER_SIZE];
        -:  297:    uint8_t baseUriStr[URI_MAX_STRING_LEN];
        -:  298:    int baseUriLen;
        -:  299:    int index;
        -:  300:    size_t head;
        -:  301:    int res;
        -:  302:    lwm2m_uri_t parentUri;
        -:  303:    lwm2m_attributes_t * paramP;
        -:  304:    lwm2m_attributes_t mergedParam;
        -:  305:
        -:  306:    LOG_ARG("size: %d", size);
        -:  307:    LOG_URI(uriP);
        -:  308:
    #####:  309:    head = 0;
    #####:  310:    memset(&parentUri, 0, sizeof(lwm2m_uri_t));
    #####:  311:    parentUri.objectId = uriP->objectId;
    #####:  312:    parentUri.flag = LWM2M_URI_FLAG_OBJECT_ID;
        -:  313:
    #####:  314:    if (LWM2M_URI_IS_SET_RESOURCE(uriP))
        -:  315:    {
        -:  316:        lwm2m_uri_t tempUri;
        -:  317:        lwm2m_attributes_t * objParamP;
        -:  318:        lwm2m_attributes_t * instParamP;
        -:  319:
    #####:  320:        memset(&parentUri, 0, sizeof(lwm2m_uri_t));
    #####:  321:        tempUri.objectId = uriP->objectId;
    #####:  322:        tempUri.flag = LWM2M_URI_FLAG_OBJECT_ID;
        -:  323:
        -:  324:        // get object level attributes
    #####:  325:        objParamP = prv_findAttributes(contextP, &tempUri, serverP);
        -:  326:        
        -:  327:        // get object instance level attributes
    #####:  328:        tempUri.instanceId = uriP->instanceId;
    #####:  329:        tempUri.flag = LWM2M_URI_FLAG_INSTANCE_ID;
    #####:  330:        instParamP = prv_findAttributes(contextP, &tempUri, serverP);
        -:  331:
    #####:  332:        if (objParamP != NULL)
        -:  333:        {
    #####:  334:            if (instParamP != NULL)
        -:  335:            {
    #####:  336:                memset(&mergedParam, 0, sizeof(lwm2m_attributes_t));
    #####:  337:                mergedParam.toSet = objParamP->toSet | instParamP->toSet;
    #####:  338:                if (mergedParam.toSet & LWM2M_ATTR_FLAG_MIN_PERIOD)
        -:  339:                {
    #####:  340:                    if (instParamP->toSet & LWM2M_ATTR_FLAG_MIN_PERIOD)
        -:  341:                    {
    #####:  342:                        mergedParam.minPeriod = instParamP->minPeriod;
        -:  343:                    }
        -:  344:                    else
        -:  345:                    {
    #####:  346:                        mergedParam.minPeriod = objParamP->minPeriod;
        -:  347:                    }
        -:  348:                }
    #####:  349:                if (mergedParam.toSet & LWM2M_ATTR_FLAG_MAX_PERIOD)
        -:  350:                {
    #####:  351:                    if (instParamP->toSet & LWM2M_ATTR_FLAG_MAX_PERIOD)
        -:  352:                    {
    #####:  353:                        mergedParam.maxPeriod = instParamP->maxPeriod;
        -:  354:                    }
        -:  355:                    else
        -:  356:                    {
    #####:  357:                        mergedParam.maxPeriod = objParamP->maxPeriod;
        -:  358:                    }
        -:  359:                }
    #####:  360:                paramP = &mergedParam;
        -:  361:            }
        -:  362:            else
        -:  363:            {
    #####:  364:                paramP = objParamP;
        -:  365:            }
        -:  366:        }
        -:  367:        else
        -:  368:        {
    #####:  369:            paramP = instParamP;
        -:  370:        }
    #####:  371:        uriP->flag &= ~LWM2M_URI_FLAG_RESOURCE_ID;
        -:  372:    }
        -:  373:    else
        -:  374:    {
    #####:  375:        paramP = NULL;
        -:  376:
    #####:  377:        if (LWM2M_URI_IS_SET_INSTANCE(uriP))
        -:  378:        {
    #####:  379:            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_ITEM_START, LINK_ITEM_START_SIZE);
    #####:  380:            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_URI_SEPARATOR, LINK_URI_SEPARATOR_SIZE);
    #####:  381:            res = utils_intToText(uriP->objectId, bufferLink + head, PRV_LINK_BUFFER_SIZE - head);
    #####:  382:            if (res <= 0) return -1;
    #####:  383:            head += res;
    #####:  384:            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_URI_SEPARATOR, LINK_URI_SEPARATOR_SIZE);
    #####:  385:            res = utils_intToText(uriP->instanceId, bufferLink + head, PRV_LINK_BUFFER_SIZE - head);
    #####:  386:            if (res <= 0) return -1;
    #####:  387:            head += res;
    #####:  388:            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_ITEM_END, LINK_ITEM_END_SIZE);
    #####:  389:            parentUri.instanceId = uriP->instanceId;
    #####:  390:            parentUri.flag = LWM2M_URI_FLAG_INSTANCE_ID;
    #####:  391:            if (serverP != NULL)
        -:  392:            {
    #####:  393:                res = prv_serializeAttributes(contextP, &parentUri, serverP, NULL, bufferLink, head - 1, PRV_LINK_BUFFER_SIZE);
    #####:  394:                if (res < 0) return -1;    // careful, 0 is valid
        -:  395:            }
        -:  396:            else
        -:  397:            {
    #####:  398:                res = 0;
        -:  399:            }
    #####:  400:            head += res;
        -:  401:        }
        -:  402:        else
        -:  403:        {
    #####:  404:            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_ITEM_START, LINK_ITEM_START_SIZE);
    #####:  405:            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_URI_SEPARATOR, LINK_URI_SEPARATOR_SIZE);
    #####:  406:            res = utils_intToText(uriP->objectId, bufferLink + head, PRV_LINK_BUFFER_SIZE - head);
    #####:  407:            if (res <= 0) return -1;
    #####:  408:            head += res;
    #####:  409:            PRV_CONCAT_STR(bufferLink, PRV_LINK_BUFFER_SIZE, head, LINK_ITEM_END, LINK_ITEM_END_SIZE);
        -:  410:
    #####:  411:            if (serverP != NULL)
        -:  412:            {
    #####:  413:                res = prv_serializeAttributes(contextP, &parentUri, serverP, NULL, bufferLink, head - 1, PRV_LINK_BUFFER_SIZE);
    #####:  414:                if (res < 0) return -1;    // careful, 0 is valid
    #####:  415:                head += res;
        -:  416:            }
        -:  417:        }
        -:  418:    }
        -:  419:
    #####:  420:    baseUriLen = uri_toString(uriP, baseUriStr, URI_MAX_STRING_LEN, NULL);
    #####:  421:    if (baseUriLen < 0) return -1;
    #####:  422:    baseUriLen -= 1;
        -:  423:
    #####:  424:    for (index = 0; index < size && head < PRV_LINK_BUFFER_SIZE; index++)
        -:  425:    {
    #####:  426:        res = prv_serializeLinkData(contextP, dataP + index, serverP, paramP, uriP, baseUriStr, baseUriLen, bufferLink + head, PRV_LINK_BUFFER_SIZE - head);
    #####:  427:        if (res < 0) return -1;
    #####:  428:        head += res;
        -:  429:    }
        -:  430:
    #####:  431:    if (head > 0)
        -:  432:    {
    #####:  433:        head -= 1;
        -:  434:
    #####:  435:        *bufferP = (uint8_t *)lwm2m_malloc(head);
    #####:  436:        if (*bufferP == NULL) return 0;
    #####:  437:        memcpy(*bufferP, bufferLink, head);
        -:  438:    }
        -:  439:
    #####:  440:    return (int)head;
        -:  441:}
        -:  442:#endif
