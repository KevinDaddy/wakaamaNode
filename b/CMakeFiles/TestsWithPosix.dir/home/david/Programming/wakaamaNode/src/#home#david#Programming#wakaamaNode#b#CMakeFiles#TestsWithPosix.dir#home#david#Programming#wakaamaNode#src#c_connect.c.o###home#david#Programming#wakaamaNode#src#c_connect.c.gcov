        -:    0:Source:/home/david/Programming/wakaamaNode/src/c_connect.c
        -:    0:Graph:/home/david/Programming/wakaamaNode/b/CMakeFiles/TestsWithPosix.dir/home/david/Programming/wakaamaNode/src/c_connect.c.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#include "lwm2m/c_connect.h"
        -:    2:#include "internal.h"
        -:    3:#include "wakaama/internals.h"
        -:    4:#include "lwm2m/debug.h"
        -:    5:#include "lwm2m/network.h"
        -:    6:
        -:    7:#include <sys/time.h>
        -:    8:
        -:    9:
    #####:   10:void lwm2m_client_close(lwm2m_client_context_t *context) {
        -:   11:    #ifdef LWM2M_WITH_DTLS
        -:   12:    // Destructor for securityObj instances
        -:   13:    {
    #####:   14:        security_instance_t* s = (security_instance_t*)context->securityObject.instanceList;
    #####:   15:        while (s) {
    #####:   16:            lwm2m_free(s->publicIdentity);
    #####:   17:            lwm2m_free(s->serverPublicKey);
    #####:   18:            lwm2m_free(s->secretKey);
    #####:   19:            s = s->next;
        -:   20:        }
        -:   21:    }
        -:   22:    #endif
    #####:   23:    lwm2m_list_free(context->securityObject.instanceList);
    #####:   24:    context->securityObject.instanceList = NULL;
        -:   25:
    #####:   26:    lwm2m_list_free(context->serverObject.obj.instanceList);
    #####:   27:    context->serverObject.obj.instanceList = NULL;
        -:   28:
        -:   29:    // First close lwm2m (which may send an unreg coap message)
    #####:   30:    lwm2m_close(&context->context);
        -:   31:    // Close the network (and dtls session)
    #####:   32:    lwm2m_network_close(&context->context);
        -:   33:
    #####:   34:    context = NULL;
    #####:   35:}
        -:   36:
    #####:   37:inline security_instance_t* lwm2m_get_security_object(lwm2m_context_t *contextP, uint16_t security_instance_id){
    #####:   38:    return (security_instance_t *)LWM2M_LIST_FIND(contextP->objectList->instanceList, security_instance_id);
        -:   39:}
        -:   40:
    #####:   41:inline static security_instance_t* get_security_object_by_server_id(lwm2m_context_t *contextP, uint16_t shortServerID) {
    #####:   42:    security_instance_t * securityInstance=(security_instance_t *)contextP->objectList->instanceList;
    #####:   43:    while (NULL != securityInstance) {
    #####:   44:        if(securityInstance->shortID == shortServerID) return securityInstance;
    #####:   45:        securityInstance = securityInstance->next;
        -:   46:    }
    #####:   47:    return NULL;
        -:   48:}
        -:   49:
    #####:   50:const char* lwm2m_get_server_uri(lwm2m_context_t *contextP, uint16_t shortServerID) {
    #####:   51:    security_instance_t * securityInstance = get_security_object_by_server_id(contextP, shortServerID);
    #####:   52:    if (securityInstance == NULL) return NULL;
    #####:   53:    return securityInstance->uri;
        -:   54:}
        -:   55:
    #####:   56:bool lwm2m_unregister_server(lwm2m_context_t *contextP, uint16_t security_instance_id) {
        -:   57:    lwm2m_server_t * serverListEntry;
    #####:   58:    serverListEntry = (lwm2m_server_t *)LWM2M_LIST_FIND(contextP->serverList, security_instance_id);
    #####:   59:    if (serverListEntry != NULL)
        -:   60:    {
    #####:   61:        registration_deregister(contextP, serverListEntry);
    #####:   62:        serverListEntry->dirty = true;
    #####:   63:        return true;
        -:   64:    }
    #####:   65:    return false;
        -:   66:    //contextP->state = STATE_INITIAL;
        -:   67:}
        -:   68:
    #####:   69:void lwm2m_remove_unregistered_servers(lwm2m_context_t *contextP) {
    #####:   70:    lwm2m_object_t * securityObjP = contextP->objectList;
    #####:   71:    lwm2m_object_t * serverObjP = securityObjP->next;
        -:   72:
    #####:   73:    lwm2m_server_t * serverListEntry = contextP->serverList;
        -:   74:
    #####:   75:    bool removedServers = false;
    #####:   76:    while (serverListEntry != NULL)
        -:   77:    {
    #####:   78:        if (serverListEntry->status != STATE_DEREGISTERED) {
    #####:   79:            serverListEntry = serverListEntry->next;
    #####:   80:            continue;
        -:   81:        }
        -:   82:
    #####:   83:        serverListEntry->dirty = true;
        -:   84:
    #####:   85:        uint16_t security_instance_id = serverListEntry->secObjInstID;
        -:   86:
        -:   87:        security_instance_t * securityInstance;
    #####:   88:        securityObjP->instanceList = LWM2M_LIST_RM(securityObjP->instanceList, security_instance_id, &securityInstance);
    #####:   89:        if (securityInstance != NULL)
        -:   90:        {
        -:   91:            #ifdef LWM2M_WITH_DTLS
        -:   92:            // Destructor for securityObj instances
    #####:   93:            if (securityInstance->secretKey) {
    #####:   94:                lwm2m_free(securityInstance->secretKey);
    #####:   95:                securityInstance->secretKey=NULL;
    #####:   96:                securityInstance->secretKeyLen=0;
        -:   97:            }
        -:   98:
    #####:   99:            if (securityInstance->serverPublicKey) {
    #####:  100:                lwm2m_free(securityInstance->serverPublicKey);
    #####:  101:                securityInstance->serverPublicKey=NULL;
    #####:  102:                securityInstance->serverPublicKeyLen=0;
        -:  103:            }
        -:  104:
    #####:  105:            if (securityInstance->publicIdentity) {
    #####:  106:                lwm2m_free(securityInstance->publicIdentity);
    #####:  107:                securityInstance->publicIdentity=NULL;
    #####:  108:                securityInstance->publicIdLen=0;
        -:  109:            }
        -:  110:            #endif
        -:  111:
    #####:  112:            lwm2m_free(securityInstance);
        -:  113:        }
        -:  114:
        -:  115:        server_instance_t * serverInstance;
    #####:  116:        serverObjP->instanceList = LWM2M_LIST_RM(serverObjP->instanceList, security_instance_id, &serverInstance);
    #####:  117:        if (serverInstance != NULL)
        -:  118:        {
    #####:  119:            lwm2m_free(serverInstance);
        -:  120:        }
        -:  121:
    #####:  122:        removedServers = true;
    #####:  123:        serverListEntry = serverListEntry->next;
        -:  124:    }
        -:  125:
    #####:  126:    if (removedServers)
    #####:  127:        contextP->state = STATE_INITIAL;
    #####:  128:}
        -:  129:
    #####:  130:static void performUpdateRegistration(lwm2m_context_t *contextP,lwm2m_list_t* instance) {
    #####:  131:    server_instance_t * serverInstance = (server_instance_t *)instance;
    #####:  132:    lwm2m_update_registration (contextP,serverInstance->shortServerId,true);
    #####:  133:}
        -:  134:
    #####:  135:bool lwm2m_add_server(lwm2m_context_t *contextP, uint16_t shortServerID,
        -:  136:                             const char* uri, uint32_t lifetime, bool storing)
        -:  137:{
    #####:  138:    lwm2m_object_t * securityObjP = contextP->objectList;
    #####:  139:    lwm2m_object_t * serverObjP = securityObjP->next;
        -:  140:
    #####:  141:    security_instance_t * securityInstance = (security_instance_t *)lwm2m_malloc(sizeof(security_instance_t));
    #####:  142:    server_instance_t * serverInstance = (server_instance_t *)lwm2m_malloc(sizeof(server_instance_t));
        -:  143:
    #####:  144:    if (NULL == securityInstance || serverInstance == NULL)
        -:  145:    {
    #####:  146:        lwm2m_free(securityInstance);
    #####:  147:        lwm2m_free(serverInstance);
    #####:  148:        return false;
        -:  149:    }
        -:  150:
    #####:  151:    memset(securityInstance, 0, sizeof(security_instance_t));
    #####:  152:    securityInstance->instanceId = lwm2m_list_newId(securityObjP->instanceList);
    #####:  153:    strncpy(securityInstance->uri, uri, sizeof(securityInstance->uri));
    #####:  154:    securityInstance->isBootstrap = false;
    #####:  155:    securityInstance->shortID = shortServerID;
    #####:  156:    securityInstance->clientHoldOffTime = 10;
    #####:  157:    securityInstance->securityMode = LWM2M_SECURITY_MODE_NONE;
        -:  158:
    #####:  159:    securityObjP->instanceList = LWM2M_LIST_ADD(securityObjP->instanceList, securityInstance);
        -:  160:
    #####:  161:    memset(serverInstance, 0, sizeof(server_instance_t));
    #####:  162:    serverInstance->instanceId = lwm2m_list_newId(serverObjP->instanceList);
    #####:  163:    serverInstance->shortServerId = shortServerID;
    #####:  164:    serverInstance->lifetime = lifetime;
    #####:  165:    serverInstance->storing = storing;
    #####:  166:    serverInstance->binding.data[0] = 'U';
    #####:  167:    serverInstance->binding.data[1] = 0;
    #####:  168:    serverInstance->regUpdate = performUpdateRegistration;
    #####:  169:    serverObjP->instanceList = LWM2M_LIST_ADD(serverObjP->instanceList, serverInstance);
        -:  170:
    #####:  171:    contextP->state = STATE_INITIAL;
    #####:  172:    return true;
        -:  173:}
        -:  174:
        -:  175:#ifdef LWM2M_WITH_DTLS
    #####:  176:void internal_erase_security_params(security_instance_t * securityInstance) {
    #####:  177:    if (securityInstance->secretKey) {
    #####:  178:        lwm2m_free(securityInstance->secretKey);
    #####:  179:        securityInstance->secretKey=NULL;
    #####:  180:        securityInstance->secretKeyLen=0;
        -:  181:    }
        -:  182:
    #####:  183:    if (securityInstance->publicIdentity) {
    #####:  184:        lwm2m_free(securityInstance->publicIdentity);
    #####:  185:        securityInstance->publicIdentity=NULL;
    #####:  186:        securityInstance->publicIdLen=0;
        -:  187:    }
    #####:  188:}
        -:  189:
    #####:  190:bool lwm2m_use_dtls_psk(lwm2m_context_t *contextP, uint16_t shortServerID,
        -:  191:                               const char* publicId, const char* psk, unsigned short pskLen) {
    #####:  192:    security_instance_t * securityInstance=get_security_object_by_server_id(contextP, shortServerID);
    #####:  193:    if (NULL == securityInstance) return false;
        -:  194:
    #####:  195:    internal_erase_security_params(securityInstance);
        -:  196:
    #####:  197:    if (publicId != NULL && psk != NULL) {
    #####:  198:        securityInstance->securityMode = LWM2M_SECURITY_MODE_PRE_SHARED_KEY;
    #####:  199:        securityInstance->publicIdLen = (unsigned short)strlen(publicId);
    #####:  200:        securityInstance->publicIdentity = lwm2m_malloc(securityInstance->publicIdLen+1);
    #####:  201:        strcpy(securityInstance->publicIdentity, publicId);
        -:  202:
    #####:  203:        securityInstance->secretKey = lwm2m_malloc(pskLen);
    #####:  204:        memcpy(securityInstance->secretKey, psk, pskLen);
    #####:  205:        securityInstance->secretKeyLen = pskLen;
        -:  206:    } else {
    #####:  207:        securityInstance->securityMode = LWM2M_SECURITY_MODE_NONE;
        -:  208:    }
        -:  209:
    #####:  210:    return true;
        -:  211:}
        -:  212:#endif
        -:  213:
    #####:  214:inline bool lwm2m_is_connected(lwm2m_context_t *contextP) {
    #####:  215:    return contextP->state == STATE_READY;
        -:  216:}
        -:  217:
    #####:  218:inline int lwm2m_process(lwm2m_context_t *contextP, struct timeval *next_event) {
    #####:  219:    if (!lwm2m_network_process(contextP, next_event))
    #####:  220:        return COAP_505_NO_NETWORK_CONNECTION;
    #####:  221:    if (!internal_in_dtls_handshake(contextP))
    #####:  222:        return lwm2m_step(contextP, &next_event->tv_sec);
        -:  223:    else
    #####:  224:        return COAP_NO_ERROR;
        -:  225:}
        -:  226:
    #####:  227:void lwm2m_watch_and_reconnect(lwm2m_context_t * contextP, struct timeval* next_event, int reconnectTime) {
    #####:  228:    if (contextP->state == STATE_BOOTSTRAP_REQUIRED) {
        -:  229:        // next_event might need to happen earlier
    #####:  230:        if (next_event->tv_sec>reconnectTime) next_event->tv_sec = reconnectTime;
        -:  231:        // main state reset
    #####:  232:        contextP->state = STATE_INITIAL;
        -:  233:        // server object state reset
    #####:  234:        lwm2m_server_t* s = contextP->serverList;
    #####:  235:        while(s) {
    #####:  236:            if (s->status == STATE_REG_FAILED)
    #####:  237:                s->status = STATE_DEREGISTERED;
    #####:  238:            s = s->next;
        -:  239:        }
        -:  240:    }
    #####:  241:}
        -:  242:
    #####:  243:uint8_t lwm2m_client_init(lwm2m_client_context_t *context, const char * endpointName)
        -:  244:{
    #####:  245:    memset(context, 0, sizeof(lwm2m_client_context_t));
    #####:  246:    srand((int)lwm2m_gettime());
    #####:  247:    context->context.nextMID = rand();
        -:  248:
    #####:  249:    init_security_object(context);
    #####:  250:    init_server_object(context);
    #####:  251:    init_device_object(context);
        -:  252:
        -:  253:    lwm2m_object_t * objArray[3];
    #####:  254:    objArray[0] = &context->securityObject;
    #####:  255:    objArray[1] = &context->serverObject.obj;
    #####:  256:    objArray[2] = &context->deviceObject.obj;
        -:  257:
        -:  258:    /*
        -:  259:     * We configure the liblwm2m library with the name of the client - which shall be unique for each client -
        -:  260:     * the number of objects we will be passing through and the objects array
        -:  261:     */
    #####:  262:    lwm2m_configure(&context->context, endpointName, NULL, NULL, 3, objArray);
        -:  263:
    #####:  264:    return lwm2m_network_init (&context->context,0);
        -:  265:}
