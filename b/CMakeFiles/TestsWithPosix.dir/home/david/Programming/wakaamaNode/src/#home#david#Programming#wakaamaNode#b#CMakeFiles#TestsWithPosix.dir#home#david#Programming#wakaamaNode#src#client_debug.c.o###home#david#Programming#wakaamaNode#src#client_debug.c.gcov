        -:    0:Source:/home/david/Programming/wakaamaNode/src/client_debug.c
        -:    0:Graph:/home/david/Programming/wakaamaNode/b/CMakeFiles/TestsWithPosix.dir/home/david/Programming/wakaamaNode/src/client_debug.c.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#include "lwm2m/debug.h"
        -:    2:#include "wakaama_config.h"
        -:    3:#include "wakaama/liblwm2m.h"
        -:    4:#include "wakaama/internals.h"
        -:    5:
    #####:    6:void print_state(lwm2m_context_t * lwm2mH)
        -:    7:{
        -:    8:    lwm2m_printf("State: ");
    #####:    9:    switch(lwm2mH->state)
        -:   10:    {
    #####:   11:    case STATE_INITIAL:
        -:   12:        lwm2m_printf("STATE_INITIAL");
    #####:   13:        break;
    #####:   14:    case STATE_BOOTSTRAP_REQUIRED:
        -:   15:        lwm2m_printf("STATE_BOOTSTRAP_REQUIRED");
    #####:   16:        break;
    #####:   17:    case STATE_BOOTSTRAPPING:
        -:   18:        lwm2m_printf("STATE_BOOTSTRAPPING");
    #####:   19:        break;
    #####:   20:    case STATE_REGISTER_REQUIRED:
        -:   21:        lwm2m_printf("STATE_REGISTER_REQUIRED");
    #####:   22:        break;
    #####:   23:    case STATE_REGISTER_REQUIRED2:
        -:   24:        lwm2m_printf("STATE_REGISTER_REQUIRED2");
    #####:   25:        break;
    #####:   26:    case STATE_REGISTERING:
        -:   27:        lwm2m_printf("STATE_REGISTERING");
    #####:   28:        break;
    #####:   29:    case STATE_READY:
        -:   30:        lwm2m_printf("STATE_READY");
    #####:   31:        break;
        -:   32:    }
    #####:   33:    lwm2m_printf("\r\n");
        -:   34:
        -:   35:    lwm2m_server_t * targetP;
        -:   36:
    #####:   37:    if (lwm2mH->bootstrapServerList == NULL)
        -:   38:    {
        -:   39:        lwm2m_printf("No Bootstrap Server.\r\n");
        -:   40:    }
        -:   41:    else
        -:   42:    {
        -:   43:        lwm2m_printf("Bootstrap Servers:\r\n");
    #####:   44:        for (targetP = lwm2mH->bootstrapServerList ; targetP != NULL ; targetP = targetP->next)
        -:   45:        {
        -:   46:            lwm2m_printf(" - Security Object ID %d", targetP->secObjInstID);
        -:   47:            lwm2m_printf("\tHold Off Time: %lu s", (unsigned long)targetP->lifetime);
        -:   48:            lwm2m_printf("\tstatus: ");
    #####:   49:            switch(targetP->status)
        -:   50:            {
    #####:   51:            case STATE_DEREGISTERED:
        -:   52:                lwm2m_printf("DEREGISTERED\r\n");
    #####:   53:                break;
    #####:   54:            case STATE_BS_HOLD_OFF:
        -:   55:                lwm2m_printf("CLIENT HOLD OFF\r\n");
    #####:   56:                break;
    #####:   57:            case STATE_BS_INITIATED:
        -:   58:                lwm2m_printf("BOOTSTRAP INITIATED\r\n");
    #####:   59:                break;
    #####:   60:            case STATE_BS_PENDING:
        -:   61:                lwm2m_printf("BOOTSTRAP PENDING\r\n");
    #####:   62:                break;
    #####:   63:            case STATE_BS_FINISHED:
        -:   64:                lwm2m_printf("BOOTSTRAP FINISHED\r\n");
    #####:   65:                break;
    #####:   66:            case STATE_BS_FAILED:
        -:   67:                lwm2m_printf("BOOTSTRAP FAILED\r\n");
    #####:   68:                break;
    #####:   69:            default:
        -:   70:                lwm2m_printf("INVALID (%d)\r\n", (int)targetP->status);
        -:   71:            }
        -:   72:            lwm2m_printf("\r\n");
        -:   73:        }
        -:   74:    }
        -:   75:
    #####:   76:    if (lwm2mH->serverList == NULL)
        -:   77:    {
        -:   78:        lwm2m_printf("No LWM2M Server.\r\n");
        -:   79:    }
        -:   80:    else
        -:   81:    {
        -:   82:        lwm2m_printf("LWM2M Servers:\r\n");
    #####:   83:        for (targetP = lwm2mH->serverList ; targetP != NULL ; targetP = targetP->next)
        -:   84:        {
        -:   85:            lwm2m_printf(" - Server ID %d", targetP->shortID);
        -:   86:            lwm2m_printf("\tstatus: ");
    #####:   87:            switch(targetP->status)
        -:   88:            {
    #####:   89:            case STATE_DEREGISTERED:
        -:   90:                lwm2m_printf("DEREGISTERED\r\n");
    #####:   91:                break;
    #####:   92:            case STATE_REG_PENDING:
        -:   93:                lwm2m_printf("REGISTRATION PENDING\r\n");
    #####:   94:                break;
    #####:   95:            case STATE_REGISTERED:
        -:   96:                lwm2m_printf("REGISTERED\tlocation: \"%s\"\tLifetime: %lus\r\n", targetP->location, (unsigned long)targetP->lifetime);
    #####:   97:                break;
    #####:   98:            case STATE_REG_UPDATE_PENDING:
        -:   99:                lwm2m_printf("REGISTRATION UPDATE PENDING\r\n");
    #####:  100:                break;
    #####:  101:            case STATE_DEREG_PENDING:
        -:  102:                lwm2m_printf("DEREGISTRATION PENDING\r\n");
    #####:  103:                break;
    #####:  104:            case STATE_REG_FAILED:
        -:  105:                lwm2m_printf("REGISTRATION FAILED\r\n");
    #####:  106:                break;
    #####:  107:            default:
        -:  108:                lwm2m_printf("INVALID (%d)\r\n", (int)targetP->status);
        -:  109:            }
        -:  110:            lwm2m_printf("\r\n");
        -:  111:        }
        -:  112:    }
    #####:  113:}
        -:  114:
