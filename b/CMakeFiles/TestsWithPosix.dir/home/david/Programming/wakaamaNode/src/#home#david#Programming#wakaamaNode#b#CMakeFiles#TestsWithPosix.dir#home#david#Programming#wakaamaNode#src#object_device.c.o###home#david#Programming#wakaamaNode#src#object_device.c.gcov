        -:    0:Source:/home/david/Programming/wakaamaNode/src/object_device.c
        -:    0:Graph:/home/david/Programming/wakaamaNode/b/CMakeFiles/TestsWithPosix.dir/home/david/Programming/wakaamaNode/src/object_device.c.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*******************************************************************************
        -:    2: * Copyright (c) 2017-2018  David Graeff <david.graeff@web.de>
        -:    3: *
        -:    4: * Permission is hereby granted, free of charge, to any person obtaining a copy
        -:    5: * of this software and associated documentation files (the "Software"), to deal
        -:    6: * in the Software without restriction, including without limitation the rights
        -:    7: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        -:    8: * copies of the Software, and to permit persons to whom the Software is
        -:    9: * furnished to do so, subject to the following conditions:
        -:   10: *
        -:   11: * The above copyright notice and this permission notice shall be included in
        -:   12: * all copies or substantial portions of the Software.
        -:   13: */
        -:   14:
        -:   15:/*
        -:   16: * This object is single instance only, and is mandatory to all LWM2M devices.
        -:   17: * It describe the device such as its manufacturer, model, etc...
        -:   18: *
        -:   19: * Some of the optional resources are implemented here as well and can be configured
        -:   20: * via a wakaama_config.h file.
        -:   21: */
        -:   22:
        -:   23:#include "wakaama/liblwm2m.h"
        -:   24:#include "internal.h"
        -:   25:#include "lwm2m/c_objects.h"
        -:   26:#include "lwm2m/c_connect.h"
        -:   27:#include "lwm2m/object_device.h"
        -:   28:
        -:   29:// Configures the lwm2m device object instance
        -:   30:#include "wakaama_config.h"
        -:   31:
        -:   32:#include <string.h>
        -:   33:#include <ctype.h>
        -:   34:
    #####:   35:inline static lwm2m_object_res_item_t* prv_find_ressource(lwm2m_object_meta_information_t* metaP, unsigned res_id)
        -:   36:{
    #####:   37:    lwm2m_object_res_item_t* resP = 0;
    #####:   38:    for (int j=0; j < metaP->ressources_len; ++j)
        -:   39:    {
    #####:   40:        if (metaP->ressources[j].ressource_id == res_id) {
    #####:   41:            resP = &(metaP->ressources[j]);
    #####:   42:            break;
        -:   43:        }
        -:   44:    }
    #####:   45:    return resP;
        -:   46:}
        -:   47:
        -:   48:/**
        -:   49: * Behaves similar to the generic prv_read() of wakaama_object_utils.h,
        -:   50: * but intercepts the ressource ids, where we need to inquire a function
        -:   51: * first to get the result value.
        -:   52: */
    #####:   53:static uint8_t prv_device_read(uint16_t instanceId,
        -:   54:                                 int * numDataP,
        -:   55:                                 lwm2m_data_t ** dataArrayP,
        -:   56:                                 lwm2m_object_t * objectP,
        -:   57:                               lwm2m_context_t * contextP)
        -:   58:{
        -:   59:    (void)contextP;
    #####:   60:    lwm2m_list_t* instanceP = lwm2m_list_find(objectP->instanceList, instanceId);
    #####:   61:    if (NULL == instanceP) return COAP_404_NOT_FOUND;
        -:   62:
        -:   63:    // The meta data pointer is not an official member of the lwm2m_object_t struct.
    #####:   64:    lwm2m_object_meta_information_t* metaP = (lwm2m_object_meta_information_t*)objectP;
        -:   65:
        -:   66:    // is the server asking for the full instance ?
    #####:   67:    if (*numDataP == 0)
        -:   68:    {
    #####:   69:        *numDataP = lwm2m_object_prepare_full_response(dataArrayP, metaP);
        -:   70:    }
        -:   71:
        -:   72:
    #####:   73:    for (int i = 0 ; i < *numDataP ; i++)
        -:   74:    {
    #####:   75:        lwm2m_data_t* dataP = &(*dataArrayP)[i];
    #####:   76:        const unsigned res_id = dataP->id;
        -:   77:
    #####:   78:        lwm2m_object_res_item_t* resP = prv_find_ressource(metaP, res_id);
        -:   79:
    #####:   80:        if (!resP)
    #####:   81:            return COAP_404_NOT_FOUND;
        -:   82:
    #####:   83:        if (!(resP->access & O_RES_R))
    #####:   84:            return COAP_405_METHOD_NOT_ALLOWED;
        -:   85:
        -:   86:        uint8_t result;
    #####:   87:        switch (res_id) {
        -:   88:            #ifdef LWM2M_DEVICE_INFO_WITH_BATTERY
    #####:   89:            case RES_O_BATTERY_LEVEL:
    #####:   90:                lwm2m_data_encode_int(lwm2m_get_bat_level(), dataP);
    #####:   91:                break;
    #####:   92:            case RES_O_BATTERY_STATUS:
    #####:   93:                lwm2m_data_encode_int(lwm2m_get_bat_status(), dataP);
    #####:   94:                break;
        -:   95:            #endif
        -:   96:            #ifdef LWM2M_DEVICE_INFO_WITH_MEMINFO
    #####:   97:            case RES_O_MEMORY_FREE:
    #####:   98:                lwm2m_data_encode_int(lwm2m_get_free_mem(), dataP);
    #####:   99:                break;
    #####:  100:            case RES_O_MEMORY_TOTAL:
    #####:  101:                lwm2m_data_encode_int(lwm2m_get_total_mem(), dataP);
    #####:  102:                break;
        -:  103:            #endif
        -:  104:            #ifdef LWM2M_DEVICE_INFO_WITH_ERRCODE
    #####:  105:            case RES_M_ERROR_CODE:
    #####:  106:                lwm2m_data_encode_int(lwm2m_get_last_error(), dataP);
    #####:  107:                break;
        -:  108:            #endif
    #####:  109:            case RES_O_CURRENT_TIME:
    #####:  110:                lwm2m_data_encode_int((int64_t)lwm2m_gettime(), dataP);
    #####:  111:                break;
    #####:  112:            default:
    #####:  113:                if (resP->struct_member_offset==0)
    #####:  114:                    return COAP_405_METHOD_NOT_ALLOWED;
    #####:  115:                result = lwm2m_object_assign_single_value(dataP, resP, instanceP);
    #####:  116:                if (result != COAP_205_CONTENT)
    #####:  117:                    return result;
        -:  118:        } // end switch
        -:  119:    } // end for
    #####:  120:    return COAP_205_CONTENT;
        -:  121:}
        -:  122:
        -:  123:
    #####:  124:uint8_t prv_device_execute(uint16_t instanceId,
        -:  125:                        uint16_t resourceId,
        -:  126:                        lwm2m_context_t * contextP,
        -:  127:                        lwm2m_object_t * objectP)
        -:  128:{
        -:  129:    (void)contextP;
        -:  130:    // The meta data pointer is not an official member of the lwm2m_object_t struct.
    #####:  131:    lwm2m_object_meta_information_t* metaP = (lwm2m_object_meta_information_t*)objectP;
        -:  132:
    #####:  133:    lwm2m_list_t* instanceP = (lwm2m_list_t *)lwm2m_list_find(objectP->instanceList, instanceId);
    #####:  134:    if (NULL == instanceP) return COAP_404_NOT_FOUND;
        -:  135:
    #####:  136:    lwm2m_object_res_item_t* resP = prv_find_ressource(metaP, resourceId);
    #####:  137:    if (!resP)
    #####:  138:        return COAP_404_NOT_FOUND;
        -:  139:
    #####:  140:    if (!(resP->access & O_RES_E))
    #####:  141:        return COAP_405_METHOD_NOT_ALLOWED;
        -:  142:
    #####:  143:    switch(resP->ressource_id)
        -:  144:    {
        -:  145:        #ifdef LWM2M_DEVICE_WITH_REBOOT
    #####:  146:        case RES_M_REBOOT:
    #####:  147:            lwm2m_reboot();
    #####:  148:            return COAP_205_CONTENT;
        -:  149:        #endif
        -:  150:        #ifdef LWM2M_DEVICE_WITH_FACTORY_RESET
    #####:  151:        case RES_O_FACTORY_RESET:
    #####:  152:            lwm2m_factory_reset();
    #####:  153:            return COAP_205_CONTENT;
        -:  154:        #endif
        -:  155:    }
    #####:  156:    return COAP_405_METHOD_NOT_ALLOWED;
        -:  157:}
        -:  158:
    #####:  159:void init_device_object(lwm2m_client_context_t* ctx) {
    #####:  160:    OBJECT_META (device_instance_t,device_object,3,NULL,DEVICE_RES);
    #####:  161:    memcpy(&ctx->deviceObject, device_objectP,sizeof(ctx->deviceObject));
    #####:  162:     ctx->deviceObject.obj.objID = 3;
    #####:  163:    ctx->deviceObject.obj.instanceList = (lwm2m_list_t*)&ctx->deviceInstance;
    #####:  164:    ctx->deviceObject.obj.readFunc = prv_device_read;
    #####:  165:    ctx->deviceObject.obj.executeFunc = prv_device_execute;
    #####:  166:    ctx->deviceInstance.binding.data[0] = 'U';
    #####:  167:    ctx->deviceInstance.binding.reserved_len = 2;
        -:  168:    #ifdef LWM2M_DEVICE_INFO_WITH_TIME
    #####:  169:    ctx->deviceInstance.time_offset.reserved_len = 7;
        -:  170:    #endif
    #####:  171:}
        -:  172:
    #####:  173:inline void lwm2m_device_res_has_changed(lwm2m_context_t * contextP, uint16_t res_id) {
    #####:  174:    lwm2m_uri_t uri = {9,3,0,res_id};
    #####:  175:    lwm2m_resource_value_changed(contextP, &uri);
    #####:  176:}
