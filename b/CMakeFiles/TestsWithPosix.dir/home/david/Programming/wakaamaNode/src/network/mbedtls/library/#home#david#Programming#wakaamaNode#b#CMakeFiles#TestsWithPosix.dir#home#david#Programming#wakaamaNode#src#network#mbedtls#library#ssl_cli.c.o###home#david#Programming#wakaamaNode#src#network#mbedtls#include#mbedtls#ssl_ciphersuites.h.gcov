        -:    0:Source:/home/david/Programming/wakaamaNode/src/network/mbedtls/include/mbedtls/ssl_ciphersuites.h
        -:    0:Graph:/home/david/Programming/wakaamaNode/b/CMakeFiles/TestsWithPosix.dir/home/david/Programming/wakaamaNode/src/network/mbedtls/library/ssl_cli.c.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/**
        -:    2: * \file ssl_ciphersuites.h
        -:    3: *
        -:    4: * \brief SSL Ciphersuites for mbed TLS
        -:    5: */
        -:    6:/*
        -:    7: *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
        -:    8: *  SPDX-License-Identifier: Apache-2.0
        -:    9: *
        -:   10: *  Licensed under the Apache License, Version 2.0 (the "License"); you may
        -:   11: *  not use this file except in compliance with the License.
        -:   12: *  You may obtain a copy of the License at
        -:   13: *
        -:   14: *  http://www.apache.org/licenses/LICENSE-2.0
        -:   15: *
        -:   16: *  Unless required by applicable law or agreed to in writing, software
        -:   17: *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
        -:   18: *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   19: *  See the License for the specific language governing permissions and
        -:   20: *  limitations under the License.
        -:   21: *
        -:   22: *  This file is part of mbed TLS (https://tls.mbed.org)
        -:   23: */
        -:   24:#ifndef MBEDTLS_SSL_CIPHERSUITES_H
        -:   25:#define MBEDTLS_SSL_CIPHERSUITES_H
        -:   26:
        -:   27:#include "pk.h"
        -:   28:#include "cipher.h"
        -:   29:#include "md.h"
        -:   30:
        -:   31:#ifdef __cplusplus
        -:   32:extern "C" {
        -:   33:#endif
        -:   34:
        -:   35:/*
        -:   36: * Supported ciphersuites (Official IANA names)
        -:   37: */
        -:   38:#define MBEDTLS_TLS_RSA_WITH_NULL_MD5                    0x01   /**< Weak! */
        -:   39:#define MBEDTLS_TLS_RSA_WITH_NULL_SHA                    0x02   /**< Weak! */
        -:   40:
        -:   41:#define MBEDTLS_TLS_RSA_WITH_RC4_128_MD5                 0x04
        -:   42:#define MBEDTLS_TLS_RSA_WITH_RC4_128_SHA                 0x05
        -:   43:#define MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA                 0x09   /**< Weak! Not in TLS 1.2 */
        -:   44:
        -:   45:#define MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA            0x0A
        -:   46:
        -:   47:#define MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA             0x15   /**< Weak! Not in TLS 1.2 */
        -:   48:#define MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA        0x16
        -:   49:
        -:   50:#define MBEDTLS_TLS_PSK_WITH_NULL_SHA                    0x2C   /**< Weak! */
        -:   51:#define MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA                0x2D   /**< Weak! */
        -:   52:#define MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA                0x2E   /**< Weak! */
        -:   53:#define MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA             0x2F
        -:   54:
        -:   55:#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA         0x33
        -:   56:#define MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA             0x35
        -:   57:#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA         0x39
        -:   58:
        -:   59:#define MBEDTLS_TLS_RSA_WITH_NULL_SHA256                 0x3B   /**< Weak! */
        -:   60:#define MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256          0x3C   /**< TLS 1.2 */
        -:   61:#define MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256          0x3D   /**< TLS 1.2 */
        -:   62:
        -:   63:#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA        0x41
        -:   64:#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA    0x45
        -:   65:
        -:   66:#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256      0x67   /**< TLS 1.2 */
        -:   67:#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256      0x6B   /**< TLS 1.2 */
        -:   68:
        -:   69:#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA        0x84
        -:   70:#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA    0x88
        -:   71:
        -:   72:#define MBEDTLS_TLS_PSK_WITH_RC4_128_SHA                 0x8A
        -:   73:#define MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA            0x8B
        -:   74:#define MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA             0x8C
        -:   75:#define MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA             0x8D
        -:   76:
        -:   77:#define MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA             0x8E
        -:   78:#define MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA        0x8F
        -:   79:#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA         0x90
        -:   80:#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA         0x91
        -:   81:
        -:   82:#define MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA             0x92
        -:   83:#define MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA        0x93
        -:   84:#define MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA         0x94
        -:   85:#define MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA         0x95
        -:   86:
        -:   87:#define MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256          0x9C   /**< TLS 1.2 */
        -:   88:#define MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384          0x9D   /**< TLS 1.2 */
        -:   89:#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256      0x9E   /**< TLS 1.2 */
        -:   90:#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384      0x9F   /**< TLS 1.2 */
        -:   91:
        -:   92:#define MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256          0xA8   /**< TLS 1.2 */
        -:   93:#define MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384          0xA9   /**< TLS 1.2 */
        -:   94:#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256      0xAA   /**< TLS 1.2 */
        -:   95:#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384      0xAB   /**< TLS 1.2 */
        -:   96:#define MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256      0xAC   /**< TLS 1.2 */
        -:   97:#define MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384      0xAD   /**< TLS 1.2 */
        -:   98:
        -:   99:#define MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256          0xAE
        -:  100:#define MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384          0xAF
        -:  101:#define MBEDTLS_TLS_PSK_WITH_NULL_SHA256                 0xB0   /**< Weak! */
        -:  102:#define MBEDTLS_TLS_PSK_WITH_NULL_SHA384                 0xB1   /**< Weak! */
        -:  103:
        -:  104:#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256      0xB2
        -:  105:#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384      0xB3
        -:  106:#define MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256             0xB4   /**< Weak! */
        -:  107:#define MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384             0xB5   /**< Weak! */
        -:  108:
        -:  109:#define MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256      0xB6
        -:  110:#define MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384      0xB7
        -:  111:#define MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256             0xB8   /**< Weak! */
        -:  112:#define MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384             0xB9   /**< Weak! */
        -:  113:
        -:  114:#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256     0xBA   /**< TLS 1.2 */
        -:  115:#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 0xBE   /**< TLS 1.2 */
        -:  116:
        -:  117:#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256     0xC0   /**< TLS 1.2 */
        -:  118:#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 0xC4   /**< TLS 1.2 */
        -:  119:
        -:  120:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA             0xC001 /**< Weak! */
        -:  121:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA          0xC002 /**< Not in SSL3! */
        -:  122:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA     0xC003 /**< Not in SSL3! */
        -:  123:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA      0xC004 /**< Not in SSL3! */
        -:  124:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA      0xC005 /**< Not in SSL3! */
        -:  125:
        -:  126:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA            0xC006 /**< Weak! */
        -:  127:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA         0xC007 /**< Not in SSL3! */
        -:  128:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA    0xC008 /**< Not in SSL3! */
        -:  129:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA     0xC009 /**< Not in SSL3! */
        -:  130:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA     0xC00A /**< Not in SSL3! */
        -:  131:
        -:  132:#define MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA               0xC00B /**< Weak! */
        -:  133:#define MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA            0xC00C /**< Not in SSL3! */
        -:  134:#define MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA       0xC00D /**< Not in SSL3! */
        -:  135:#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA        0xC00E /**< Not in SSL3! */
        -:  136:#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA        0xC00F /**< Not in SSL3! */
        -:  137:
        -:  138:#define MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA              0xC010 /**< Weak! */
        -:  139:#define MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA           0xC011 /**< Not in SSL3! */
        -:  140:#define MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA      0xC012 /**< Not in SSL3! */
        -:  141:#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA       0xC013 /**< Not in SSL3! */
        -:  142:#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA       0xC014 /**< Not in SSL3! */
        -:  143:
        -:  144:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256  0xC023 /**< TLS 1.2 */
        -:  145:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384  0xC024 /**< TLS 1.2 */
        -:  146:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256   0xC025 /**< TLS 1.2 */
        -:  147:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384   0xC026 /**< TLS 1.2 */
        -:  148:#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256    0xC027 /**< TLS 1.2 */
        -:  149:#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384    0xC028 /**< TLS 1.2 */
        -:  150:#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256     0xC029 /**< TLS 1.2 */
        -:  151:#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384     0xC02A /**< TLS 1.2 */
        -:  152:
        -:  153:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256  0xC02B /**< TLS 1.2 */
        -:  154:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384  0xC02C /**< TLS 1.2 */
        -:  155:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256   0xC02D /**< TLS 1.2 */
        -:  156:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384   0xC02E /**< TLS 1.2 */
        -:  157:#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256    0xC02F /**< TLS 1.2 */
        -:  158:#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384    0xC030 /**< TLS 1.2 */
        -:  159:#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256     0xC031 /**< TLS 1.2 */
        -:  160:#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384     0xC032 /**< TLS 1.2 */
        -:  161:
        -:  162:#define MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA           0xC033 /**< Not in SSL3! */
        -:  163:#define MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA      0xC034 /**< Not in SSL3! */
        -:  164:#define MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA       0xC035 /**< Not in SSL3! */
        -:  165:#define MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA       0xC036 /**< Not in SSL3! */
        -:  166:#define MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256    0xC037 /**< Not in SSL3! */
        -:  167:#define MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384    0xC038 /**< Not in SSL3! */
        -:  168:#define MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA              0xC039 /**< Weak! No SSL3! */
        -:  169:#define MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256           0xC03A /**< Weak! No SSL3! */
        -:  170:#define MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384           0xC03B /**< Weak! No SSL3! */
        -:  171:
        -:  172:#define MBEDTLS_TLS_RSA_WITH_ARIA_128_CBC_SHA256         0xC03C /**< TLS 1.2 */
        -:  173:#define MBEDTLS_TLS_RSA_WITH_ARIA_256_CBC_SHA384         0xC03D /**< TLS 1.2 */
        -:  174:#define MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256     0xC044 /**< TLS 1.2 */
        -:  175:#define MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384     0xC045 /**< TLS 1.2 */
        -:  176:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256 0xC048 /**< TLS 1.2 */
        -:  177:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384 0xC049 /**< TLS 1.2 */
        -:  178:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256  0xC04A /**< TLS 1.2 */
        -:  179:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384  0xC04B /**< TLS 1.2 */
        -:  180:#define MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256   0xC04C /**< TLS 1.2 */
        -:  181:#define MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384   0xC04D /**< TLS 1.2 */
        -:  182:#define MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256    0xC04E /**< TLS 1.2 */
        -:  183:#define MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384    0xC04F /**< TLS 1.2 */
        -:  184:#define MBEDTLS_TLS_RSA_WITH_ARIA_128_GCM_SHA256         0xC050 /**< TLS 1.2 */
        -:  185:#define MBEDTLS_TLS_RSA_WITH_ARIA_256_GCM_SHA384         0xC051 /**< TLS 1.2 */
        -:  186:#define MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256     0xC052 /**< TLS 1.2 */
        -:  187:#define MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384     0xC053 /**< TLS 1.2 */
        -:  188:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 0xC05C /**< TLS 1.2 */
        -:  189:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 0xC05D /**< TLS 1.2 */
        -:  190:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256  0xC05E /**< TLS 1.2 */
        -:  191:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384  0xC05F /**< TLS 1.2 */
        -:  192:#define MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256   0xC060 /**< TLS 1.2 */
        -:  193:#define MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384   0xC061 /**< TLS 1.2 */
        -:  194:#define MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256    0xC062 /**< TLS 1.2 */
        -:  195:#define MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384    0xC063 /**< TLS 1.2 */
        -:  196:#define MBEDTLS_TLS_PSK_WITH_ARIA_128_CBC_SHA256         0xC064 /**< TLS 1.2 */
        -:  197:#define MBEDTLS_TLS_PSK_WITH_ARIA_256_CBC_SHA384         0xC065 /**< TLS 1.2 */
        -:  198:#define MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256     0xC066 /**< TLS 1.2 */
        -:  199:#define MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384     0xC067 /**< TLS 1.2 */
        -:  200:#define MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256     0xC068 /**< TLS 1.2 */
        -:  201:#define MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384     0xC069 /**< TLS 1.2 */
        -:  202:#define MBEDTLS_TLS_PSK_WITH_ARIA_128_GCM_SHA256         0xC06A /**< TLS 1.2 */
        -:  203:#define MBEDTLS_TLS_PSK_WITH_ARIA_256_GCM_SHA384         0xC06B /**< TLS 1.2 */
        -:  204:#define MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256     0xC06C /**< TLS 1.2 */
        -:  205:#define MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384     0xC06D /**< TLS 1.2 */
        -:  206:#define MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256     0xC06E /**< TLS 1.2 */
        -:  207:#define MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384     0xC06F /**< TLS 1.2 */
        -:  208:#define MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256   0xC070 /**< TLS 1.2 */
        -:  209:#define MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384   0xC071 /**< TLS 1.2 */
        -:  210:
        -:  211:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 0xC072 /**< Not in SSL3! */
        -:  212:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 0xC073 /**< Not in SSL3! */
        -:  213:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256  0xC074 /**< Not in SSL3! */
        -:  214:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384  0xC075 /**< Not in SSL3! */
        -:  215:#define MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256   0xC076 /**< Not in SSL3! */
        -:  216:#define MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384   0xC077 /**< Not in SSL3! */
        -:  217:#define MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256    0xC078 /**< Not in SSL3! */
        -:  218:#define MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384    0xC079 /**< Not in SSL3! */
        -:  219:
        -:  220:#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256         0xC07A /**< TLS 1.2 */
        -:  221:#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384         0xC07B /**< TLS 1.2 */
        -:  222:#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256     0xC07C /**< TLS 1.2 */
        -:  223:#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384     0xC07D /**< TLS 1.2 */
        -:  224:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 0xC086 /**< TLS 1.2 */
        -:  225:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 0xC087 /**< TLS 1.2 */
        -:  226:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256  0xC088 /**< TLS 1.2 */
        -:  227:#define MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384  0xC089 /**< TLS 1.2 */
        -:  228:#define MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256   0xC08A /**< TLS 1.2 */
        -:  229:#define MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384   0xC08B /**< TLS 1.2 */
        -:  230:#define MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256    0xC08C /**< TLS 1.2 */
        -:  231:#define MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384    0xC08D /**< TLS 1.2 */
        -:  232:
        -:  233:#define MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256       0xC08E /**< TLS 1.2 */
        -:  234:#define MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384       0xC08F /**< TLS 1.2 */
        -:  235:#define MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256   0xC090 /**< TLS 1.2 */
        -:  236:#define MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384   0xC091 /**< TLS 1.2 */
        -:  237:#define MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256   0xC092 /**< TLS 1.2 */
        -:  238:#define MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384   0xC093 /**< TLS 1.2 */
        -:  239:
        -:  240:#define MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256       0xC094
        -:  241:#define MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384       0xC095
        -:  242:#define MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256   0xC096
        -:  243:#define MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384   0xC097
        -:  244:#define MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256   0xC098
        -:  245:#define MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384   0xC099
        -:  246:#define MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 0xC09A /**< Not in SSL3! */
        -:  247:#define MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 0xC09B /**< Not in SSL3! */
        -:  248:
        -:  249:#define MBEDTLS_TLS_RSA_WITH_AES_128_CCM                0xC09C  /**< TLS 1.2 */
        -:  250:#define MBEDTLS_TLS_RSA_WITH_AES_256_CCM                0xC09D  /**< TLS 1.2 */
        -:  251:#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM            0xC09E  /**< TLS 1.2 */
        -:  252:#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM            0xC09F  /**< TLS 1.2 */
        -:  253:#define MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8              0xC0A0  /**< TLS 1.2 */
        -:  254:#define MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8              0xC0A1  /**< TLS 1.2 */
        -:  255:#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8          0xC0A2  /**< TLS 1.2 */
        -:  256:#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8          0xC0A3  /**< TLS 1.2 */
        -:  257:#define MBEDTLS_TLS_PSK_WITH_AES_128_CCM                0xC0A4  /**< TLS 1.2 */
        -:  258:#define MBEDTLS_TLS_PSK_WITH_AES_256_CCM                0xC0A5  /**< TLS 1.2 */
        -:  259:#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM            0xC0A6  /**< TLS 1.2 */
        -:  260:#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM            0xC0A7  /**< TLS 1.2 */
        -:  261:#define MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8              0xC0A8  /**< TLS 1.2 */
        -:  262:#define MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8              0xC0A9  /**< TLS 1.2 */
        -:  263:#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8          0xC0AA  /**< TLS 1.2 */
        -:  264:#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8          0xC0AB  /**< TLS 1.2 */
        -:  265:/* The last two are named with PSK_DHE in the RFC, which looks like a typo */
        -:  266:
        -:  267:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM        0xC0AC  /**< TLS 1.2 */
        -:  268:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM        0xC0AD  /**< TLS 1.2 */
        -:  269:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8      0xC0AE  /**< TLS 1.2 */
        -:  270:#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8      0xC0AF  /**< TLS 1.2 */
        -:  271:
        -:  272:#define MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8          0xC0FF  /**< experimental */
        -:  273:
        -:  274:/* Reminder: update mbedtls_ssl_premaster_secret when adding a new key exchange.
        -:  275: * Reminder: update MBEDTLS_KEY_EXCHANGE__xxx below
        -:  276: */
        -:  277:typedef enum {
        -:  278:    MBEDTLS_KEY_EXCHANGE_NONE = 0,
        -:  279:    MBEDTLS_KEY_EXCHANGE_RSA,
        -:  280:    MBEDTLS_KEY_EXCHANGE_DHE_RSA,
        -:  281:    MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
        -:  282:    MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
        -:  283:    MBEDTLS_KEY_EXCHANGE_PSK,
        -:  284:    MBEDTLS_KEY_EXCHANGE_DHE_PSK,
        -:  285:    MBEDTLS_KEY_EXCHANGE_RSA_PSK,
        -:  286:    MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,
        -:  287:    MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
        -:  288:    MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
        -:  289:    MBEDTLS_KEY_EXCHANGE_ECJPAKE,
        -:  290:} mbedtls_key_exchange_type_t;
        -:  291:
        -:  292:/* Key exchanges using a certificate */
        -:  293:#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)           || \
        -:  294:    defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)       || \
        -:  295:    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)     || \
        -:  296:    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)   || \
        -:  297:    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)       || \
        -:  298:    defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)      || \
        -:  299:    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
        -:  300:#define MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED
        -:  301:#endif
        -:  302:
        -:  303:/* Key exchanges allowing client certificate requests */
        -:  304:#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)           ||       \
        -:  305:    defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)       ||       \
        -:  306:    defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)      ||       \
        -:  307:    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)     ||       \
        -:  308:    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)    ||       \
        -:  309:    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
        -:  310:#define MBEDTLS_KEY_EXCHANGE__CERT_REQ_ALLOWED__ENABLED
        -:  311:#endif
        -:  312:
        -:  313:/* Key exchanges involving server signature in ServerKeyExchange */
        -:  314:#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)       || \
        -:  315:    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)     || \
        -:  316:    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
        -:  317:#define MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED
        -:  318:#endif
        -:  319:
        -:  320:/* Key exchanges using ECDH */
        -:  321:#if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)      || \
        -:  322:    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
        -:  323:#define MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED
        -:  324:#endif
        -:  325:
        -:  326:/* Key exchanges that don't involve ephemeral keys */
        -:  327:#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)           || \
        -:  328:    defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)           || \
        -:  329:    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)       || \
        -:  330:    defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED)
        -:  331:#define MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED
        -:  332:#endif
        -:  333:
        -:  334:/* Key exchanges that involve ephemeral keys */
        -:  335:#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)       || \
        -:  336:    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)       || \
        -:  337:    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)     || \
        -:  338:    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)     || \
        -:  339:    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)   || \
        -:  340:    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
        -:  341:#define MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED
        -:  342:#endif
        -:  343:
        -:  344:/* Key exchanges using a PSK */
        -:  345:#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)           || \
        -:  346:    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)       || \
        -:  347:    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)       || \
        -:  348:    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)
        -:  349:#define MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED
        -:  350:#endif
        -:  351:
        -:  352:/* Key exchanges using DHE */
        -:  353:#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)       || \
        -:  354:    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)
        -:  355:#define MBEDTLS_KEY_EXCHANGE__SOME__DHE_ENABLED
        -:  356:#endif
        -:  357:
        -:  358:/* Key exchanges using ECDHE */
        -:  359:#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)     || \
        -:  360:    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)   || \
        -:  361:    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)
        -:  362:#define MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED
        -:  363:#endif
        -:  364:
        -:  365:typedef struct mbedtls_ssl_ciphersuite_t mbedtls_ssl_ciphersuite_t;
        -:  366:
        -:  367:#define MBEDTLS_CIPHERSUITE_WEAK       0x01    /**< Weak ciphersuite flag  */
        -:  368:#define MBEDTLS_CIPHERSUITE_SHORT_TAG  0x02    /**< Short authentication tag,
        -:  369:                                                     eg for CCM_8 */
        -:  370:#define MBEDTLS_CIPHERSUITE_NODTLS     0x04    /**< Can't be used with DTLS */
        -:  371:
        -:  372:/**
        -:  373: * \brief   This structure is used for storing ciphersuite information
        -:  374: */
        -:  375:struct mbedtls_ssl_ciphersuite_t
        -:  376:{
        -:  377:    int id;
        -:  378:    const char * name;
        -:  379:
        -:  380:    mbedtls_cipher_type_t cipher;
        -:  381:    mbedtls_md_type_t mac;
        -:  382:    mbedtls_key_exchange_type_t key_exchange;
        -:  383:
        -:  384:    int min_major_ver;
        -:  385:    int min_minor_ver;
        -:  386:    int max_major_ver;
        -:  387:    int max_minor_ver;
        -:  388:
        -:  389:    unsigned char flags;
        -:  390:};
        -:  391:
        -:  392:const int *mbedtls_ssl_list_ciphersuites( void );
        -:  393:
        -:  394:const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_string( const char *ciphersuite_name );
        -:  395:const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite_id );
        -:  396:
        -:  397:#if defined(MBEDTLS_PK_C)
        -:  398:mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info );
        -:  399:mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_alg( const mbedtls_ssl_ciphersuite_t *info );
        -:  400:#endif
        -:  401:
        -:  402:int mbedtls_ssl_ciphersuite_uses_ec( const mbedtls_ssl_ciphersuite_t *info );
        -:  403:int mbedtls_ssl_ciphersuite_uses_psk( const mbedtls_ssl_ciphersuite_t *info );
        -:  404:
        -:  405:#if defined(MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED)
        -:  406:static inline int mbedtls_ssl_ciphersuite_has_pfs( const mbedtls_ssl_ciphersuite_t *info )
        -:  407:{
        -:  408:    switch( info->key_exchange )
        -:  409:    {
        -:  410:        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
        -:  411:        case MBEDTLS_KEY_EXCHANGE_DHE_PSK:
        -:  412:        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        -:  413:        case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:
        -:  414:        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
        -:  415:        case MBEDTLS_KEY_EXCHANGE_ECJPAKE:
        -:  416:            return( 1 );
        -:  417:
        -:  418:        default:
        -:  419:            return( 0 );
        -:  420:    }
        -:  421:}
        -:  422:#endif /* MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED */
        -:  423:
        -:  424:#if defined(MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED)
        -:  425:static inline int mbedtls_ssl_ciphersuite_no_pfs( const mbedtls_ssl_ciphersuite_t *info )
        -:  426:{
        -:  427:    switch( info->key_exchange )
        -:  428:    {
        -:  429:        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        -:  430:        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
        -:  431:        case MBEDTLS_KEY_EXCHANGE_RSA:
        -:  432:        case MBEDTLS_KEY_EXCHANGE_PSK:
        -:  433:        case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
        -:  434:            return( 1 );
        -:  435:
        -:  436:        default:
        -:  437:            return( 0 );
        -:  438:    }
        -:  439:}
        -:  440:#endif /* MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED */
        -:  441:
        -:  442:#if defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED)
        -:  443:static inline int mbedtls_ssl_ciphersuite_uses_ecdh( const mbedtls_ssl_ciphersuite_t *info )
        -:  444:{
        -:  445:    switch( info->key_exchange )
        -:  446:    {
        -:  447:        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        -:  448:        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
        -:  449:            return( 1 );
        -:  450:
        -:  451:        default:
        -:  452:            return( 0 );
        -:  453:    }
        -:  454:}
        -:  455:#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED */
        -:  456:
    #####:  457:static inline int mbedtls_ssl_ciphersuite_cert_req_allowed( const mbedtls_ssl_ciphersuite_t *info )
        -:  458:{
    #####:  459:    switch( info->key_exchange )
        -:  460:    {
    #####:  461:        case MBEDTLS_KEY_EXCHANGE_RSA:
        -:  462:        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
        -:  463:        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        -:  464:        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        -:  465:        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
        -:  466:        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
    #####:  467:            return( 1 );
        -:  468:
    #####:  469:        default:
    #####:  470:            return( 0 );
        -:  471:    }
        -:  472:}
        -:  473:
        -:  474:#if defined(MBEDTLS_KEY_EXCHANGE__SOME__DHE_ENABLED)
        -:  475:static inline int mbedtls_ssl_ciphersuite_uses_dhe( const mbedtls_ssl_ciphersuite_t *info )
        -:  476:{
        -:  477:    switch( info->key_exchange )
        -:  478:    {
        -:  479:        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
        -:  480:        case MBEDTLS_KEY_EXCHANGE_DHE_PSK:
        -:  481:            return( 1 );
        -:  482:
        -:  483:        default:
        -:  484:            return( 0 );
        -:  485:    }
        -:  486:}
        -:  487:#endif /* MBEDTLS_KEY_EXCHANGE__SOME__DHE_ENABLED) */
        -:  488:
        -:  489:#if defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED)
        -:  490:static inline int mbedtls_ssl_ciphersuite_uses_ecdhe( const mbedtls_ssl_ciphersuite_t *info )
        -:  491:{
        -:  492:    switch( info->key_exchange )
        -:  493:    {
        -:  494:        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
        -:  495:        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        -:  496:        case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:
        -:  497:            return( 1 );
        -:  498:
        -:  499:        default:
        -:  500:            return( 0 );
        -:  501:    }
        -:  502:}
        -:  503:#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED) */
        -:  504:
        -:  505:#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
        -:  506:static inline int mbedtls_ssl_ciphersuite_uses_server_signature( const mbedtls_ssl_ciphersuite_t *info )
        -:  507:{
        -:  508:    switch( info->key_exchange )
        -:  509:    {
        -:  510:        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
        -:  511:        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        -:  512:        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
        -:  513:            return( 1 );
        -:  514:
        -:  515:        default:
        -:  516:            return( 0 );
        -:  517:    }
        -:  518:}
        -:  519:#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */
        -:  520:
        -:  521:#ifdef __cplusplus
        -:  522:}
        -:  523:#endif
        -:  524:
        -:  525:#endif /* ssl_ciphersuites.h */
