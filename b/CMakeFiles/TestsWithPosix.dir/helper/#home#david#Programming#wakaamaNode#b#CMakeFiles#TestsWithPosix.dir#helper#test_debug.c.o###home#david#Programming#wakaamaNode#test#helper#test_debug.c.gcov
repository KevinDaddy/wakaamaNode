        -:    0:Source:/home/david/Programming/wakaamaNode/test/helper/test_debug.c
        -:    0:Graph:/home/david/Programming/wakaamaNode/b/CMakeFiles/TestsWithPosix.dir/helper/test_debug.c.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*******************************************************************************
        -:    2: * Copyright (c) 2017-2018  David Graeff <david.graeff@web.de>
        -:    3: *
        -:    4: * Permission is hereby granted, free of charge, to any person obtaining a copy
        -:    5: * of this software and associated documentation files (the "Software"), to deal
        -:    6: * in the Software without restriction, including without limitation the rights
        -:    7: * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        -:    8: * copies of the Software, and to permit persons to whom the Software is
        -:    9: * furnished to do so, subject to the following conditions:
        -:   10: *
        -:   11: * The above copyright notice and this permission notice shall be included in
        -:   12: * all copies or substantial portions of the Software.
        -:   13: */
        -:   14:#include "test_debug.h"
        -:   15:#include "lwm2m/c_connect.h"
        -:   16:#include "../src/wakaama/internals.h"
        -:   17:#include "lwm2m/debug.h"
        -:   18:
        -:   19:#include <stdio.h>
        -:   20:
        -:   21:#define CODE_TO_STRING(X)   case X : return #X
        -:   22:
    #####:   23:static const char* prv_status_to_string(int status)
        -:   24:{
    #####:   25:    switch(status)
        -:   26:    {
    #####:   27:    CODE_TO_STRING(COAP_NO_ERROR);
    #####:   28:    CODE_TO_STRING(COAP_IGNORE);
    #####:   29:    CODE_TO_STRING(COAP_201_CREATED);
    #####:   30:    CODE_TO_STRING(COAP_202_DELETED);
    #####:   31:    CODE_TO_STRING(COAP_204_CHANGED);
    #####:   32:    CODE_TO_STRING(COAP_205_CONTENT);
    #####:   33:    CODE_TO_STRING(COAP_400_BAD_REQUEST);
    #####:   34:    CODE_TO_STRING(COAP_401_UNAUTHORIZED);
    #####:   35:    CODE_TO_STRING(COAP_404_NOT_FOUND);
    #####:   36:    CODE_TO_STRING(COAP_405_METHOD_NOT_ALLOWED);
    #####:   37:    CODE_TO_STRING(COAP_406_NOT_ACCEPTABLE);
    #####:   38:    CODE_TO_STRING(COAP_500_INTERNAL_SERVER_ERROR);
    #####:   39:    CODE_TO_STRING(COAP_501_NOT_IMPLEMENTED);
    #####:   40:    CODE_TO_STRING(COAP_503_SERVICE_UNAVAILABLE);
    #####:   41:    default: return "";
        -:   42:    }
        -:   43:}
        -:   44:
    #####:   45:void print_status(int status)
        -:   46:{
    #####:   47:    fprintf(stderr, "%d.%02d (%s)",
    #####:   48:            (status&0xE0)>>5, status&0x1F, prv_status_to_string(status));
    #####:   49:}
        -:   50:
    #####:   51:void prv_print_error(int status)
        -:   52:{
    #####:   53:    fprintf(stderr, "Error status: ");
    #####:   54:    print_status(status);
    #####:   55:    fprintf(stderr, "\r\n");
    #####:   56:}
        -:   57:
    #####:   58:char * prv_dump_binding(lwm2m_binding_t binding)
        -:   59:{
    #####:   60:    switch (binding)
        -:   61:    {
    #####:   62:    case BINDING_UNKNOWN:
    #####:   63:        return "Not specified";
    #####:   64:    case BINDING_U:
    #####:   65:        return "UDP";
    #####:   66:    case BINDING_UQ:
    #####:   67:        return "UDP queue mode";
    #####:   68:    case BINDING_S:
    #####:   69:        return "SMS";
    #####:   70:    case BINDING_SQ:
    #####:   71:        return "SMS queue mode";
    #####:   72:    case BINDING_US:
    #####:   73:        return "UDP plus SMS";
    #####:   74:    case BINDING_UQS:
    #####:   75:        return "UDP queue mode plus SMS";
    #####:   76:    default:
    #####:   77:        return "";
        -:   78:    }
        -:   79:}
        -:   80:
    #####:   81:void prv_dump_client(lwm2m_client_t * targetP)
        -:   82:{
        -:   83:    lwm2m_client_object_t * objectP;
        -:   84:
    #####:   85:    fprintf(stdout, "Client #%d:\r\n", targetP->internalID);
    #####:   86:    fprintf(stdout, "\tname: \"%s\"\r\n", targetP->name);
    #####:   87:    fprintf(stdout, "\tbinding: \"%s\"\r\n", prv_dump_binding(targetP->binding));
    #####:   88:    if (targetP->msisdn) fprintf(stdout, "\tmsisdn: \"%s\"\r\n", targetP->msisdn);
    #####:   89:    if (targetP->altPath) fprintf(stdout, "\talternative path: \"%s\"\r\n", targetP->altPath);
    #####:   90:    fprintf(stdout, "\tlifetime: %d sec\r\n", targetP->lifetime);
    #####:   91:    fprintf(stdout, "\tobjects: ");
    #####:   92:    for (objectP = targetP->objectList; objectP != NULL ; objectP = objectP->next)
        -:   93:    {
    #####:   94:        if (objectP->instanceList == NULL)
        -:   95:        {
    #####:   96:            fprintf(stdout, "/%d, ", objectP->id);
        -:   97:        }
        -:   98:        else
        -:   99:        {
        -:  100:            lwm2m_list_t * instanceP;
        -:  101:
    #####:  102:            for (instanceP = objectP->instanceList; instanceP != NULL ; instanceP = instanceP->next)
        -:  103:            {
    #####:  104:                fprintf(stdout, "/%d/%d, ", objectP->id, instanceP->id);
        -:  105:            }
        -:  106:        }
        -:  107:    }
    #####:  108:    fprintf(stdout, "\r\n");
    #####:  109:}
        -:  110:
    #####:  111:void prv_output_clients(char * buffer,
        -:  112:                               void * user_data)
        -:  113:{
    #####:  114:    lwm2m_context_t * lwm2mH = (lwm2m_context_t *) user_data;
        -:  115:    lwm2m_client_t * targetP;
        -:  116:
    #####:  117:    targetP = lwm2mH->clientList;
        -:  118:
    #####:  119:    if (targetP == NULL)
        -:  120:    {
    #####:  121:        fprintf(stdout, "No client.\r\n");
    #####:  122:        return;
        -:  123:    }
        -:  124:
    #####:  125:    for (targetP = lwm2mH->clientList ; targetP != NULL ; targetP = targetP->next)
        -:  126:    {
    #####:  127:        prv_dump_client(targetP);
        -:  128:    }
        -:  129:}
        -:  130:
        -:  131:
        -:  132:
    #####:  133:void prv_result_callback(uint16_t clientID,
        -:  134:                                lwm2m_uri_t * uriP,
        -:  135:                                int status,
        -:  136:                                lwm2m_media_type_t format,
        -:  137:                                uint8_t * data,
        -:  138:                                int dataLength,
        -:  139:                                void * userData)
        -:  140:{
    #####:  141:    fprintf(stdout, "\r\nClient #%d /%d", clientID, uriP->objectId);
    #####:  142:    if (LWM2M_URI_IS_SET_INSTANCE(uriP))
    #####:  143:        fprintf(stdout, "/%d", uriP->instanceId);
    #####:  144:    else if (LWM2M_URI_IS_SET_RESOURCE(uriP))
    #####:  145:        fprintf(stdout, "/");
    #####:  146:    if (LWM2M_URI_IS_SET_RESOURCE(uriP))
    #####:  147:            fprintf(stdout, "/%d", uriP->resourceId);
    #####:  148:    fprintf(stdout, " : ");
    #####:  149:    print_status(status);
    #####:  150:    fprintf(stdout, "\r\n");
        -:  151:
        -:  152:    //output_data(stdout, format, data, dataLength, 1);
        -:  153:
    #####:  154:    fprintf(stdout, "\r\n> ");
    #####:  155:    fflush(stdout);
    #####:  156:}
        -:  157:
    #####:  158:void prv_notify_callback(uint16_t clientID,
        -:  159:                                lwm2m_uri_t * uriP,
        -:  160:                                int count,
        -:  161:                                lwm2m_media_type_t format,
        -:  162:                                uint8_t * data,
        -:  163:                                int dataLength,
        -:  164:                                void * userData)
        -:  165:{
    #####:  166:    fprintf(stdout, "\r\nNotify from client #%d /%d", clientID, uriP->objectId);
    #####:  167:    if (LWM2M_URI_IS_SET_INSTANCE(uriP))
    #####:  168:        fprintf(stdout, "/%d", uriP->instanceId);
    #####:  169:    else if (LWM2M_URI_IS_SET_RESOURCE(uriP))
    #####:  170:        fprintf(stdout, "/");
    #####:  171:    if (LWM2M_URI_IS_SET_RESOURCE(uriP))
    #####:  172:            fprintf(stdout, "/%d", uriP->resourceId);
    #####:  173:    fprintf(stdout, " number %d\r\n", count);
        -:  174:
        -:  175:    //output_data(stdout, format, data, dataLength, 1);
        -:  176:
    #####:  177:    fprintf(stdout, "\r\n> ");
    #####:  178:    fflush(stdout);
    #####:  179:}
